
EPD_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004ea0c  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080576b4  080576b4  0007010c  2**0
                  CONTENTS
  4 .ARM          00000008  080576b4  080576b4  000676b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080576bc  080576bc  0007010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080576bc  080576bc  000676bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080576c0  080576c0  000676c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  080576c4  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0007010c  2**0
                  CONTENTS
 10 .bss          00000728  2000010c  2000010c  0007010c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000834  20000834  0007010c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0007010c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021944  00000000  00000000  0007013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bf1  00000000  00000000  00091a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c68  00000000  00000000  00096678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a08  00000000  00000000  000982e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296e6  00000000  00000000  00099ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000245e0  00000000  00000000  000c33ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef449  00000000  00000000  000e79ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d6df7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007908  00000000  00000000  001d6e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008c90 	.word	0x08008c90

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000110 	.word	0x20000110
 80001ec:	08008c90 	.word	0x08008c90

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005aa:	4a16      	ldr	r2, [pc, #88]	; (8000604 <MX_DMA2D_Init+0x60>)
 80005ac:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005c8:	2202      	movs	r2, #2
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005da:	f002 f999 	bl	8002910 <HAL_DMA2D_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80005e4:	f001 fb6e 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005e8:	2101      	movs	r1, #1
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005ec:	f002 faee 	bl	8002bcc <HAL_DMA2D_ConfigLayer>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005f6:	f001 fb65 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000128 	.word	0x20000128
 8000604:	4002b000 	.word	0x4002b000

08000608 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <HAL_DMA2D_MspInit+0x3c>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d10d      	bne.n	8000636 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_DMA2D_MspInit+0x40>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <HAL_DMA2D_MspInit+0x40>)
 8000624:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <HAL_DMA2D_MspInit+0x40>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	4002b000 	.word	0x4002b000
 8000648:	40023800 	.word	0x40023800

0800064c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
 8000660:	615a      	str	r2, [r3, #20]
 8000662:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_FMC_Init+0x94>)
 8000666:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <MX_FMC_Init+0x98>)
 8000668:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_FMC_Init+0x94>)
 800066c:	2201      	movs	r2, #1
 800066e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_FMC_Init+0x94>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_FMC_Init+0x94>)
 8000678:	2204      	movs	r2, #4
 800067a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_FMC_Init+0x94>)
 800067e:	2210      	movs	r2, #16
 8000680:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_FMC_Init+0x94>)
 8000684:	2240      	movs	r2, #64	; 0x40
 8000686:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_FMC_Init+0x94>)
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_FMC_Init+0x94>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_FMC_Init+0x94>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_FMC_Init+0x94>)
 800069c:	2200      	movs	r2, #0
 800069e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_FMC_Init+0x94>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80006a6:	2310      	movs	r3, #16
 80006a8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80006aa:	2310      	movs	r3, #16
 80006ac:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80006ae:	2310      	movs	r3, #16
 80006b0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80006b2:	2310      	movs	r3, #16
 80006b4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80006b6:	2310      	movs	r3, #16
 80006b8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80006ba:	2310      	movs	r3, #16
 80006bc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80006be:	2310      	movs	r3, #16
 80006c0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <MX_FMC_Init+0x94>)
 80006c8:	f004 fdb8 	bl	800523c <HAL_SDRAM_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80006d2:	f001 faf7 	bl	8001cc4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80006d6:	bf00      	nop
 80006d8:	3720      	adds	r7, #32
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000168 	.word	0x20000168
 80006e4:	a0000140 	.word	0xa0000140

080006e8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006fc:	4b3b      	ldr	r3, [pc, #236]	; (80007ec <HAL_FMC_MspInit+0x104>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d16f      	bne.n	80007e4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000704:	4b39      	ldr	r3, [pc, #228]	; (80007ec <HAL_FMC_MspInit+0x104>)
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b38      	ldr	r3, [pc, #224]	; (80007f0 <HAL_FMC_MspInit+0x108>)
 8000710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000712:	4a37      	ldr	r2, [pc, #220]	; (80007f0 <HAL_FMC_MspInit+0x108>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6393      	str	r3, [r2, #56]	; 0x38
 800071a:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <HAL_FMC_MspInit+0x108>)
 800071c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000726:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800072a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000738:	230c      	movs	r3, #12
 800073a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4619      	mov	r1, r3
 8000740:	482c      	ldr	r0, [pc, #176]	; (80007f4 <HAL_FMC_MspInit+0x10c>)
 8000742:	f002 fb71 	bl	8002e28 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000752:	2303      	movs	r3, #3
 8000754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000756:	230c      	movs	r3, #12
 8000758:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4619      	mov	r1, r3
 800075e:	4826      	ldr	r0, [pc, #152]	; (80007f8 <HAL_FMC_MspInit+0x110>)
 8000760:	f002 fb62 	bl	8002e28 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000764:	f248 1333 	movw	r3, #33075	; 0x8133
 8000768:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000776:	230c      	movs	r3, #12
 8000778:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	481f      	ldr	r0, [pc, #124]	; (80007fc <HAL_FMC_MspInit+0x114>)
 8000780:	f002 fb52 	bl	8002e28 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000784:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000788:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000796:	230c      	movs	r3, #12
 8000798:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	4619      	mov	r1, r3
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <HAL_FMC_MspInit+0x118>)
 80007a0:	f002 fb42 	bl	8002e28 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80007a4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80007a8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007b6:	230c      	movs	r3, #12
 80007b8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	4811      	ldr	r0, [pc, #68]	; (8000804 <HAL_FMC_MspInit+0x11c>)
 80007c0:	f002 fb32 	bl	8002e28 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80007c4:	2360      	movs	r3, #96	; 0x60
 80007c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007d4:	230c      	movs	r3, #12
 80007d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	480a      	ldr	r0, [pc, #40]	; (8000808 <HAL_FMC_MspInit+0x120>)
 80007de:	f002 fb23 	bl	8002e28 <HAL_GPIO_Init>
 80007e2:	e000      	b.n	80007e6 <HAL_FMC_MspInit+0xfe>
    return;
 80007e4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000019c 	.word	0x2000019c
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40021400 	.word	0x40021400
 80007f8:	40020800 	.word	0x40020800
 80007fc:	40021800 	.word	0x40021800
 8000800:	40021000 	.word	0x40021000
 8000804:	40020c00 	.word	0x40020c00
 8000808:	40020400 	.word	0x40020400

0800080c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000814:	f7ff ff68 	bl	80006e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08e      	sub	sp, #56	; 0x38
 8000824:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
 800083a:	4b79      	ldr	r3, [pc, #484]	; (8000a20 <MX_GPIO_Init+0x200>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a78      	ldr	r2, [pc, #480]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000840:	f043 0310 	orr.w	r3, r3, #16
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b76      	ldr	r3, [pc, #472]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	623b      	str	r3, [r7, #32]
 8000850:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
 8000856:	4b72      	ldr	r3, [pc, #456]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a71      	ldr	r2, [pc, #452]	; (8000a20 <MX_GPIO_Init+0x200>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b6f      	ldr	r3, [pc, #444]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
 8000872:	4b6b      	ldr	r3, [pc, #428]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a6a      	ldr	r2, [pc, #424]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000878:	f043 0320 	orr.w	r3, r3, #32
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b68      	ldr	r3, [pc, #416]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0320 	and.w	r3, r3, #32
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	4b64      	ldr	r3, [pc, #400]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a63      	ldr	r2, [pc, #396]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b61      	ldr	r3, [pc, #388]	; (8000a20 <MX_GPIO_Init+0x200>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b5d      	ldr	r3, [pc, #372]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a5c      	ldr	r2, [pc, #368]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b5a      	ldr	r3, [pc, #360]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b56      	ldr	r3, [pc, #344]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a55      	ldr	r2, [pc, #340]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b53      	ldr	r3, [pc, #332]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b4f      	ldr	r3, [pc, #316]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a4e      	ldr	r2, [pc, #312]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b4c      	ldr	r3, [pc, #304]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b48      	ldr	r3, [pc, #288]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a47      	ldr	r2, [pc, #284]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b45      	ldr	r3, [pc, #276]	; (8000a20 <MX_GPIO_Init+0x200>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2108      	movs	r1, #8
 800091a:	4842      	ldr	r0, [pc, #264]	; (8000a24 <MX_GPIO_Init+0x204>)
 800091c:	f002 fd54 	bl	80033c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(reset_ESP01_GPIO_Port, reset_ESP01_Pin, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000926:	483f      	ldr	r0, [pc, #252]	; (8000a24 <MX_GPIO_Init+0x204>)
 8000928:	f002 fd4e 	bl	80033c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800092c:	237c      	movs	r3, #124	; 0x7c
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000930:	2303      	movs	r3, #3
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	483a      	ldr	r0, [pc, #232]	; (8000a28 <MX_GPIO_Init+0x208>)
 8000940:	f002 fa72 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC2 PC4 PC5 PC8
                           PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8000944:	f64e 5336 	movw	r3, #60726	; 0xed36
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	4832      	ldr	r0, [pc, #200]	; (8000a24 <MX_GPIO_Init+0x204>)
 800095a:	f002 fa65 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800095e:	2340      	movs	r3, #64	; 0x40
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000962:	2303      	movs	r3, #3
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	4619      	mov	r1, r3
 8000970:	482e      	ldr	r0, [pc, #184]	; (8000a2c <MX_GPIO_Init+0x20c>)
 8000972:	f002 fa59 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8000976:	2308      	movs	r3, #8
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098a:	4619      	mov	r1, r3
 800098c:	4825      	ldr	r0, [pc, #148]	; (8000a24 <MX_GPIO_Init+0x204>)
 800098e:	f002 fa4b 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA5
                           PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5
 8000992:	f248 03a7 	movw	r3, #32935	; 0x80a7
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000998:	2303      	movs	r3, #3
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	4822      	ldr	r0, [pc, #136]	; (8000a30 <MX_GPIO_Init+0x210>)
 80009a8:	f002 fa3e 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB3 PB4 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80009ac:	f24f 039c 	movw	r3, #61596	; 0xf09c
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b2:	2303      	movs	r3, #3
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	4619      	mov	r1, r3
 80009c0:	481c      	ldr	r0, [pc, #112]	; (8000a34 <MX_GPIO_Init+0x214>)
 80009c2:	f002 fa31 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD2
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_2
 80009c6:	f643 03f4 	movw	r3, #14580	; 0x38f4
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009cc:	2303      	movs	r3, #3
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d8:	4619      	mov	r1, r3
 80009da:	4817      	ldr	r0, [pc, #92]	; (8000a38 <MX_GPIO_Init+0x218>)
 80009dc:	f002 fa24 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG9 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_13
 80009e0:	f246 230c 	movw	r3, #25100	; 0x620c
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e6:	2303      	movs	r3, #3
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4811      	ldr	r0, [pc, #68]	; (8000a3c <MX_GPIO_Init+0x21c>)
 80009f6:	f002 fa17 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = reset_ESP01_Pin;
 80009fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(reset_ESP01_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_GPIO_Init+0x204>)
 8000a14:	f002 fa08 	bl	8002e28 <HAL_GPIO_Init>

}
 8000a18:	bf00      	nop
 8000a1a:	3738      	adds	r7, #56	; 0x38
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40021400 	.word	0x40021400
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40020400 	.word	0x40020400
 8000a38:	40020c00 	.word	0x40020c00
 8000a3c:	40021800 	.word	0x40021800

08000a40 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	; (8000ab8 <MX_I2C3_Init+0x78>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <MX_I2C3_Init+0x7c>)
 8000a4e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a62:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a7e:	f002 fcbd 	bl	80033fc <HAL_I2C_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a88:	f001 f91c 	bl	8001cc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a90:	f002 fdf8 	bl	8003684 <HAL_I2CEx_ConfigAnalogFilter>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000a9a:	f001 f913 	bl	8001cc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000aa2:	f002 fe2b 	bl	80036fc <HAL_I2CEx_ConfigDigitalFilter>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000aac:	f001 f90a 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200001a0 	.word	0x200001a0
 8000ab8:	40005c00 	.word	0x40005c00
 8000abc:	000186a0 	.word	0x000186a0

08000ac0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a29      	ldr	r2, [pc, #164]	; (8000b84 <HAL_I2C_MspInit+0xc4>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d14b      	bne.n	8000b7a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a27      	ldr	r2, [pc, #156]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b20:	2312      	movs	r3, #18
 8000b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4815      	ldr	r0, [pc, #84]	; (8000b8c <HAL_I2C_MspInit+0xcc>)
 8000b38:	f002 f976 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b42:	2312      	movs	r3, #18
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <HAL_I2C_MspInit+0xd0>)
 8000b5a:	f002 f965 	bl	8002e28 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000b68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40005c00 	.word	0x40005c00
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020000 	.word	0x40020000

08000b94 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
	ili9341_Init();
 8000b9a:	f006 f911 	bl	8006dc0 <ili9341_Init>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2234      	movs	r2, #52	; 0x34
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f007 fbfd 	bl	80083a4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000baa:	4b74      	ldr	r3, [pc, #464]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bac:	4a74      	ldr	r2, [pc, #464]	; (8000d80 <MX_LTDC_Init+0x1ec>)
 8000bae:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000bb0:	4b72      	ldr	r3, [pc, #456]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bb6:	4b71      	ldr	r3, [pc, #452]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bbc:	4b6f      	ldr	r3, [pc, #444]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bc2:	4b6e      	ldr	r3, [pc, #440]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000bc8:	4b6c      	ldr	r3, [pc, #432]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bca:	2209      	movs	r2, #9
 8000bcc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000bce:	4b6b      	ldr	r3, [pc, #428]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000bd4:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bd6:	221d      	movs	r2, #29
 8000bd8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000bda:	4b68      	ldr	r3, [pc, #416]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bdc:	2203      	movs	r2, #3
 8000bde:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000be0:	4b66      	ldr	r3, [pc, #408]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000be2:	f240 120d 	movw	r2, #269	; 0x10d
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000be8:	4b64      	ldr	r3, [pc, #400]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bea:	f240 1243 	movw	r2, #323	; 0x143
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000bf0:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bf2:	f240 1217 	movw	r2, #279	; 0x117
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000bf8:	4b60      	ldr	r3, [pc, #384]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bfa:	f240 1247 	movw	r2, #327	; 0x147
 8000bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c00:	4b5e      	ldr	r3, [pc, #376]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c08:	4b5c      	ldr	r3, [pc, #368]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c10:	4b5a      	ldr	r3, [pc, #360]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c18:	4858      	ldr	r0, [pc, #352]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c1a:	f002 fdaf 	bl	800377c <HAL_LTDC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8000c24:	f001 f84e 	bl	8001cc4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000c2c:	23f0      	movs	r3, #240	; 0xf0
 8000c2e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000c34:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c38:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c3e:	23ff      	movs	r3, #255	; 0xff
 8000c40:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c4a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  //pLayerCfg.FBStartAdress = 0;

  pLayerCfg.FBStartAdress = (uint32_t) &image_data_display_1;
 8000c50:	4b4c      	ldr	r3, [pc, #304]	; (8000d84 <MX_LTDC_Init+0x1f0>)
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28


  pLayerCfg.ImageWidth = 240;
 8000c54:	23f0      	movs	r3, #240	; 0xf0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000c58:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	4619      	mov	r1, r3
 8000c76:	4841      	ldr	r0, [pc, #260]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c78:	f002 ff12 	bl	8003aa0 <HAL_LTDC_ConfigLayer>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000c82:	f001 f81f 	bl	8001cc4 <Error_Handler>
  }

  /* USER CODE BEGIN LTDC_Init 2 */
  HAL_Delay(2000);
 8000c86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c8a:	f001 fb4d 	bl	8002328 <HAL_Delay>

  hltdc.Instance = LTDC;
 8000c8e:	4b3b      	ldr	r3, [pc, #236]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c90:	4a3b      	ldr	r2, [pc, #236]	; (8000d80 <MX_LTDC_Init+0x1ec>)
 8000c92:	601a      	str	r2, [r3, #0]
   hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c94:	4b39      	ldr	r3, [pc, #228]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	605a      	str	r2, [r3, #4]
   hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c9a:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
   hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ca0:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
   hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ca6:	4b35      	ldr	r3, [pc, #212]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
   hltdc.Init.HorizontalSync = 9;
 8000cac:	4b33      	ldr	r3, [pc, #204]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cae:	2209      	movs	r2, #9
 8000cb0:	615a      	str	r2, [r3, #20]
   hltdc.Init.VerticalSync = 1;
 8000cb2:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	619a      	str	r2, [r3, #24]
   hltdc.Init.AccumulatedHBP = 29;
 8000cb8:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cba:	221d      	movs	r2, #29
 8000cbc:	61da      	str	r2, [r3, #28]
   hltdc.Init.AccumulatedVBP = 3;
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	621a      	str	r2, [r3, #32]
   hltdc.Init.AccumulatedActiveW = 269;
 8000cc4:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cc6:	f240 120d 	movw	r2, #269	; 0x10d
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
   hltdc.Init.AccumulatedActiveH = 323;
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cce:	f240 1243 	movw	r2, #323	; 0x143
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
   hltdc.Init.TotalWidth = 279;
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cd6:	f240 1217 	movw	r2, #279	; 0x117
 8000cda:	62da      	str	r2, [r3, #44]	; 0x2c
   hltdc.Init.TotalHeigh = 327;
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cde:	f240 1247 	movw	r2, #327	; 0x147
 8000ce2:	631a      	str	r2, [r3, #48]	; 0x30
   hltdc.Init.Backcolor.Blue = 0;
 8000ce4:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   hltdc.Init.Backcolor.Green = 0;
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   hltdc.Init.Backcolor.Red = 0;
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
   if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cfc:	481f      	ldr	r0, [pc, #124]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cfe:	f002 fd3d 	bl	800377c <HAL_LTDC_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_LTDC_Init+0x178>
   {
     Error_Handler();
 8000d08:	f000 ffdc 	bl	8001cc4 <Error_Handler>
   }
   pLayerCfg.WindowX0 = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
   pLayerCfg.WindowX1 = 240;
 8000d10:	23f0      	movs	r3, #240	; 0xf0
 8000d12:	60bb      	str	r3, [r7, #8]
   pLayerCfg.WindowY0 = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
   pLayerCfg.WindowY1 = 320;
 8000d18:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d1c:	613b      	str	r3, [r7, #16]
   pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	617b      	str	r3, [r7, #20]
   pLayerCfg.Alpha = 255;
 8000d22:	23ff      	movs	r3, #255	; 0xff
 8000d24:	61bb      	str	r3, [r7, #24]
   pLayerCfg.Alpha0 = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
   pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000d2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d2e:	623b      	str	r3, [r7, #32]
   pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d30:	2307      	movs	r3, #7
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
   //pLayerCfg.FBStartAdress = 0;

   pLayerCfg.FBStartAdress = (uint32_t) &image_data_display_2;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_LTDC_Init+0x1f4>)
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28


   pLayerCfg.ImageWidth = 240;
 8000d38:	23f0      	movs	r3, #240	; 0xf0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   pLayerCfg.ImageHeight = 320;
 8000d3c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
   pLayerCfg.Backcolor.Blue = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
   pLayerCfg.Backcolor.Green = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
   pLayerCfg.Backcolor.Red = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
   if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4808      	ldr	r0, [pc, #32]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000d5c:	f002 fea0 	bl	8003aa0 <HAL_LTDC_ConfigLayer>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_LTDC_Init+0x1d6>
   {
     Error_Handler();
 8000d66:	f000 ffad 	bl	8001cc4 <Error_Handler>
   }
   HAL_Delay(2000);
 8000d6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d6e:	f001 fadb 	bl	8002328 <HAL_Delay>

  /* USER CODE END LTDC_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3738      	adds	r7, #56	; 0x38
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200001f4 	.word	0x200001f4
 8000d80:	40016800 	.word	0x40016800
 8000d84:	08008df8 	.word	0x08008df8
 8000d88:	0802e5f8 	.word	0x0802e5f8

08000d8c <HAL_LTDC_MspInit>:


void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b09a      	sub	sp, #104	; 0x68
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	2230      	movs	r2, #48	; 0x30
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f007 faf9 	bl	80083a4 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a84      	ldr	r2, [pc, #528]	; (8000fc8 <HAL_LTDC_MspInit+0x23c>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	f040 8101 	bne.w	8000fc0 <HAL_LTDC_MspInit+0x234>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000dc2:	2332      	movs	r3, #50	; 0x32
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 fd74 	bl	80048c0 <HAL_RCCEx_PeriphCLKConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000dde:	f000 ff71 	bl	8001cc4 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
 8000de6:	4b79      	ldr	r3, [pc, #484]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a78      	ldr	r2, [pc, #480]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000dec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b76      	ldr	r3, [pc, #472]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dfa:	623b      	str	r3, [r7, #32]
 8000dfc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	4b72      	ldr	r3, [pc, #456]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a71      	ldr	r2, [pc, #452]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e08:	f043 0320 	orr.w	r3, r3, #32
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b6f      	ldr	r3, [pc, #444]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0320 	and.w	r3, r3, #32
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	4b6b      	ldr	r3, [pc, #428]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a6a      	ldr	r2, [pc, #424]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b68      	ldr	r3, [pc, #416]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	4b64      	ldr	r3, [pc, #400]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a63      	ldr	r2, [pc, #396]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b61      	ldr	r3, [pc, #388]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a5c      	ldr	r2, [pc, #368]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b5a      	ldr	r3, [pc, #360]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b56      	ldr	r3, [pc, #344]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a55      	ldr	r2, [pc, #340]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b53      	ldr	r3, [pc, #332]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b4f      	ldr	r3, [pc, #316]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a4e      	ldr	r2, [pc, #312]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b4c      	ldr	r3, [pc, #304]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eaa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eb8:	230e      	movs	r3, #14
 8000eba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ebc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4843      	ldr	r0, [pc, #268]	; (8000fd0 <HAL_LTDC_MspInit+0x244>)
 8000ec4:	f001 ffb0 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8000ec8:	f641 0358 	movw	r3, #6232	; 0x1858
 8000ecc:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eda:	230e      	movs	r3, #14
 8000edc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	483b      	ldr	r0, [pc, #236]	; (8000fd4 <HAL_LTDC_MspInit+0x248>)
 8000ee6:	f001 ff9f 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eea:	2303      	movs	r3, #3
 8000eec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000efa:	2309      	movs	r3, #9
 8000efc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f02:	4619      	mov	r1, r3
 8000f04:	4834      	ldr	r0, [pc, #208]	; (8000fd8 <HAL_LTDC_MspInit+0x24c>)
 8000f06:	f001 ff8f 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000f0a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f0e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f1c:	230e      	movs	r3, #14
 8000f1e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f24:	4619      	mov	r1, r3
 8000f26:	482c      	ldr	r0, [pc, #176]	; (8000fd8 <HAL_LTDC_MspInit+0x24c>)
 8000f28:	f001 ff7e 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000f2c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000f30:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f3e:	230e      	movs	r3, #14
 8000f40:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f46:	4619      	mov	r1, r3
 8000f48:	4824      	ldr	r0, [pc, #144]	; (8000fdc <HAL_LTDC_MspInit+0x250>)
 8000f4a:	f001 ff6d 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f4e:	23c0      	movs	r3, #192	; 0xc0
 8000f50:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f5e:	230e      	movs	r3, #14
 8000f60:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f66:	4619      	mov	r1, r3
 8000f68:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <HAL_LTDC_MspInit+0x254>)
 8000f6a:	f001 ff5d 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f6e:	2308      	movs	r3, #8
 8000f70:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f7e:	230e      	movs	r3, #14
 8000f80:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f86:	4619      	mov	r1, r3
 8000f88:	4816      	ldr	r0, [pc, #88]	; (8000fe4 <HAL_LTDC_MspInit+0x258>)
 8000f8a:	f001 ff4d 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000f8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f92:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fa0:	2309      	movs	r3, #9
 8000fa2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480c      	ldr	r0, [pc, #48]	; (8000fdc <HAL_LTDC_MspInit+0x250>)
 8000fac:	f001 ff3c 	bl	8002e28 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 1, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2058      	movs	r0, #88	; 0x58
 8000fb6:	f001 fab6 	bl	8002526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000fba:	2058      	movs	r0, #88	; 0x58
 8000fbc:	f001 facf 	bl	800255e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3768      	adds	r7, #104	; 0x68
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40016800 	.word	0x40016800
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40021400 	.word	0x40021400
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40021800 	.word	0x40021800
 8000fe0:	40020800 	.word	0x40020800
 8000fe4:	40020c00 	.word	0x40020c00

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     HAL_Init();
 8000fee:	f001 f929 	bl	8002244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 fa5f 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f7ff fc13 	bl	8000820 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000ffa:	f7ff fad3 	bl	80005a4 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8000ffe:	f7ff fdc9 	bl	8000b94 <MX_LTDC_Init>
  MX_FMC_Init();
 8001002:	f7ff fb23 	bl	800064c <MX_FMC_Init>
  MX_I2C3_Init();
 8001006:	f7ff fd1b 	bl	8000a40 <MX_I2C3_Init>
  MX_SPI5_Init();
 800100a:	f000 fee5 	bl	8001dd8 <MX_SPI5_Init>
  MX_TIM6_Init();
 800100e:	f001 f825 	bl	800205c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001012:	f001 f87b 	bl	800210c <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001016:	f000 fe5b 	bl	8001cd0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 800101a:	f006 fa2b 	bl	8007474 <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 800101e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001022:	2000      	movs	r0, #0
 8001024:	f006 faa8 	bl	8007578 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8001028:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800102c:	2001      	movs	r0, #1
 800102e:	f006 faa3 	bl	8007578 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 fb04 	bl	8007640 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8001038:	f006 fdc2 	bl	8007bc0 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_GRAY);
 800103c:	488e      	ldr	r0, [pc, #568]	; (8001278 <main+0x290>)
 800103e:	f006 fb71 	bl	8007724 <BSP_LCD_Clear>
  HAL_TIM_Base_Start(&htim6);
 8001042:	488e      	ldr	r0, [pc, #568]	; (800127c <main+0x294>)
 8001044:	f004 ffba 	bl	8005fbc <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001048:	2200      	movs	r2, #0
 800104a:	498d      	ldr	r1, [pc, #564]	; (8001280 <main+0x298>)
 800104c:	488d      	ldr	r0, [pc, #564]	; (8001284 <main+0x29c>)
 800104e:	f003 ff07 	bl	8004e60 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001052:	2200      	movs	r2, #0
 8001054:	498c      	ldr	r1, [pc, #560]	; (8001288 <main+0x2a0>)
 8001056:	488b      	ldr	r0, [pc, #556]	; (8001284 <main+0x29c>)
 8001058:	f003 ffe4 	bl	8005024 <HAL_RTC_GetDate>

	  sprintf ((char*)stimebuf,"%02u:%02u",sTime.Hours, sTime.Minutes);
 800105c:	4b88      	ldr	r3, [pc, #544]	; (8001280 <main+0x298>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b87      	ldr	r3, [pc, #540]	; (8001280 <main+0x298>)
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	4989      	ldr	r1, [pc, #548]	; (800128c <main+0x2a4>)
 8001068:	4889      	ldr	r0, [pc, #548]	; (8001290 <main+0x2a8>)
 800106a:	f007 f9a3 	bl	80083b4 <siprintf>
	  BSP_LCD_DrawRect(0,0,240,18);
 800106e:	2312      	movs	r3, #18
 8001070:	22f0      	movs	r2, #240	; 0xf0
 8001072:	2100      	movs	r1, #0
 8001074:	2000      	movs	r0, #0
 8001076:	f006 fd17 	bl	8007aa8 <BSP_LCD_DrawRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 800107a:	4886      	ldr	r0, [pc, #536]	; (8001294 <main+0x2ac>)
 800107c:	f006 faf0 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(0,0,240,18);
 8001080:	2312      	movs	r3, #18
 8001082:	22f0      	movs	r2, #240	; 0xf0
 8001084:	2100      	movs	r1, #0
 8001086:	2000      	movs	r0, #0
 8001088:	f006 fd40 	bl	8007b0c <BSP_LCD_FillRect>
	  BSP_LCD_SetFont(&Font16);
 800108c:	4882      	ldr	r0, [pc, #520]	; (8001298 <main+0x2b0>)
 800108e:	f006 fb19 	bl	80076c4 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	f006 fae3 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 800109a:	487e      	ldr	r0, [pc, #504]	; (8001294 <main+0x2ac>)
 800109c:	f006 faf8 	bl	8007690 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 0, stimebuf, RIGHT_MODE);
 80010a0:	2302      	movs	r3, #2
 80010a2:	4a7b      	ldr	r2, [pc, #492]	; (8001290 <main+0x2a8>)
 80010a4:	2100      	movs	r1, #0
 80010a6:	2000      	movs	r0, #0
 80010a8:	f006 fba8 	bl	80077fc <BSP_LCD_DisplayStringAt>

	  sprintf ((char*)sdatebuf,"%02u/%02u/%02u",sDate.Year, sDate.Month,sDate.Date);
 80010ac:	4b76      	ldr	r3, [pc, #472]	; (8001288 <main+0x2a0>)
 80010ae:	78db      	ldrb	r3, [r3, #3]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b75      	ldr	r3, [pc, #468]	; (8001288 <main+0x2a0>)
 80010b4:	785b      	ldrb	r3, [r3, #1]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4b73      	ldr	r3, [pc, #460]	; (8001288 <main+0x2a0>)
 80010ba:	789b      	ldrb	r3, [r3, #2]
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	460b      	mov	r3, r1
 80010c0:	4976      	ldr	r1, [pc, #472]	; (800129c <main+0x2b4>)
 80010c2:	4877      	ldr	r0, [pc, #476]	; (80012a0 <main+0x2b8>)
 80010c4:	f007 f976 	bl	80083b4 <siprintf>
	  BSP_LCD_SetFont(&Font16);
 80010c8:	4873      	ldr	r0, [pc, #460]	; (8001298 <main+0x2b0>)
 80010ca:	f006 fafb 	bl	80076c4 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80010ce:	f04f 30ff 	mov.w	r0, #4294967295
 80010d2:	f006 fac5 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 80010d6:	486f      	ldr	r0, [pc, #444]	; (8001294 <main+0x2ac>)
 80010d8:	f006 fada 	bl	8007690 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 0, sdatebuf, LEFT_MODE);
 80010dc:	2303      	movs	r3, #3
 80010de:	4a70      	ldr	r2, [pc, #448]	; (80012a0 <main+0x2b8>)
 80010e0:	2100      	movs	r1, #0
 80010e2:	2000      	movs	r0, #0
 80010e4:	f006 fb8a 	bl	80077fc <BSP_LCD_DisplayStringAt>
	  //
	  //
	  BSP_LCD_SetFont(&Font24);
 80010e8:	486e      	ldr	r0, [pc, #440]	; (80012a4 <main+0x2bc>)
 80010ea:	f006 faeb 	bl	80076c4 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	f006 fab5 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 80010f6:	4867      	ldr	r0, [pc, #412]	; (8001294 <main+0x2ac>)
 80010f8:	f006 faca 	bl	8007690 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAtLine(2, (uint8_t*) "Temperature       ");
 80010fc:	496a      	ldr	r1, [pc, #424]	; (80012a8 <main+0x2c0>)
 80010fe:	2002      	movs	r0, #2
 8001100:	f006 fc3a 	bl	8007978 <BSP_LCD_DisplayStringAtLine>
	  //
	  BSP_LCD_SetFont(&Font24);
 8001104:	4867      	ldr	r0, [pc, #412]	; (80012a4 <main+0x2bc>)
 8001106:	f006 fadd 	bl	80076c4 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800110a:	f04f 30ff 	mov.w	r0, #4294967295
 800110e:	f006 faa7 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 8001112:	4860      	ldr	r0, [pc, #384]	; (8001294 <main+0x2ac>)
 8001114:	f006 fabc 	bl	8007690 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Humidity         ");
 8001118:	4964      	ldr	r1, [pc, #400]	; (80012ac <main+0x2c4>)
 800111a:	2005      	movs	r0, #5
 800111c:	f006 fc2c 	bl	8007978 <BSP_LCD_DisplayStringAtLine>
	  //
	  BSP_LCD_SetFont(&Font24);
 8001120:	4860      	ldr	r0, [pc, #384]	; (80012a4 <main+0x2bc>)
 8001122:	f006 facf 	bl	80076c4 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001126:	f04f 30ff 	mov.w	r0, #4294967295
 800112a:	f006 fa99 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 800112e:	4859      	ldr	r0, [pc, #356]	; (8001294 <main+0x2ac>)
 8001130:	f006 faae 	bl	8007690 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAtLine(8, (uint8_t*) "State             ");
 8001134:	495e      	ldr	r1, [pc, #376]	; (80012b0 <main+0x2c8>)
 8001136:	2008      	movs	r0, #8
 8001138:	f006 fc1e 	bl	8007978 <BSP_LCD_DisplayStringAtLine>
	  //
	  BSP_LCD_DrawRect(95,233,20,20);
 800113c:	2314      	movs	r3, #20
 800113e:	2214      	movs	r2, #20
 8001140:	21e9      	movs	r1, #233	; 0xe9
 8001142:	205f      	movs	r0, #95	; 0x5f
 8001144:	f006 fcb0 	bl	8007aa8 <BSP_LCD_DrawRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8001148:	485a      	ldr	r0, [pc, #360]	; (80012b4 <main+0x2cc>)
 800114a:	f006 fa89 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(95,233,20,20);
 800114e:	2314      	movs	r3, #20
 8001150:	2214      	movs	r2, #20
 8001152:	21e9      	movs	r1, #233	; 0xe9
 8001154:	205f      	movs	r0, #95	; 0x5f
 8001156:	f006 fcd9 	bl	8007b0c <BSP_LCD_FillRect>
	  BSP_LCD_SetFont(&Font20);
 800115a:	4857      	ldr	r0, [pc, #348]	; (80012b8 <main+0x2d0>)
 800115c:	f006 fab2 	bl	80076c4 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001160:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001164:	f006 fa7c 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 8001168:	4843      	ldr	r0, [pc, #268]	; (8001278 <main+0x290>)
 800116a:	f006 fa91 	bl	8007690 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 235, (uint8_t*)"Sensor", LEFT_MODE);
 800116e:	2303      	movs	r3, #3
 8001170:	4a52      	ldr	r2, [pc, #328]	; (80012bc <main+0x2d4>)
 8001172:	21eb      	movs	r1, #235	; 0xeb
 8001174:	2000      	movs	r0, #0
 8001176:	f006 fb41 	bl	80077fc <BSP_LCD_DisplayStringAt>
	  //
	  BSP_LCD_SetFont(&Font16);
 800117a:	4847      	ldr	r0, [pc, #284]	; (8001298 <main+0x2b0>)
 800117c:	f006 faa2 	bl	80076c4 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001180:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001184:	f006 fa6c 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 8001188:	483b      	ldr	r0, [pc, #236]	; (8001278 <main+0x290>)
 800118a:	f006 fa81 	bl	8007690 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 270, (uint8_t*)"    :Done", LEFT_MODE);
 800118e:	2303      	movs	r3, #3
 8001190:	4a4b      	ldr	r2, [pc, #300]	; (80012c0 <main+0x2d8>)
 8001192:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001196:	2000      	movs	r0, #0
 8001198:	f006 fb30 	bl	80077fc <BSP_LCD_DisplayStringAt>
	  BSP_LCD_DrawRect(27,267,15,15);
 800119c:	230f      	movs	r3, #15
 800119e:	220f      	movs	r2, #15
 80011a0:	f240 110b 	movw	r1, #267	; 0x10b
 80011a4:	201b      	movs	r0, #27
 80011a6:	f006 fc7f 	bl	8007aa8 <BSP_LCD_DrawRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80011aa:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80011ae:	f006 fa57 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(27,267,15,15);
 80011b2:	230f      	movs	r3, #15
 80011b4:	220f      	movs	r2, #15
 80011b6:	f240 110b 	movw	r1, #267	; 0x10b
 80011ba:	201b      	movs	r0, #27
 80011bc:	f006 fca6 	bl	8007b0c <BSP_LCD_FillRect>
	  //
	  BSP_LCD_SetFont(&Font16);
 80011c0:	4835      	ldr	r0, [pc, #212]	; (8001298 <main+0x2b0>)
 80011c2:	f006 fa7f 	bl	80076c4 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011c6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011ca:	f006 fa49 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 80011ce:	482a      	ldr	r0, [pc, #168]	; (8001278 <main+0x290>)
 80011d0:	f006 fa5e 	bl	8007690 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 270, (uint8_t*)":Working ", RIGHT_MODE);
 80011d4:	2302      	movs	r3, #2
 80011d6:	4a3b      	ldr	r2, [pc, #236]	; (80012c4 <main+0x2dc>)
 80011d8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80011dc:	2000      	movs	r0, #0
 80011de:	f006 fb0d 	bl	80077fc <BSP_LCD_DisplayStringAt>
	  BSP_LCD_DrawRect(115,267,15,15);
 80011e2:	230f      	movs	r3, #15
 80011e4:	220f      	movs	r2, #15
 80011e6:	f240 110b 	movw	r1, #267	; 0x10b
 80011ea:	2073      	movs	r0, #115	; 0x73
 80011ec:	f006 fc5c 	bl	8007aa8 <BSP_LCD_DrawRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 80011f0:	4830      	ldr	r0, [pc, #192]	; (80012b4 <main+0x2cc>)
 80011f2:	f006 fa35 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(115,267,15,15);
 80011f6:	230f      	movs	r3, #15
 80011f8:	220f      	movs	r2, #15
 80011fa:	f240 110b 	movw	r1, #267	; 0x10b
 80011fe:	2073      	movs	r0, #115	; 0x73
 8001200:	f006 fc84 	bl	8007b0c <BSP_LCD_FillRect>
	  //
	  BSP_LCD_SetFont(&Font16);
 8001204:	4824      	ldr	r0, [pc, #144]	; (8001298 <main+0x2b0>)
 8001206:	f006 fa5d 	bl	80076c4 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800120a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800120e:	f006 fa27 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 8001212:	4819      	ldr	r0, [pc, #100]	; (8001278 <main+0x290>)
 8001214:	f006 fa3c 	bl	8007690 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 295, (uint8_t*)"   :Failed", CENTER_MODE);
 8001218:	2301      	movs	r3, #1
 800121a:	4a2b      	ldr	r2, [pc, #172]	; (80012c8 <main+0x2e0>)
 800121c:	f240 1127 	movw	r1, #295	; 0x127
 8001220:	2000      	movs	r0, #0
 8001222:	f006 faeb 	bl	80077fc <BSP_LCD_DisplayStringAt>
	  BSP_LCD_DrawRect(75,292,15,15);
 8001226:	230f      	movs	r3, #15
 8001228:	220f      	movs	r2, #15
 800122a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800122e:	204b      	movs	r0, #75	; 0x4b
 8001230:	f006 fc3a 	bl	8007aa8 <BSP_LCD_DrawRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001234:	4825      	ldr	r0, [pc, #148]	; (80012cc <main+0x2e4>)
 8001236:	f006 fa13 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(75,292,15,15);
 800123a:	230f      	movs	r3, #15
 800123c:	220f      	movs	r2, #15
 800123e:	f44f 7192 	mov.w	r1, #292	; 0x124
 8001242:	204b      	movs	r0, #75	; 0x4b
 8001244:	f006 fc62 	bl	8007b0c <BSP_LCD_FillRect>
	  //
	  HAL_Delay(1500);
 8001248:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800124c:	f001 f86c 	bl	8002328 <HAL_Delay>
	  DHT22_Start();
 8001250:	f000 fc90 	bl	8001b74 <DHT22_Start>
	  Presence = DHT22_Check_Response();
 8001254:	f000 fcae 	bl	8001bb4 <DHT22_Check_Response>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <main+0x2e8>)
 800125e:	701a      	strb	r2, [r3, #0]
	  if (Presence == 0)
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <main+0x2e8>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d137      	bne.n	80012d8 <main+0x2f0>
	  {
		  HAL_Delay(3000);
 8001268:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800126c:	f001 f85c 	bl	8002328 <HAL_Delay>
		  timeout_DHT=0;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <main+0x2ec>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
		  continue;
 8001276:	e0f5      	b.n	8001464 <main+0x47c>
 8001278:	ff808080 	.word	0xff808080
 800127c:	20000540 	.word	0x20000540
 8001280:	200002dc 	.word	0x200002dc
 8001284:	200004c4 	.word	0x200004c4
 8001288:	200002f0 	.word	0x200002f0
 800128c:	08008ca8 	.word	0x08008ca8
 8001290:	2000029c 	.word	0x2000029c
 8001294:	ff404040 	.word	0xff404040
 8001298:	20000048 	.word	0x20000048
 800129c:	08008cb4 	.word	0x08008cb4
 80012a0:	200002bc 	.word	0x200002bc
 80012a4:	20000058 	.word	0x20000058
 80012a8:	08008cc4 	.word	0x08008cc4
 80012ac:	08008cd8 	.word	0x08008cd8
 80012b0:	08008cec 	.word	0x08008cec
 80012b4:	ffffa500 	.word	0xffffa500
 80012b8:	20000050 	.word	0x20000050
 80012bc:	08008d00 	.word	0x08008d00
 80012c0:	08008d08 	.word	0x08008d08
 80012c4:	08008d14 	.word	0x08008d14
 80012c8:	08008d20 	.word	0x08008d20
 80012cc:	ffff0000 	.word	0xffff0000
 80012d0:	200004a6 	.word	0x200004a6
 80012d4:	200004a8 	.word	0x200004a8
	  }
	  Rh_byte1 = DHT22_Read ();
 80012d8:	f000 fca4 	bl	8001c24 <DHT22_Read>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	4b61      	ldr	r3, [pc, #388]	; (8001468 <main+0x480>)
 80012e2:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT22_Read ();
 80012e4:	f000 fc9e 	bl	8001c24 <DHT22_Read>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b5f      	ldr	r3, [pc, #380]	; (800146c <main+0x484>)
 80012ee:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT22_Read ();
 80012f0:	f000 fc98 	bl	8001c24 <DHT22_Read>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b5d      	ldr	r3, [pc, #372]	; (8001470 <main+0x488>)
 80012fa:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT22_Read ();
 80012fc:	f000 fc92 	bl	8001c24 <DHT22_Read>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	4b5b      	ldr	r3, [pc, #364]	; (8001474 <main+0x48c>)
 8001306:	701a      	strb	r2, [r3, #0]
	  SUM = DHT22_Read();
 8001308:	f000 fc8c 	bl	8001c24 <DHT22_Read>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b59      	ldr	r3, [pc, #356]	; (8001478 <main+0x490>)
 8001312:	801a      	strh	r2, [r3, #0]
	  if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001314:	4b58      	ldr	r3, [pc, #352]	; (8001478 <main+0x490>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	4b53      	ldr	r3, [pc, #332]	; (8001468 <main+0x480>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	4b52      	ldr	r3, [pc, #328]	; (800146c <main+0x484>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4413      	add	r3, r2
 8001326:	4a52      	ldr	r2, [pc, #328]	; (8001470 <main+0x488>)
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a51      	ldr	r2, [pc, #324]	; (8001474 <main+0x48c>)
 800132e:	7812      	ldrb	r2, [r2, #0]
 8001330:	4413      	add	r3, r2
 8001332:	4299      	cmp	r1, r3
 8001334:	d12d      	bne.n	8001392 <main+0x3aa>
	  {
	  Temperature = (Temp_byte1<<8|Temp_byte2)/10;
 8001336:	4b4e      	ldr	r3, [pc, #312]	; (8001470 <main+0x488>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	4a4d      	ldr	r2, [pc, #308]	; (8001474 <main+0x48c>)
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	4313      	orrs	r3, r2
 8001342:	4a4e      	ldr	r2, [pc, #312]	; (800147c <main+0x494>)
 8001344:	fb82 1203 	smull	r1, r2, r2, r3
 8001348:	1092      	asrs	r2, r2, #2
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	b21a      	sxth	r2, r3
 8001350:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <main+0x498>)
 8001352:	801a      	strh	r2, [r3, #0]
	  Humidity = (Rh_byte1<<8|Rh_byte2)/10;
 8001354:	4b44      	ldr	r3, [pc, #272]	; (8001468 <main+0x480>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	4a44      	ldr	r2, [pc, #272]	; (800146c <main+0x484>)
 800135c:	7812      	ldrb	r2, [r2, #0]
 800135e:	4313      	orrs	r3, r2
 8001360:	4a46      	ldr	r2, [pc, #280]	; (800147c <main+0x494>)
 8001362:	fb82 1203 	smull	r1, r2, r2, r3
 8001366:	1092      	asrs	r2, r2, #2
 8001368:	17db      	asrs	r3, r3, #31
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	b21a      	sxth	r2, r3
 800136e:	4b45      	ldr	r3, [pc, #276]	; (8001484 <main+0x49c>)
 8001370:	801a      	strh	r2, [r3, #0]
	  //
	  BSP_LCD_DrawRect(95,233,20,20);
 8001372:	2314      	movs	r3, #20
 8001374:	2214      	movs	r2, #20
 8001376:	21e9      	movs	r1, #233	; 0xe9
 8001378:	205f      	movs	r0, #95	; 0x5f
 800137a:	f006 fb95 	bl	8007aa8 <BSP_LCD_DrawRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800137e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001382:	f006 f96d 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(95,233,20,20);
 8001386:	2314      	movs	r3, #20
 8001388:	2214      	movs	r2, #20
 800138a:	21e9      	movs	r1, #233	; 0xe9
 800138c:	205f      	movs	r0, #95	; 0x5f
 800138e:	f006 fbbd 	bl	8007b0c <BSP_LCD_FillRect>
	  }
	  //Temperature++;
	  //Humidity++;
	  //
	  sprintf((char*)TemperatureString, "%d.c", Temperature);
 8001392:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <main+0x498>)
 8001394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001398:	461a      	mov	r2, r3
 800139a:	493b      	ldr	r1, [pc, #236]	; (8001488 <main+0x4a0>)
 800139c:	483b      	ldr	r0, [pc, #236]	; (800148c <main+0x4a4>)
 800139e:	f007 f809 	bl	80083b4 <siprintf>
	  BSP_LCD_SetFont(&Font24);
 80013a2:	483b      	ldr	r0, [pc, #236]	; (8001490 <main+0x4a8>)
 80013a4:	f006 f98e 	bl	80076c4 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013a8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013ac:	f006 f958 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 80013b0:	4838      	ldr	r0, [pc, #224]	; (8001494 <main+0x4ac>)
 80013b2:	f006 f96d 	bl	8007690 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 90, TemperatureString, CENTER_MODE);
 80013b6:	2301      	movs	r3, #1
 80013b8:	4a34      	ldr	r2, [pc, #208]	; (800148c <main+0x4a4>)
 80013ba:	215a      	movs	r1, #90	; 0x5a
 80013bc:	2000      	movs	r0, #0
 80013be:	f006 fa1d 	bl	80077fc <BSP_LCD_DisplayStringAt>
	  //
	  sprintf((char*)humidityString, "%d%%", Humidity);
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <main+0x49c>)
 80013c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4933      	ldr	r1, [pc, #204]	; (8001498 <main+0x4b0>)
 80013cc:	4833      	ldr	r0, [pc, #204]	; (800149c <main+0x4b4>)
 80013ce:	f006 fff1 	bl	80083b4 <siprintf>
	  BSP_LCD_SetFont(&Font24);
 80013d2:	482f      	ldr	r0, [pc, #188]	; (8001490 <main+0x4a8>)
 80013d4:	f006 f976 	bl	80076c4 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013d8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013dc:	f006 f940 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 80013e0:	482c      	ldr	r0, [pc, #176]	; (8001494 <main+0x4ac>)
 80013e2:	f006 f955 	bl	8007690 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0,162,humidityString, CENTER_MODE);
 80013e6:	2301      	movs	r3, #1
 80013e8:	4a2c      	ldr	r2, [pc, #176]	; (800149c <main+0x4b4>)
 80013ea:	21a2      	movs	r1, #162	; 0xa2
 80013ec:	2000      	movs	r0, #0
 80013ee:	f006 fa05 	bl	80077fc <BSP_LCD_DisplayStringAt>
	  HAL_Delay(1000);
 80013f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f6:	f000 ff97 	bl	8002328 <HAL_Delay>
	  //
	  BSP_LCD_SetFont(&Font20);
 80013fa:	4829      	ldr	r0, [pc, #164]	; (80014a0 <main+0x4b8>)
 80013fc:	f006 f962 	bl	80076c4 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001400:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001404:	f006 f92c 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 8001408:	4822      	ldr	r0, [pc, #136]	; (8001494 <main+0x4ac>)
 800140a:	f006 f941 	bl	8007690 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 235, (uint8_t*)"Upload  ", RIGHT_MODE);
 800140e:	2302      	movs	r3, #2
 8001410:	4a24      	ldr	r2, [pc, #144]	; (80014a4 <main+0x4bc>)
 8001412:	21eb      	movs	r1, #235	; 0xeb
 8001414:	2000      	movs	r0, #0
 8001416:	f006 f9f1 	bl	80077fc <BSP_LCD_DisplayStringAt>
	  BSP_LCD_DrawRect(215,233,20,20);
 800141a:	2314      	movs	r3, #20
 800141c:	2214      	movs	r2, #20
 800141e:	21e9      	movs	r1, #233	; 0xe9
 8001420:	20d7      	movs	r0, #215	; 0xd7
 8001422:	f006 fb41 	bl	8007aa8 <BSP_LCD_DrawRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8001426:	4820      	ldr	r0, [pc, #128]	; (80014a8 <main+0x4c0>)
 8001428:	f006 f91a 	bl	8007660 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(215,233,20,20);
 800142c:	2314      	movs	r3, #20
 800142e:	2214      	movs	r2, #20
 8001430:	21e9      	movs	r1, #233	; 0xe9
 8001432:	20d7      	movs	r0, #215	; 0xd7
 8001434:	f006 fb6a 	bl	8007b0c <BSP_LCD_FillRect>
	  //
	  ESP8266_Init();
 8001438:	f000 f8b0 	bl	800159c <ESP8266_Init>
	  ESP8266_SendData(Temperature, Humidity);
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <main+0x498>)
 800143e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <main+0x49c>)
 8001444:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f8e0 	bl	8001610 <ESP8266_SendData>
	  Presence = 0;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <main+0x4c4>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1500);
 8001456:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800145a:	f000 ff65 	bl	8002328 <HAL_Delay>
	  init_receive_ok=0;
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <main+0x4c8>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001464:	e5f0      	b.n	8001048 <main+0x60>
 8001466:	bf00      	nop
 8001468:	2000049c 	.word	0x2000049c
 800146c:	2000049d 	.word	0x2000049d
 8001470:	2000049e 	.word	0x2000049e
 8001474:	2000049f 	.word	0x2000049f
 8001478:	200004a0 	.word	0x200004a0
 800147c:	66666667 	.word	0x66666667
 8001480:	200004a2 	.word	0x200004a2
 8001484:	200004a4 	.word	0x200004a4
 8001488:	08008d2c 	.word	0x08008d2c
 800148c:	200004b8 	.word	0x200004b8
 8001490:	20000058 	.word	0x20000058
 8001494:	ff808080 	.word	0xff808080
 8001498:	08008d34 	.word	0x08008d34
 800149c:	200004ac 	.word	0x200004ac
 80014a0:	20000050 	.word	0x20000050
 80014a4:	08008d3c 	.word	0x08008d3c
 80014a8:	ffffa500 	.word	0xffffa500
 80014ac:	200004a6 	.word	0x200004a6
 80014b0:	20000484 	.word	0x20000484

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b094      	sub	sp, #80	; 0x50
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	2230      	movs	r2, #48	; 0x30
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f006 ff6e 	bl	80083a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <SystemClock_Config+0xe0>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	4a2c      	ldr	r2, [pc, #176]	; (8001594 <SystemClock_Config+0xe0>)
 80014e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e6:	6413      	str	r3, [r2, #64]	; 0x40
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <SystemClock_Config+0xe0>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <SystemClock_Config+0xe4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a26      	ldr	r2, [pc, #152]	; (8001598 <SystemClock_Config+0xe4>)
 80014fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <SystemClock_Config+0xe4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001510:	2309      	movs	r3, #9
 8001512:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800151a:	2301      	movs	r3, #1
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151e:	2302      	movs	r3, #2
 8001520:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001522:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001526:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001528:	2304      	movs	r3, #4
 800152a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800152c:	23b4      	movs	r3, #180	; 0xb4
 800152e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001530:	2302      	movs	r3, #2
 8001532:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001534:	2304      	movs	r3, #4
 8001536:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001538:	f107 0320 	add.w	r3, r7, #32
 800153c:	4618      	mov	r0, r3
 800153e:	f002 fcff 	bl	8003f40 <HAL_RCC_OscConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001548:	f000 fbbc 	bl	8001cc4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800154c:	f002 fca8 	bl	8003ea0 <HAL_PWREx_EnableOverDrive>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001556:	f000 fbb5 	bl	8001cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155a:	230f      	movs	r3, #15
 800155c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155e:	2302      	movs	r3, #2
 8001560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001566:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800156a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800156c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001570:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	2105      	movs	r1, #5
 8001578:	4618      	mov	r0, r3
 800157a:	f002 ff59 	bl	8004430 <HAL_RCC_ClockConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001584:	f000 fb9e 	bl	8001cc4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001588:	f003 f838 	bl	80045fc <HAL_RCC_EnableCSS>
}
 800158c:	bf00      	nop
 800158e:	3750      	adds	r7, #80	; 0x50
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000

0800159c <ESP8266_Init>:

/* USER CODE BEGIN 4 */

/* ESP8266 part(start) */
void ESP8266_Init(){
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
    memset(rx_buffer_init, 0, sizeof(rx_buffer_init));
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	2100      	movs	r1, #0
 80015a4:	4815      	ldr	r0, [pc, #84]	; (80015fc <ESP8266_Init+0x60>)
 80015a6:	f006 fefd 	bl	80083a4 <memset>
    init_receive_ok=0;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <ESP8266_Init+0x64>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

    while(init_receive_ok!=1){
 80015b0:	e01d      	b.n	80015ee <ESP8266_Init+0x52>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);    //讓RST Pin = Low
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b8:	4812      	ldr	r0, [pc, #72]	; (8001604 <ESP8266_Init+0x68>)
 80015ba:	f001 ff05 	bl	80033c8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80015be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015c2:	f000 feb1 	bl	8002328 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);    //讓RST Pin = High
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <ESP8266_Init+0x68>)
 80015ce:	f001 fefb 	bl	80033c8 <HAL_GPIO_WritePin>
	HAL_UART_Receive(&huart1, rx_buffer_init, sizeof(rx_buffer_init)-1, 1000);    //Reset 後接?��ESP01??�傳??��?�息
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	227f      	movs	r2, #127	; 0x7f
 80015d8:	4908      	ldr	r1, [pc, #32]	; (80015fc <ESP8266_Init+0x60>)
 80015da:	480b      	ldr	r0, [pc, #44]	; (8001608 <ESP8266_Init+0x6c>)
 80015dc:	f004 ff51 	bl	8006482 <HAL_UART_Receive>
	init_receive_ok=checkBufferCharacters(rx_buffer_init, "SystemReady");//?�� Reset 後接?��??��?�息?��"SystemReady"，init_receive_ok=1，跳?��迴�??
 80015e0:	490a      	ldr	r1, [pc, #40]	; (800160c <ESP8266_Init+0x70>)
 80015e2:	4806      	ldr	r0, [pc, #24]	; (80015fc <ESP8266_Init+0x60>)
 80015e4:	f000 fa3a 	bl	8001a5c <checkBufferCharacters>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <ESP8266_Init+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]
    while(init_receive_ok!=1){
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <ESP8266_Init+0x64>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d1dd      	bne.n	80015b2 <ESP8266_Init+0x16>
	}
}
 80015f6:	bf00      	nop
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000304 	.word	0x20000304
 8001600:	20000484 	.word	0x20000484
 8001604:	40020800 	.word	0x40020800
 8001608:	20000588 	.word	0x20000588
 800160c:	08008d48 	.word	0x08008d48

08001610 <ESP8266_SendData>:

void ESP8266_SendData(int16_t sensor1_data,int16_t sensor2_data) {
 8001610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001614:	b098      	sub	sp, #96	; 0x60
 8001616:	af02      	add	r7, sp, #8
 8001618:	4603      	mov	r3, r0
 800161a:	460a      	mov	r2, r1
 800161c:	80fb      	strh	r3, [r7, #6]
 800161e:	4613      	mov	r3, r2
 8001620:	80bb      	strh	r3, [r7, #4]
    //??��?��?��?�傳ok??��?�數
    inst1_receive_ok=0;
 8001622:	4bbb      	ldr	r3, [pc, #748]	; (8001910 <ESP8266_SendData+0x300>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
    inst2_receive_ok=0;
 8001628:	4bba      	ldr	r3, [pc, #744]	; (8001914 <ESP8266_SendData+0x304>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
    inst3_receive_ok=0;
 800162e:	4bba      	ldr	r3, [pc, #744]	; (8001918 <ESP8266_SendData+0x308>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
    inst4_receive_ok=0;
 8001634:	4bb9      	ldr	r3, [pc, #740]	; (800191c <ESP8266_SendData+0x30c>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
    HAL_Delay(5000);
 800163a:	f241 3088 	movw	r0, #5000	; 0x1388
 800163e:	f000 fe73 	bl	8002328 <HAL_Delay>

    /*?���?????? 1st AT ??�令*/
    timeout=0;    //??�傳計數�??????0
 8001642:	4bb7      	ldr	r3, [pc, #732]	; (8001920 <ESP8266_SendData+0x310>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
    while(inst1_receive_ok==0 && timeout<=5){    //?��??5次�?�直?��ESP01??��?�正�??????
 8001648:	e029      	b.n	800169e <ESP8266_SendData+0x8e>
	HAL_UART_Transmit(&huart1, at_inst1, sizeof(at_inst1) - 1, 1000);
 800164a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164e:	2228      	movs	r2, #40	; 0x28
 8001650:	49b4      	ldr	r1, [pc, #720]	; (8001924 <ESP8266_SendData+0x314>)
 8001652:	48b5      	ldr	r0, [pc, #724]	; (8001928 <ESP8266_SendData+0x318>)
 8001654:	f004 fe83 	bl	800635e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rx_buffer1, sizeof(rx_buffer1)-1, 1000);
 8001658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165c:	223f      	movs	r2, #63	; 0x3f
 800165e:	49b3      	ldr	r1, [pc, #716]	; (800192c <ESP8266_SendData+0x31c>)
 8001660:	48b1      	ldr	r0, [pc, #708]	; (8001928 <ESP8266_SendData+0x318>)
 8001662:	f004 ff0e 	bl	8006482 <HAL_UART_Receive>
	inst1_receive_ok = checkBufferCharacters(rx_buffer1, "Linked")||checkBufferCharacters(rx_buffer1, "CONNECT");
 8001666:	49b2      	ldr	r1, [pc, #712]	; (8001930 <ESP8266_SendData+0x320>)
 8001668:	48b0      	ldr	r0, [pc, #704]	; (800192c <ESP8266_SendData+0x31c>)
 800166a:	f000 f9f7 	bl	8001a5c <checkBufferCharacters>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d106      	bne.n	8001682 <ESP8266_SendData+0x72>
 8001674:	49af      	ldr	r1, [pc, #700]	; (8001934 <ESP8266_SendData+0x324>)
 8001676:	48ad      	ldr	r0, [pc, #692]	; (800192c <ESP8266_SendData+0x31c>)
 8001678:	f000 f9f0 	bl	8001a5c <checkBufferCharacters>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <ESP8266_SendData+0x76>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <ESP8266_SendData+0x78>
 8001686:	2300      	movs	r3, #0
 8001688:	4aa1      	ldr	r2, [pc, #644]	; (8001910 <ESP8266_SendData+0x300>)
 800168a:	6013      	str	r3, [r2, #0]
	HAL_Delay(3000);
 800168c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001690:	f000 fe4a 	bl	8002328 <HAL_Delay>
	timeout++;
 8001694:	4ba2      	ldr	r3, [pc, #648]	; (8001920 <ESP8266_SendData+0x310>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4aa1      	ldr	r2, [pc, #644]	; (8001920 <ESP8266_SendData+0x310>)
 800169c:	6013      	str	r3, [r2, #0]
    while(inst1_receive_ok==0 && timeout<=5){    //?��??5次�?�直?��ESP01??��?�正�??????
 800169e:	4b9c      	ldr	r3, [pc, #624]	; (8001910 <ESP8266_SendData+0x300>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d103      	bne.n	80016ae <ESP8266_SendData+0x9e>
 80016a6:	4b9e      	ldr	r3, [pc, #632]	; (8001920 <ESP8266_SendData+0x310>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b05      	cmp	r3, #5
 80016ac:	ddcd      	ble.n	800164a <ESP8266_SendData+0x3a>
    }
    if(inst1_receive_ok!=1){    //如�?�傳??5次都失�?��?�直?��跳出ESP8266_SendData?���??????
 80016ae:	4b98      	ldr	r3, [pc, #608]	; (8001910 <ESP8266_SendData+0x300>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d00f      	beq.n	80016d6 <ESP8266_SendData+0xc6>
    	BSP_LCD_DrawRect(215,233,20,20);
 80016b6:	2314      	movs	r3, #20
 80016b8:	2214      	movs	r2, #20
 80016ba:	21e9      	movs	r1, #233	; 0xe9
 80016bc:	20d7      	movs	r0, #215	; 0xd7
 80016be:	f006 f9f3 	bl	8007aa8 <BSP_LCD_DrawRect>
    	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80016c2:	489d      	ldr	r0, [pc, #628]	; (8001938 <ESP8266_SendData+0x328>)
 80016c4:	f005 ffcc 	bl	8007660 <BSP_LCD_SetTextColor>
    	BSP_LCD_FillRect(215,233,20,20);
 80016c8:	2314      	movs	r3, #20
 80016ca:	2214      	movs	r2, #20
 80016cc:	21e9      	movs	r1, #233	; 0xe9
 80016ce:	20d7      	movs	r0, #215	; 0xd7
 80016d0:	f006 fa1c 	bl	8007b0c <BSP_LCD_FillRect>
    	return;
 80016d4:	e1a8      	b.n	8001a28 <ESP8266_SendData+0x418>
    }
    /*?���?????? 1st AT ??�令*/

    /*組�?? 3rd AT ??�令*/
    uint8_t sensor1_name[]="&field1=";
 80016d6:	4a99      	ldr	r2, [pc, #612]	; (800193c <ESP8266_SendData+0x32c>)
 80016d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80016de:	c303      	stmia	r3!, {r0, r1}
 80016e0:	701a      	strb	r2, [r3, #0]
    uint8_t sensor2_name[]="&field2=";
 80016e2:	4a97      	ldr	r2, [pc, #604]	; (8001940 <ESP8266_SendData+0x330>)
 80016e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ea:	c303      	stmia	r3!, {r0, r1}
 80016ec:	701a      	strb	r2, [r3, #0]
    uint8_t at_inst3_temp1[]="GET /update?api_key=V8CUO3DJT76JJ3XW";
 80016ee:	4b95      	ldr	r3, [pc, #596]	; (8001944 <ESP8266_SendData+0x334>)
 80016f0:	f107 040c 	add.w	r4, r7, #12
 80016f4:	461d      	mov	r5, r3
 80016f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001702:	6020      	str	r0, [r4, #0]
 8001704:	3404      	adds	r4, #4
 8001706:	7021      	strb	r1, [r4, #0]
    int16_t at_inst3_length=0;
 8001708:	2300      	movs	r3, #0
 800170a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    int16_t inst3_length=0;
 800170e:	2300      	movs	r3, #0
 8001710:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    at_inst3_length=0;
 8001714:	2300      	movs	r3, #0
 8001716:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    inst3_length=0;
 800171a:	2300      	movs	r3, #0
 800171c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    at_inst3_length = strlen((const char*)at_inst3_temp1) + strlen((const char*)sensor1_name) + strlen((const char*)&sensor1_data)+ strlen((const char*)sensor2_name) + strlen((const char*)&sensor2_data)+4;    //計�?�inst3??��?�串總長度�??+4?��\r\n
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fd63 	bl	80001f0 <strlen>
 800172a:	4603      	mov	r3, r0
 800172c:	b29c      	uxth	r4, r3
 800172e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fd5c 	bl	80001f0 <strlen>
 8001738:	4603      	mov	r3, r0
 800173a:	b29b      	uxth	r3, r3
 800173c:	4423      	add	r3, r4
 800173e:	b29c      	uxth	r4, r3
 8001740:	1dbb      	adds	r3, r7, #6
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fd54 	bl	80001f0 <strlen>
 8001748:	4603      	mov	r3, r0
 800174a:	b29b      	uxth	r3, r3
 800174c:	4423      	add	r3, r4
 800174e:	b29c      	uxth	r4, r3
 8001750:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fd4b 	bl	80001f0 <strlen>
 800175a:	4603      	mov	r3, r0
 800175c:	b29b      	uxth	r3, r3
 800175e:	4423      	add	r3, r4
 8001760:	b29c      	uxth	r4, r3
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fd43 	bl	80001f0 <strlen>
 800176a:	4603      	mov	r3, r0
 800176c:	b29b      	uxth	r3, r3
 800176e:	4423      	add	r3, r4
 8001770:	b29b      	uxth	r3, r3
 8001772:	3304      	adds	r3, #4
 8001774:	b29b      	uxth	r3, r3
 8001776:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    uint8_t at_inst3[at_inst3_length];    //�????????��??��?�inst3字串?��度�?�好??��?��?�陣???
 800177a:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	; 0x56
 800177e:	466b      	mov	r3, sp
 8001780:	461c      	mov	r4, r3
 8001782:	460b      	mov	r3, r1
 8001784:	3b01      	subs	r3, #1
 8001786:	653b      	str	r3, [r7, #80]	; 0x50
 8001788:	460a      	mov	r2, r1
 800178a:	2300      	movs	r3, #0
 800178c:	4692      	mov	sl, r2
 800178e:	469b      	mov	fp, r3
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800179c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017a4:	460a      	mov	r2, r1
 80017a6:	2300      	movs	r3, #0
 80017a8:	4690      	mov	r8, r2
 80017aa:	4699      	mov	r9, r3
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017c0:	460b      	mov	r3, r1
 80017c2:	3307      	adds	r3, #7
 80017c4:	08db      	lsrs	r3, r3, #3
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	ebad 0d03 	sub.w	sp, sp, r3
 80017cc:	ab02      	add	r3, sp, #8
 80017ce:	3300      	adds	r3, #0
 80017d0:	64fb      	str	r3, [r7, #76]	; 0x4c

    sprintf((char*)at_inst3,"GET /update?api_key=V8CUO3DJT76JJ3XW%s%d%s%d\r\n",(char*)sensor1_name,sensor1_data,(char*)sensor2_name,sensor2_data);    //組�?�inst3
 80017d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d6:	4619      	mov	r1, r3
 80017d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	460b      	mov	r3, r1
 80017ea:	4957      	ldr	r1, [pc, #348]	; (8001948 <ESP8266_SendData+0x338>)
 80017ec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80017ee:	f006 fde1 	bl	80083b4 <siprintf>
    /*組�?? 3rd AT ??�令*/

    /*組�?? 2rd AT ??�令*/
    inst3_length = strlen((char*)at_inst3);    //計�?��?��?��?�inst3??�總?���??????
 80017f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80017f4:	f7fe fcfc 	bl	80001f0 <strlen>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    sprintf(at_inst2, "AT+CIPSEND=%d\r\n",inst3_length);  //組�?�inst2
 80017fe:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8001802:	461a      	mov	r2, r3
 8001804:	4951      	ldr	r1, [pc, #324]	; (800194c <ESP8266_SendData+0x33c>)
 8001806:	4852      	ldr	r0, [pc, #328]	; (8001950 <ESP8266_SendData+0x340>)
 8001808:	f006 fdd4 	bl	80083b4 <siprintf>
    /*組�?? 2rd AT ??�令*/

    /*?��?? 2rd AT ??�令*/
    timeout=0;
 800180c:	4b44      	ldr	r3, [pc, #272]	; (8001920 <ESP8266_SendData+0x310>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
    while(inst2_receive_ok==0 && timeout<=5){
 8001812:	e01d      	b.n	8001850 <ESP8266_SendData+0x240>
    HAL_UART_Transmit(&huart1, (uint8_t*)at_inst2, sizeof(at_inst2) - 1, 1000);
 8001814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001818:	220f      	movs	r2, #15
 800181a:	494d      	ldr	r1, [pc, #308]	; (8001950 <ESP8266_SendData+0x340>)
 800181c:	4842      	ldr	r0, [pc, #264]	; (8001928 <ESP8266_SendData+0x318>)
 800181e:	f004 fd9e 	bl	800635e <HAL_UART_Transmit>
    HAL_UART_Receive(&huart1, rx_buffer2, sizeof(rx_buffer2)-1, 1000);
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	223f      	movs	r2, #63	; 0x3f
 8001828:	494a      	ldr	r1, [pc, #296]	; (8001954 <ESP8266_SendData+0x344>)
 800182a:	483f      	ldr	r0, [pc, #252]	; (8001928 <ESP8266_SendData+0x318>)
 800182c:	f004 fe29 	bl	8006482 <HAL_UART_Receive>
    inst2_receive_ok = checkBufferCharacters(rx_buffer2, ">");
 8001830:	4949      	ldr	r1, [pc, #292]	; (8001958 <ESP8266_SendData+0x348>)
 8001832:	4848      	ldr	r0, [pc, #288]	; (8001954 <ESP8266_SendData+0x344>)
 8001834:	f000 f912 	bl	8001a5c <checkBufferCharacters>
 8001838:	4603      	mov	r3, r0
 800183a:	4a36      	ldr	r2, [pc, #216]	; (8001914 <ESP8266_SendData+0x304>)
 800183c:	6013      	str	r3, [r2, #0]
    HAL_Delay(3000);
 800183e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001842:	f000 fd71 	bl	8002328 <HAL_Delay>
    timeout++;
 8001846:	4b36      	ldr	r3, [pc, #216]	; (8001920 <ESP8266_SendData+0x310>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	4a34      	ldr	r2, [pc, #208]	; (8001920 <ESP8266_SendData+0x310>)
 800184e:	6013      	str	r3, [r2, #0]
    while(inst2_receive_ok==0 && timeout<=5){
 8001850:	4b30      	ldr	r3, [pc, #192]	; (8001914 <ESP8266_SendData+0x304>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d103      	bne.n	8001860 <ESP8266_SendData+0x250>
 8001858:	4b31      	ldr	r3, [pc, #196]	; (8001920 <ESP8266_SendData+0x310>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b05      	cmp	r3, #5
 800185e:	ddd9      	ble.n	8001814 <ESP8266_SendData+0x204>
    }
    if(inst2_receive_ok!=1){
 8001860:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <ESP8266_SendData+0x304>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d00f      	beq.n	8001888 <ESP8266_SendData+0x278>
    	BSP_LCD_DrawRect(215,233,20,20);
 8001868:	2314      	movs	r3, #20
 800186a:	2214      	movs	r2, #20
 800186c:	21e9      	movs	r1, #233	; 0xe9
 800186e:	20d7      	movs	r0, #215	; 0xd7
 8001870:	f006 f91a 	bl	8007aa8 <BSP_LCD_DrawRect>
    	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001874:	4830      	ldr	r0, [pc, #192]	; (8001938 <ESP8266_SendData+0x328>)
 8001876:	f005 fef3 	bl	8007660 <BSP_LCD_SetTextColor>
    	BSP_LCD_FillRect(215,233,20,20);
 800187a:	2314      	movs	r3, #20
 800187c:	2214      	movs	r2, #20
 800187e:	21e9      	movs	r1, #233	; 0xe9
 8001880:	20d7      	movs	r0, #215	; 0xd7
 8001882:	f006 f943 	bl	8007b0c <BSP_LCD_FillRect>
    	return;
 8001886:	e0ce      	b.n	8001a26 <ESP8266_SendData+0x416>
    }
    HAL_Delay(1000);
 8001888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800188c:	f000 fd4c 	bl	8002328 <HAL_Delay>
    /*?��?? 2rd AT ??�令*/

    /*?��?? 3th AT ??�令*/
    timeout=0;
 8001890:	4b23      	ldr	r3, [pc, #140]	; (8001920 <ESP8266_SendData+0x310>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
    while(inst3_receive_ok==0 && timeout<=5)
 8001896:	e01e      	b.n	80018d6 <ESP8266_SendData+0x2c6>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)at_inst3, inst3_length, 1000);
 8001898:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800189c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80018a2:	4821      	ldr	r0, [pc, #132]	; (8001928 <ESP8266_SendData+0x318>)
 80018a4:	f004 fd5b 	bl	800635e <HAL_UART_Transmit>
        HAL_UART_Receive(&huart1, rx_buffer3, sizeof(rx_buffer3)-1, 1000);
 80018a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ac:	223f      	movs	r2, #63	; 0x3f
 80018ae:	492b      	ldr	r1, [pc, #172]	; (800195c <ESP8266_SendData+0x34c>)
 80018b0:	481d      	ldr	r0, [pc, #116]	; (8001928 <ESP8266_SendData+0x318>)
 80018b2:	f004 fde6 	bl	8006482 <HAL_UART_Receive>
        inst3_receive_ok = checkBufferCharacters(rx_buffer3, "SENDOKIPD");
 80018b6:	492a      	ldr	r1, [pc, #168]	; (8001960 <ESP8266_SendData+0x350>)
 80018b8:	4828      	ldr	r0, [pc, #160]	; (800195c <ESP8266_SendData+0x34c>)
 80018ba:	f000 f8cf 	bl	8001a5c <checkBufferCharacters>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a15      	ldr	r2, [pc, #84]	; (8001918 <ESP8266_SendData+0x308>)
 80018c2:	6013      	str	r3, [r2, #0]
        HAL_Delay(3000);
 80018c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80018c8:	f000 fd2e 	bl	8002328 <HAL_Delay>
        timeout++;
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <ESP8266_SendData+0x310>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3301      	adds	r3, #1
 80018d2:	4a13      	ldr	r2, [pc, #76]	; (8001920 <ESP8266_SendData+0x310>)
 80018d4:	6013      	str	r3, [r2, #0]
    while(inst3_receive_ok==0 && timeout<=5)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <ESP8266_SendData+0x308>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d103      	bne.n	80018e6 <ESP8266_SendData+0x2d6>
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <ESP8266_SendData+0x310>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	ddd8      	ble.n	8001898 <ESP8266_SendData+0x288>
    }
    if(inst3_receive_ok==1)
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <ESP8266_SendData+0x308>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d13a      	bne.n	8001964 <ESP8266_SendData+0x354>
    {
    	BSP_LCD_DrawRect(215,233,20,20);
 80018ee:	2314      	movs	r3, #20
 80018f0:	2214      	movs	r2, #20
 80018f2:	21e9      	movs	r1, #233	; 0xe9
 80018f4:	20d7      	movs	r0, #215	; 0xd7
 80018f6:	f006 f8d7 	bl	8007aa8 <BSP_LCD_DrawRect>
    	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80018fa:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80018fe:	f005 feaf 	bl	8007660 <BSP_LCD_SetTextColor>
    	BSP_LCD_FillRect(215,233,20,20);
 8001902:	2314      	movs	r3, #20
 8001904:	2214      	movs	r2, #20
 8001906:	21e9      	movs	r1, #233	; 0xe9
 8001908:	20d7      	movs	r0, #215	; 0xd7
 800190a:	f006 f8ff 	bl	8007b0c <BSP_LCD_FillRect>
 800190e:	e03d      	b.n	800198c <ESP8266_SendData+0x37c>
 8001910:	20000488 	.word	0x20000488
 8001914:	2000048c 	.word	0x2000048c
 8001918:	20000490 	.word	0x20000490
 800191c:	20000494 	.word	0x20000494
 8001920:	20000498 	.word	0x20000498
 8001924:	20000000 	.word	0x20000000
 8001928:	20000588 	.word	0x20000588
 800192c:	20000384 	.word	0x20000384
 8001930:	08008d54 	.word	0x08008d54
 8001934:	08008d5c 	.word	0x08008d5c
 8001938:	ffff0000 	.word	0xffff0000
 800193c:	08008db8 	.word	0x08008db8
 8001940:	08008dc4 	.word	0x08008dc4
 8001944:	08008dd0 	.word	0x08008dd0
 8001948:	08008d64 	.word	0x08008d64
 800194c:	08008d94 	.word	0x08008d94
 8001950:	200002f4 	.word	0x200002f4
 8001954:	200003c4 	.word	0x200003c4
 8001958:	08008da4 	.word	0x08008da4
 800195c:	20000404 	.word	0x20000404
 8001960:	08008da8 	.word	0x08008da8
    }
    else if(inst3_receive_ok!=1)
 8001964:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <ESP8266_SendData+0x420>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d00f      	beq.n	800198c <ESP8266_SendData+0x37c>
    {
    	BSP_LCD_DrawRect(215,233,20,20);
 800196c:	2314      	movs	r3, #20
 800196e:	2214      	movs	r2, #20
 8001970:	21e9      	movs	r1, #233	; 0xe9
 8001972:	20d7      	movs	r0, #215	; 0xd7
 8001974:	f006 f898 	bl	8007aa8 <BSP_LCD_DrawRect>
    	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001978:	482e      	ldr	r0, [pc, #184]	; (8001a34 <ESP8266_SendData+0x424>)
 800197a:	f005 fe71 	bl	8007660 <BSP_LCD_SetTextColor>
    	BSP_LCD_FillRect(215,233,20,20);
 800197e:	2314      	movs	r3, #20
 8001980:	2214      	movs	r2, #20
 8001982:	21e9      	movs	r1, #233	; 0xe9
 8001984:	20d7      	movs	r0, #215	; 0xd7
 8001986:	f006 f8c1 	bl	8007b0c <BSP_LCD_FillRect>
    	return;
 800198a:	e04c      	b.n	8001a26 <ESP8266_SendData+0x416>
    }

    HAL_Delay(1000);
 800198c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001990:	f000 fcca 	bl	8002328 <HAL_Delay>
    /*?��?? 3th AT ??�令*/

    /*?��?? 4th AT ??�令*/
    timeout=0;
 8001994:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <ESP8266_SendData+0x428>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
    while(inst4_receive_ok==0 && timeout<=5){
 800199a:	e01d      	b.n	80019d8 <ESP8266_SendData+0x3c8>
	HAL_UART_Transmit(&huart1, (uint8_t*)at_inst4, sizeof(at_inst4) - 1, 1000);
 800199c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a0:	220d      	movs	r2, #13
 80019a2:	4926      	ldr	r1, [pc, #152]	; (8001a3c <ESP8266_SendData+0x42c>)
 80019a4:	4826      	ldr	r0, [pc, #152]	; (8001a40 <ESP8266_SendData+0x430>)
 80019a6:	f004 fcda 	bl	800635e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rx_buffer4, sizeof(rx_buffer4)-1, 1000);
 80019aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ae:	223f      	movs	r2, #63	; 0x3f
 80019b0:	4924      	ldr	r1, [pc, #144]	; (8001a44 <ESP8266_SendData+0x434>)
 80019b2:	4823      	ldr	r0, [pc, #140]	; (8001a40 <ESP8266_SendData+0x430>)
 80019b4:	f004 fd65 	bl	8006482 <HAL_UART_Receive>
	inst4_receive_ok = checkBufferCharacters(rx_buffer4, "A");
 80019b8:	4923      	ldr	r1, [pc, #140]	; (8001a48 <ESP8266_SendData+0x438>)
 80019ba:	4822      	ldr	r0, [pc, #136]	; (8001a44 <ESP8266_SendData+0x434>)
 80019bc:	f000 f84e 	bl	8001a5c <checkBufferCharacters>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <ESP8266_SendData+0x43c>)
 80019c4:	6013      	str	r3, [r2, #0]
	HAL_Delay(3000);
 80019c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019ca:	f000 fcad 	bl	8002328 <HAL_Delay>
	timeout++;
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <ESP8266_SendData+0x428>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <ESP8266_SendData+0x428>)
 80019d6:	6013      	str	r3, [r2, #0]
    while(inst4_receive_ok==0 && timeout<=5){
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <ESP8266_SendData+0x43c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d103      	bne.n	80019e8 <ESP8266_SendData+0x3d8>
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <ESP8266_SendData+0x428>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	ddd9      	ble.n	800199c <ESP8266_SendData+0x38c>
    }
    if(inst4_receive_ok!=1){
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <ESP8266_SendData+0x43c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d119      	bne.n	8001a24 <ESP8266_SendData+0x414>
	return;
	}
    HAL_Delay(1000);
 80019f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019f4:	f000 fc98 	bl	8002328 <HAL_Delay>
    /*?��?? 4th AT ??�令*/

    /*清空?��?��??�令??�buffer*/
    memset(rx_buffer1, 0, sizeof(rx_buffer1));
 80019f8:	2240      	movs	r2, #64	; 0x40
 80019fa:	2100      	movs	r1, #0
 80019fc:	4814      	ldr	r0, [pc, #80]	; (8001a50 <ESP8266_SendData+0x440>)
 80019fe:	f006 fcd1 	bl	80083a4 <memset>
    memset(rx_buffer2, 0, sizeof(rx_buffer2));
 8001a02:	2240      	movs	r2, #64	; 0x40
 8001a04:	2100      	movs	r1, #0
 8001a06:	4813      	ldr	r0, [pc, #76]	; (8001a54 <ESP8266_SendData+0x444>)
 8001a08:	f006 fccc 	bl	80083a4 <memset>
    memset(rx_buffer3, 0, sizeof(rx_buffer3));
 8001a0c:	2240      	movs	r2, #64	; 0x40
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4811      	ldr	r0, [pc, #68]	; (8001a58 <ESP8266_SendData+0x448>)
 8001a12:	f006 fcc7 	bl	80083a4 <memset>
    memset(rx_buffer4, 0, sizeof(rx_buffer4));
 8001a16:	2240      	movs	r2, #64	; 0x40
 8001a18:	2100      	movs	r1, #0
 8001a1a:	480a      	ldr	r0, [pc, #40]	; (8001a44 <ESP8266_SendData+0x434>)
 8001a1c:	f006 fcc2 	bl	80083a4 <memset>
 8001a20:	46a5      	mov	sp, r4
 8001a22:	e001      	b.n	8001a28 <ESP8266_SendData+0x418>
	return;
 8001a24:	bf00      	nop
 8001a26:	46a5      	mov	sp, r4
}
 8001a28:	3758      	adds	r7, #88	; 0x58
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a30:	20000490 	.word	0x20000490
 8001a34:	ffff0000 	.word	0xffff0000
 8001a38:	20000498 	.word	0x20000498
 8001a3c:	2000002c 	.word	0x2000002c
 8001a40:	20000588 	.word	0x20000588
 8001a44:	20000444 	.word	0x20000444
 8001a48:	08008db4 	.word	0x08008db4
 8001a4c:	20000494 	.word	0x20000494
 8001a50:	20000384 	.word	0x20000384
 8001a54:	200003c4 	.word	0x200003c4
 8001a58:	20000404 	.word	0x20000404

08001a5c <checkBufferCharacters>:

int32_t checkBufferCharacters(uint8_t* buffer, const char* targetString){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
    uint32_t targetLen = strlen(targetString);
 8001a66:	6838      	ldr	r0, [r7, #0]
 8001a68:	f7fe fbc2 	bl	80001f0 <strlen>
 8001a6c:	60b8      	str	r0, [r7, #8]

    for (uint32_t i = 0; i < targetLen; i++){
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e01f      	b.n	8001ab4 <checkBufferCharacters+0x58>
        int found = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
        for (uint32_t j = 0; j < BUFFER_SIZE; j++){
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e00f      	b.n	8001a9e <checkBufferCharacters+0x42>
            if (buffer[j] == targetString[i]) {
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	6839      	ldr	r1, [r7, #0]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	440b      	add	r3, r1
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d102      	bne.n	8001a98 <checkBufferCharacters+0x3c>
                found = 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	613b      	str	r3, [r7, #16]
                break;
 8001a96:	e005      	b.n	8001aa4 <checkBufferCharacters+0x48>
        for (uint32_t j = 0; j < BUFFER_SIZE; j++){
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b3f      	cmp	r3, #63	; 0x3f
 8001aa2:	d9ec      	bls.n	8001a7e <checkBufferCharacters+0x22>
            }
        }
        if (!found) {
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <checkBufferCharacters+0x52>
            return 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e007      	b.n	8001abe <checkBufferCharacters+0x62>
    for (uint32_t i = 0; i < targetLen; i++){
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d3db      	bcc.n	8001a74 <checkBufferCharacters+0x18>
        }
    }
    return 1;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <delay>:
/* ESP8266 part(end) */

/* DHT22 part(start) */
void delay (uint16_t time)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <delay+0x30>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8001ada:	bf00      	nop
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <delay+0x30>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d3f9      	bcc.n	8001adc <delay+0x14>
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000540 	.word	0x20000540

08001afc <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b1c:	2311      	movs	r3, #17
 8001b1e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	4619      	mov	r1, r3
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f001 f97c 	bl	8002e28 <HAL_GPIO_Init>
}
 8001b30:	bf00      	nop
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
	//GPIO_NOPULL
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	4619      	mov	r1, r3
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f001 f95e 	bl	8002e28 <HAL_GPIO_Init>
}
 8001b6c:	bf00      	nop
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <DHT22_Start>:

void DHT22_Start (void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT22_PORT, DHT22_PIN);  // set the pin as output
 8001b78:	2108      	movs	r1, #8
 8001b7a:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <DHT22_Start+0x3c>)
 8001b7c:	f7ff ffbe 	bl	8001afc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8001b80:	2200      	movs	r2, #0
 8001b82:	2108      	movs	r1, #8
 8001b84:	480a      	ldr	r0, [pc, #40]	; (8001bb0 <DHT22_Start+0x3c>)
 8001b86:	f001 fc1f 	bl	80033c8 <HAL_GPIO_WritePin>
	delay (1200);   // wait for 18ms
 8001b8a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001b8e:	f7ff ff9b 	bl	8001ac8 <delay>
    HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8001b92:	2201      	movs	r2, #1
 8001b94:	2108      	movs	r1, #8
 8001b96:	4806      	ldr	r0, [pc, #24]	; (8001bb0 <DHT22_Start+0x3c>)
 8001b98:	f001 fc16 	bl	80033c8 <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 8001b9c:	2014      	movs	r0, #20
 8001b9e:	f7ff ff93 	bl	8001ac8 <delay>
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);    // set as input
 8001ba2:	2108      	movs	r1, #8
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <DHT22_Start+0x3c>)
 8001ba6:	f7ff ffc7 	bl	8001b38 <Set_Pin_Input>
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40020800 	.word	0x40020800

08001bb4 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response (void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	71fb      	strb	r3, [r7, #7]
    timeout_DHT=0;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <DHT22_Check_Response+0x68>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
    while(Response==0 && timeout_DHT<5){
 8001bc4:	e01e      	b.n	8001c04 <DHT22_Check_Response+0x50>
	if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))==0)
 8001bc6:	2108      	movs	r1, #8
 8001bc8:	4815      	ldr	r0, [pc, #84]	; (8001c20 <DHT22_Check_Response+0x6c>)
 8001bca:	f001 fbe5 	bl	8003398 <HAL_GPIO_ReadPin>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10f      	bne.n	8001bf4 <DHT22_Check_Response+0x40>
	{
            delay (80);
 8001bd4:	2050      	movs	r0, #80	; 0x50
 8001bd6:	f7ff ff77 	bl	8001ac8 <delay>

	    if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))==1)
 8001bda:	2108      	movs	r1, #8
 8001bdc:	4810      	ldr	r0, [pc, #64]	; (8001c20 <DHT22_Check_Response+0x6c>)
 8001bde:	f001 fbdb 	bl	8003398 <HAL_GPIO_ReadPin>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d102      	bne.n	8001bee <DHT22_Check_Response+0x3a>
	    	 Response = 1;
 8001be8:	2301      	movs	r3, #1
 8001bea:	71fb      	strb	r3, [r7, #7]
 8001bec:	e00a      	b.n	8001c04 <DHT22_Check_Response+0x50>

	    else Response = -1; // 255
 8001bee:	23ff      	movs	r3, #255	; 0xff
 8001bf0:	71fb      	strb	r3, [r7, #7]
 8001bf2:	e007      	b.n	8001c04 <DHT22_Check_Response+0x50>
	}
	else
	{
		delay (5);
 8001bf4:	2005      	movs	r0, #5
 8001bf6:	f7ff ff67 	bl	8001ac8 <delay>
		timeout_DHT++;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <DHT22_Check_Response+0x68>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <DHT22_Check_Response+0x68>)
 8001c02:	6013      	str	r3, [r2, #0]
    while(Response==0 && timeout_DHT<5){
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d103      	bne.n	8001c12 <DHT22_Check_Response+0x5e>
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <DHT22_Check_Response+0x68>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	ddd9      	ble.n	8001bc6 <DHT22_Check_Response+0x12>
	}
    }
    return Response;
 8001c12:	79fb      	ldrb	r3, [r7, #7]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200004a8 	.word	0x200004a8
 8001c20:	40020800 	.word	0x40020800

08001c24 <DHT22_Read>:

 uint8_t DHT22_Read (void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
    uint8_t i,j;
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 8001c2a:	bf00      	nop
 8001c2c:	2108      	movs	r1, #8
 8001c2e:	4824      	ldr	r0, [pc, #144]	; (8001cc0 <DHT22_Read+0x9c>)
 8001c30:	f001 fbb2 	bl	8003398 <HAL_GPIO_ReadPin>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f8      	bne.n	8001c2c <DHT22_Read+0x8>
    for (j=0;j<8;j++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	71bb      	strb	r3, [r7, #6]
 8001c3e:	e037      	b.n	8001cb0 <DHT22_Read+0x8c>
    {
	    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 8001c40:	bf00      	nop
 8001c42:	2108      	movs	r1, #8
 8001c44:	481e      	ldr	r0, [pc, #120]	; (8001cc0 <DHT22_Read+0x9c>)
 8001c46:	f001 fba7 	bl	8003398 <HAL_GPIO_ReadPin>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f8      	beq.n	8001c42 <DHT22_Read+0x1e>
	    delay (40);   // wait for 40 us
 8001c50:	2028      	movs	r0, #40	; 0x28
 8001c52:	f7ff ff39 	bl	8001ac8 <delay>
	    if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001c56:	2108      	movs	r1, #8
 8001c58:	4819      	ldr	r0, [pc, #100]	; (8001cc0 <DHT22_Read+0x9c>)
 8001c5a:	f001 fb9d 	bl	8003398 <HAL_GPIO_ReadPin>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10e      	bne.n	8001c82 <DHT22_Read+0x5e>
	{
		i&= ~(1<<(7-j));   // write 0
 8001c64:	79bb      	ldrb	r3, [r7, #6]
 8001c66:	f1c3 0307 	rsb	r3, r3, #7
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	b25b      	sxtb	r3, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	b25a      	sxtb	r2, r3
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	b25b      	sxtb	r3, r3
 8001c7e:	71fb      	strb	r3, [r7, #7]
 8001c80:	e00b      	b.n	8001c9a <DHT22_Read+0x76>
	}
	    else i|= (1<<(7-j));  // if the pin is high, write 1
 8001c82:	79bb      	ldrb	r3, [r7, #6]
 8001c84:	f1c3 0307 	rsb	r3, r3, #7
 8001c88:	2201      	movs	r2, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	b25a      	sxtb	r2, r3
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	71fb      	strb	r3, [r7, #7]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));  // wait for the pin to go low
 8001c9a:	bf00      	nop
 8001c9c:	2108      	movs	r1, #8
 8001c9e:	4808      	ldr	r0, [pc, #32]	; (8001cc0 <DHT22_Read+0x9c>)
 8001ca0:	f001 fb7a 	bl	8003398 <HAL_GPIO_ReadPin>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f8      	bne.n	8001c9c <DHT22_Read+0x78>
    for (j=0;j<8;j++)
 8001caa:	79bb      	ldrb	r3, [r7, #6]
 8001cac:	3301      	adds	r3, #1
 8001cae:	71bb      	strb	r3, [r7, #6]
 8001cb0:	79bb      	ldrb	r3, [r7, #6]
 8001cb2:	2b07      	cmp	r3, #7
 8001cb4:	d9c4      	bls.n	8001c40 <DHT22_Read+0x1c>
    }
    return i;
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40020800 	.word	0x40020800

08001cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc8:	b672      	cpsid	i
}
 8001cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <Error_Handler+0x8>
	...

08001cd0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <MX_RTC_Init+0xac>)
 8001cea:	4a25      	ldr	r2, [pc, #148]	; (8001d80 <MX_RTC_Init+0xb0>)
 8001cec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <MX_RTC_Init+0xac>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cf4:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <MX_RTC_Init+0xac>)
 8001cf6:	227f      	movs	r2, #127	; 0x7f
 8001cf8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <MX_RTC_Init+0xac>)
 8001cfc:	22ff      	movs	r2, #255	; 0xff
 8001cfe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <MX_RTC_Init+0xac>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <MX_RTC_Init+0xac>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <MX_RTC_Init+0xac>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d12:	481a      	ldr	r0, [pc, #104]	; (8001d7c <MX_RTC_Init+0xac>)
 8001d14:	f002 ff94 	bl	8004c40 <HAL_RTC_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001d1e:	f7ff ffd1 	bl	8001cc4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 8001d22:	230a      	movs	r3, #10
 8001d24:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 40;
 8001d26:	2328      	movs	r3, #40	; 0x28
 8001d28:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	2200      	movs	r2, #0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480f      	ldr	r0, [pc, #60]	; (8001d7c <MX_RTC_Init+0xac>)
 8001d3e:	f002 fff5 	bl	8004d2c <HAL_RTC_SetTime>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001d48:	f7ff ffbc 	bl	8001cc4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8001d50:	2306      	movs	r3, #6
 8001d52:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8001d54:	2307      	movs	r3, #7
 8001d56:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 23;
 8001d58:	2317      	movs	r3, #23
 8001d5a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	2200      	movs	r2, #0
 8001d60:	4619      	mov	r1, r3
 8001d62:	4806      	ldr	r0, [pc, #24]	; (8001d7c <MX_RTC_Init+0xac>)
 8001d64:	f003 f8da 	bl	8004f1c <HAL_RTC_SetDate>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001d6e:	f7ff ffa9 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200004c4 	.word	0x200004c4
 8001d80:	40002800 	.word	0x40002800

08001d84 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08e      	sub	sp, #56	; 0x38
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d8c:	f107 0308 	add.w	r3, r7, #8
 8001d90:	2230      	movs	r2, #48	; 0x30
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f006 fb05 	bl	80083a4 <memset>
  if(rtcHandle->Instance==RTC)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a0c      	ldr	r2, [pc, #48]	; (8001dd0 <HAL_RTC_MspInit+0x4c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d111      	bne.n	8001dc8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001da4:	2320      	movs	r3, #32
 8001da6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dac:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dae:	f107 0308 	add.w	r3, r7, #8
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 fd84 	bl	80048c0 <HAL_RCCEx_PeriphCLKConfig>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001dbe:	f7ff ff81 	bl	8001cc4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <HAL_RTC_MspInit+0x50>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3738      	adds	r7, #56	; 0x38
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40002800 	.word	0x40002800
 8001dd4:	42470e3c 	.word	0x42470e3c

08001dd8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <MX_SPI5_Init+0x64>)
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <MX_SPI5_Init+0x68>)
 8001de0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <MX_SPI5_Init+0x64>)
 8001de4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001de8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <MX_SPI5_Init+0x64>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <MX_SPI5_Init+0x64>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <MX_SPI5_Init+0x64>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <MX_SPI5_Init+0x64>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <MX_SPI5_Init+0x64>)
 8001e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e08:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <MX_SPI5_Init+0x64>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <MX_SPI5_Init+0x64>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <MX_SPI5_Init+0x64>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <MX_SPI5_Init+0x64>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <MX_SPI5_Init+0x64>)
 8001e24:	220a      	movs	r2, #10
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e28:	4804      	ldr	r0, [pc, #16]	; (8001e3c <MX_SPI5_Init+0x64>)
 8001e2a:	f003 fa98 	bl	800535e <HAL_SPI_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001e34:	f7ff ff46 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200004e4 	.word	0x200004e4
 8001e40:	40015000 	.word	0x40015000

08001e44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <HAL_SPI_MspInit+0x84>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d12c      	bne.n	8001ec0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_SPI_MspInit+0x88>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	4a17      	ldr	r2, [pc, #92]	; (8001ecc <HAL_SPI_MspInit+0x88>)
 8001e70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e74:	6453      	str	r3, [r2, #68]	; 0x44
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_SPI_MspInit+0x88>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_SPI_MspInit+0x88>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a10      	ldr	r2, [pc, #64]	; (8001ecc <HAL_SPI_MspInit+0x88>)
 8001e8c:	f043 0320 	orr.w	r3, r3, #32
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_SPI_MspInit+0x88>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e9e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001eb0:	2305      	movs	r3, #5
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <HAL_SPI_MspInit+0x8c>)
 8001ebc:	f000 ffb4 	bl	8002e28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	3728      	adds	r7, #40	; 0x28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40015000 	.word	0x40015000
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40021400 	.word	0x40021400

08001ed4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_SPI_MspDeInit+0x30>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10a      	bne.n	8001efc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_SPI_MspDeInit+0x34>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <HAL_SPI_MspDeInit+0x34>)
 8001eec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001ef2:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <HAL_SPI_MspDeInit+0x38>)
 8001ef8:	f001 f942 	bl	8003180 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40015000 	.word	0x40015000
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40021400 	.word	0x40021400

08001f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	4a0f      	ldr	r2, [pc, #60]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001f64:	f002 fc90 	bl	8004888 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <NMI_Handler+0x8>

08001f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <HardFault_Handler+0x4>

08001f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <MemManage_Handler+0x4>

08001f76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <BusFault_Handler+0x4>

08001f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <UsageFault_Handler+0x4>

08001f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb0:	f000 f99a 	bl	80022e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <LTDC_IRQHandler+0x10>)
 8001fbe:	f001 fcad 	bl	800391c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200001f4 	.word	0x200001f4

08001fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd4:	4a14      	ldr	r2, [pc, #80]	; (8002028 <_sbrk+0x5c>)
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <_sbrk+0x60>)
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <_sbrk+0x64>)
 8001fea:	4a12      	ldr	r2, [pc, #72]	; (8002034 <_sbrk+0x68>)
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <_sbrk+0x64>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d207      	bcs.n	800200c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ffc:	f006 f9a8 	bl	8008350 <__errno>
 8002000:	4603      	mov	r3, r0
 8002002:	220c      	movs	r2, #12
 8002004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
 800200a:	e009      	b.n	8002020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002012:	4b07      	ldr	r3, [pc, #28]	; (8002030 <_sbrk+0x64>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <_sbrk+0x64>)
 800201c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800201e:	68fb      	ldr	r3, [r7, #12]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20030000 	.word	0x20030000
 800202c:	00000400 	.word	0x00000400
 8002030:	2000053c 	.word	0x2000053c
 8002034:	20000838 	.word	0x20000838

08002038 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <SystemInit+0x20>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <SystemInit+0x20>)
 8002044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002062:	463b      	mov	r3, r7
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <MX_TIM6_Init+0x64>)
 800206c:	4a15      	ldr	r2, [pc, #84]	; (80020c4 <MX_TIM6_Init+0x68>)
 800206e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <MX_TIM6_Init+0x64>)
 8002072:	2259      	movs	r2, #89	; 0x59
 8002074:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <MX_TIM6_Init+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <MX_TIM6_Init+0x64>)
 800207e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002082:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <MX_TIM6_Init+0x64>)
 8002086:	2200      	movs	r2, #0
 8002088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800208a:	480d      	ldr	r0, [pc, #52]	; (80020c0 <MX_TIM6_Init+0x64>)
 800208c:	f003 ff46 	bl	8005f1c <HAL_TIM_Base_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002096:	f7ff fe15 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209a:	2300      	movs	r3, #0
 800209c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020a2:	463b      	mov	r3, r7
 80020a4:	4619      	mov	r1, r3
 80020a6:	4806      	ldr	r0, [pc, #24]	; (80020c0 <MX_TIM6_Init+0x64>)
 80020a8:	f004 f890 	bl	80061cc <HAL_TIMEx_MasterConfigSynchronization>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80020b2:	f7ff fe07 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000540 	.word	0x20000540
 80020c4:	40001000 	.word	0x40001000

080020c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <HAL_TIM_Base_MspInit+0x3c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d10d      	bne.n	80020f6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_TIM_Base_MspInit+0x40>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_TIM_Base_MspInit+0x40>)
 80020e4:	f043 0310 	orr.w	r3, r3, #16
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_TIM_Base_MspInit+0x40>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40001000 	.word	0x40001000
 8002108:	40023800 	.word	0x40023800

0800210c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <MX_USART1_UART_Init+0x50>)
 8002114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002118:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800211c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002132:	220c      	movs	r2, #12
 8002134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002144:	f004 f8be 	bl	80062c4 <HAL_UART_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800214e:	f7ff fdb9 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000588 	.word	0x20000588
 800215c:	40011000 	.word	0x40011000

08002160 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <HAL_UART_MspInit+0x84>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d12c      	bne.n	80021dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <HAL_UART_MspInit+0x88>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <HAL_UART_MspInit+0x88>)
 800218c:	f043 0310 	orr.w	r3, r3, #16
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_UART_MspInit+0x88>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_UART_MspInit+0x88>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a10      	ldr	r2, [pc, #64]	; (80021e8 <HAL_UART_MspInit+0x88>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <HAL_UART_MspInit+0x88>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021cc:	2307      	movs	r3, #7
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <HAL_UART_MspInit+0x8c>)
 80021d8:	f000 fe26 	bl	8002e28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80021dc:	bf00      	nop
 80021de:	3728      	adds	r7, #40	; 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40011000 	.word	0x40011000
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40020000 	.word	0x40020000

080021f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002228 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021f6:	490e      	ldr	r1, [pc, #56]	; (8002230 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021f8:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021fc:	e002      	b.n	8002204 <LoopCopyDataInit>

080021fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002202:	3304      	adds	r3, #4

08002204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002208:	d3f9      	bcc.n	80021fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220a:	4a0b      	ldr	r2, [pc, #44]	; (8002238 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800220c:	4c0b      	ldr	r4, [pc, #44]	; (800223c <LoopFillZerobss+0x26>)
  movs r3, #0
 800220e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002210:	e001      	b.n	8002216 <LoopFillZerobss>

08002212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002214:	3204      	adds	r2, #4

08002216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002218:	d3fb      	bcc.n	8002212 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800221a:	f7ff ff0d 	bl	8002038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800221e:	f006 f89d 	bl	800835c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002222:	f7fe fee1 	bl	8000fe8 <main>
  bx  lr    
 8002226:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002228:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002230:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8002234:	080576c4 	.word	0x080576c4
  ldr r2, =_sbss
 8002238:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 800223c:	20000834 	.word	0x20000834

08002240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC_IRQHandler>
	...

08002244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002248:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <HAL_Init+0x40>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <HAL_Init+0x40>)
 800224e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_Init+0x40>)
 800225a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800225e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a07      	ldr	r2, [pc, #28]	; (8002284 <HAL_Init+0x40>)
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226c:	2003      	movs	r0, #3
 800226e:	f000 f94f 	bl	8002510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002272:	2000      	movs	r0, #0
 8002274:	f000 f808 	bl	8002288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002278:	f7ff fe4a 	bl	8001f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023c00 	.word	0x40023c00

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_InitTick+0x54>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x58>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229e:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f967 	bl	800257a <HAL_SYSTICK_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00e      	b.n	80022d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d80a      	bhi.n	80022d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022bc:	2200      	movs	r2, #0
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f000 f92f 	bl	8002526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c8:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <HAL_InitTick+0x5c>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	2000003c 	.word	0x2000003c
 80022e0:	20000044 	.word	0x20000044
 80022e4:	20000040 	.word	0x20000040

080022e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_IncTick+0x20>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x24>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_IncTick+0x24>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000044 	.word	0x20000044
 800230c:	200005cc 	.word	0x200005cc

08002310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_GetTick+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	200005cc 	.word	0x200005cc

08002328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff ffee 	bl	8002310 <HAL_GetTick>
 8002334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d005      	beq.n	800234e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_Delay+0x44>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800234e:	bf00      	nop
 8002350:	f7ff ffde 	bl	8002310 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d8f7      	bhi.n	8002350 <HAL_Delay+0x28>
  {
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000044 	.word	0x20000044

08002370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a2:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60d3      	str	r3, [r2, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <__NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db0b      	blt.n	80023fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	4907      	ldr	r1, [pc, #28]	; (800240c <__NVIC_EnableIRQ+0x38>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2001      	movs	r0, #1
 80023f6:	fa00 f202 	lsl.w	r2, r0, r2
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e100 	.word	0xe000e100

08002410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db0a      	blt.n	800243a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	490c      	ldr	r1, [pc, #48]	; (800245c <__NVIC_SetPriority+0x4c>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	440b      	add	r3, r1
 8002434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002438:	e00a      	b.n	8002450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4908      	ldr	r1, [pc, #32]	; (8002460 <__NVIC_SetPriority+0x50>)
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3b04      	subs	r3, #4
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	440b      	add	r3, r1
 800244e:	761a      	strb	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000e100 	.word	0xe000e100
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f1c3 0307 	rsb	r3, r3, #7
 800247e:	2b04      	cmp	r3, #4
 8002480:	bf28      	it	cs
 8002482:	2304      	movcs	r3, #4
 8002484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3304      	adds	r3, #4
 800248a:	2b06      	cmp	r3, #6
 800248c:	d902      	bls.n	8002494 <NVIC_EncodePriority+0x30>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3b03      	subs	r3, #3
 8002492:	e000      	b.n	8002496 <NVIC_EncodePriority+0x32>
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	f04f 32ff 	mov.w	r2, #4294967295
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	401a      	ands	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	4313      	orrs	r3, r2
         );
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024dc:	d301      	bcc.n	80024e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024de:	2301      	movs	r3, #1
 80024e0:	e00f      	b.n	8002502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e2:	4a0a      	ldr	r2, [pc, #40]	; (800250c <SysTick_Config+0x40>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ea:	210f      	movs	r1, #15
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	f7ff ff8e 	bl	8002410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <SysTick_Config+0x40>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fa:	4b04      	ldr	r3, [pc, #16]	; (800250c <SysTick_Config+0x40>)
 80024fc:	2207      	movs	r2, #7
 80024fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	e000e010 	.word	0xe000e010

08002510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ff29 	bl	8002370 <__NVIC_SetPriorityGrouping>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002538:	f7ff ff3e 	bl	80023b8 <__NVIC_GetPriorityGrouping>
 800253c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	6978      	ldr	r0, [r7, #20]
 8002544:	f7ff ff8e 	bl	8002464 <NVIC_EncodePriority>
 8002548:	4602      	mov	r2, r0
 800254a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff5d 	bl	8002410 <__NVIC_SetPriority>
}
 8002556:	bf00      	nop
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff31 	bl	80023d4 <__NVIC_EnableIRQ>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ffa2 	bl	80024cc <SysTick_Config>
 8002588:	4603      	mov	r3, r0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025a0:	f7ff feb6 	bl	8002310 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e099      	b.n	80026e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d0:	e00f      	b.n	80025f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025d2:	f7ff fe9d 	bl	8002310 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d908      	bls.n	80025f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2203      	movs	r2, #3
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e078      	b.n	80026e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1e8      	bne.n	80025d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	4b38      	ldr	r3, [pc, #224]	; (80026ec <HAL_DMA_Init+0x158>)
 800260c:	4013      	ands	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800261e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	2b04      	cmp	r3, #4
 800264a:	d107      	bne.n	800265c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	4313      	orrs	r3, r2
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f023 0307 	bic.w	r3, r3, #7
 8002672:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	4313      	orrs	r3, r2
 800267c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	2b04      	cmp	r3, #4
 8002684:	d117      	bne.n	80026b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00e      	beq.n	80026b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f8bd 	bl	8002818 <DMA_CheckFifoParam>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2240      	movs	r2, #64	; 0x40
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026b2:	2301      	movs	r3, #1
 80026b4:	e016      	b.n	80026e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f874 	bl	80027ac <DMA_CalcBaseAndBitshift>
 80026c4:	4603      	mov	r3, r0
 80026c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026cc:	223f      	movs	r2, #63	; 0x3f
 80026ce:	409a      	lsls	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	f010803f 	.word	0xf010803f

080026f0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e050      	b.n	80027a4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d101      	bne.n	8002712 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800270e:	2302      	movs	r3, #2
 8002710:	e048      	b.n	80027a4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2200      	movs	r2, #0
 8002730:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2221      	movs	r2, #33	; 0x21
 8002750:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f82a 	bl	80027ac <DMA_CalcBaseAndBitshift>
 8002758:	4603      	mov	r3, r0
 800275a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	223f      	movs	r2, #63	; 0x3f
 8002786:	409a      	lsls	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	3b10      	subs	r3, #16
 80027bc:	4a14      	ldr	r2, [pc, #80]	; (8002810 <DMA_CalcBaseAndBitshift+0x64>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027c6:	4a13      	ldr	r2, [pc, #76]	; (8002814 <DMA_CalcBaseAndBitshift+0x68>)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4413      	add	r3, r2
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d909      	bls.n	80027ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027e2:	f023 0303 	bic.w	r3, r3, #3
 80027e6:	1d1a      	adds	r2, r3, #4
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	659a      	str	r2, [r3, #88]	; 0x58
 80027ec:	e007      	b.n	80027fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027f6:	f023 0303 	bic.w	r3, r3, #3
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	aaaaaaab 	.word	0xaaaaaaab
 8002814:	08053e10 	.word	0x08053e10

08002818 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d11f      	bne.n	8002872 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d856      	bhi.n	80028e6 <DMA_CheckFifoParam+0xce>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <DMA_CheckFifoParam+0x28>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002851 	.word	0x08002851
 8002844:	08002863 	.word	0x08002863
 8002848:	08002851 	.word	0x08002851
 800284c:	080028e7 	.word	0x080028e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d046      	beq.n	80028ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002860:	e043      	b.n	80028ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800286a:	d140      	bne.n	80028ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002870:	e03d      	b.n	80028ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287a:	d121      	bne.n	80028c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d837      	bhi.n	80028f2 <DMA_CheckFifoParam+0xda>
 8002882:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <DMA_CheckFifoParam+0x70>)
 8002884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002888:	08002899 	.word	0x08002899
 800288c:	0800289f 	.word	0x0800289f
 8002890:	08002899 	.word	0x08002899
 8002894:	080028b1 	.word	0x080028b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
      break;
 800289c:	e030      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d025      	beq.n	80028f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ae:	e022      	b.n	80028f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028b8:	d11f      	bne.n	80028fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028be:	e01c      	b.n	80028fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d903      	bls.n	80028ce <DMA_CheckFifoParam+0xb6>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d003      	beq.n	80028d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028cc:	e018      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]
      break;
 80028d2:	e015      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00e      	beq.n	80028fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      break;
 80028e4:	e00b      	b.n	80028fe <DMA_CheckFifoParam+0xe6>
      break;
 80028e6:	bf00      	nop
 80028e8:	e00a      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      break;
 80028ea:	bf00      	nop
 80028ec:	e008      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      break;
 80028ee:	bf00      	nop
 80028f0:	e006      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      break;
 80028f2:	bf00      	nop
 80028f4:	e004      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      break;
 80028f6:	bf00      	nop
 80028f8:	e002      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      break;   
 80028fa:	bf00      	nop
 80028fc:	e000      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      break;
 80028fe:	bf00      	nop
    }
  } 
  
  return status; 
 8002900:	7bfb      	ldrb	r3, [r7, #15]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop

08002910 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e03b      	b.n	800299a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fd fe66 	bl	8000608 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002960:	f023 0107 	bic.w	r1, r3, #7
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800297a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68d1      	ldr	r1, [r2, #12]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	430b      	orrs	r3, r1
 8002988:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af02      	add	r7, sp, #8
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_DMA2D_Start+0x1c>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e018      	b.n	80029f0 <HAL_DMA2D_Start+0x4e>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f989 	bl	8002cf0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0201 	orr.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d056      	beq.n	8002ac2 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a14:	f7ff fc7c 	bl	8002310 <HAL_GetTick>
 8002a18:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002a1a:	e04b      	b.n	8002ab4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d023      	beq.n	8002a76 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3c:	f043 0202 	orr.w	r2, r3, #2
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2221      	movs	r2, #33	; 0x21
 8002a60:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2204      	movs	r2, #4
 8002a66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0a5      	b.n	8002bc2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d01a      	beq.n	8002ab4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7ff fc47 	bl	8002310 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <HAL_DMA2D_PollForTransfer+0x9c>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10f      	bne.n	8002ab4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	f043 0220 	orr.w	r2, r3, #32
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e086      	b.n	8002bc2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ac      	beq.n	8002a1c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d061      	beq.n	8002ba8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ae4:	f7ff fc14 	bl	8002310 <HAL_GetTick>
 8002ae8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002aea:	e056      	b.n	8002b9a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d02e      	beq.n	8002b5c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0c:	f043 0204 	orr.w	r2, r3, #4
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b22:	f043 0202 	orr.w	r2, r3, #2
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2229      	movs	r2, #41	; 0x29
 8002b46:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e032      	b.n	8002bc2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b62:	d01a      	beq.n	8002b9a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b64:	f7ff fbd4 	bl	8002310 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d302      	bcc.n	8002b7a <HAL_DMA2D_PollForTransfer+0x182>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10f      	bne.n	8002b9a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	f043 0220 	orr.w	r2, r3, #32
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2203      	movs	r2, #3
 8002b8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e013      	b.n	8002bc2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0a1      	beq.n	8002aec <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2212      	movs	r2, #18
 8002bae:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_DMA2D_ConfigLayer+0x20>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e079      	b.n	8002ce0 <HAL_DMA2D_ConfigLayer+0x114>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	3318      	adds	r3, #24
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	041b      	lsls	r3, r3, #16
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002c16:	4b35      	ldr	r3, [pc, #212]	; (8002cec <HAL_DMA2D_ConfigLayer+0x120>)
 8002c18:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b0a      	cmp	r3, #10
 8002c20:	d003      	beq.n	8002c2a <HAL_DMA2D_ConfigLayer+0x5e>
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b09      	cmp	r3, #9
 8002c28:	d107      	bne.n	8002c3a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e005      	b.n	8002c46 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	061b      	lsls	r3, r3, #24
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d120      	bne.n	8002c8e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	ea02 0103 	and.w	r1, r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b0a      	cmp	r3, #10
 8002c74:	d003      	beq.n	8002c7e <HAL_DMA2D_ConfigLayer+0xb2>
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b09      	cmp	r3, #9
 8002c7c:	d127      	bne.n	8002cce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c8c:	e01f      	b.n	8002cce <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69da      	ldr	r2, [r3, #28]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	ea02 0103 	and.w	r1, r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b0a      	cmp	r3, #10
 8002cb6:	d003      	beq.n	8002cc0 <HAL_DMA2D_ConfigLayer+0xf4>
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b09      	cmp	r3, #9
 8002cbe:	d106      	bne.n	8002cce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ccc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	ff03000f 	.word	0xff03000f

08002cf0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b08b      	sub	sp, #44	; 0x2c
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	041a      	lsls	r2, r3, #16
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d28:	d174      	bne.n	8002e14 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002d30:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d38:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002d40:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d108      	bne.n	8002d62 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d60:	e053      	b.n	8002e0a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d106      	bne.n	8002d78 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	e048      	b.n	8002e0a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d111      	bne.n	8002da4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	0cdb      	lsrs	r3, r3, #19
 8002d84:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	0a9b      	lsrs	r3, r3, #10
 8002d8a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	08db      	lsrs	r3, r3, #3
 8002d90:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	02db      	lsls	r3, r3, #11
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
 8002da2:	e032      	b.n	8002e0a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d117      	bne.n	8002ddc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	0fdb      	lsrs	r3, r3, #31
 8002db0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	0cdb      	lsrs	r3, r3, #19
 8002db6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	0adb      	lsrs	r3, r3, #11
 8002dbc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	08db      	lsrs	r3, r3, #3
 8002dc2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	029b      	lsls	r3, r3, #10
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	03db      	lsls	r3, r3, #15
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dda:	e016      	b.n	8002e0a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	0f1b      	lsrs	r3, r3, #28
 8002de0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	0d1b      	lsrs	r3, r3, #20
 8002de6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	0b1b      	lsrs	r3, r3, #12
 8002dec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	011a      	lsls	r2, r3, #4
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	031b      	lsls	r3, r3, #12
 8002e02:	4313      	orrs	r3, r2
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002e12:	e003      	b.n	8002e1c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	60da      	str	r2, [r3, #12]
}
 8002e1c:	bf00      	nop
 8002e1e:	372c      	adds	r7, #44	; 0x2c
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	; 0x24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	e177      	b.n	8003134 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e44:	2201      	movs	r2, #1
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	f040 8166 	bne.w	800312e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d005      	beq.n	8002e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d130      	bne.n	8002edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	2203      	movs	r2, #3
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 0201 	and.w	r2, r3, #1
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d017      	beq.n	8002f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d123      	bne.n	8002f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	08da      	lsrs	r2, r3, #3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3208      	adds	r2, #8
 8002f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	220f      	movs	r2, #15
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	08da      	lsrs	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3208      	adds	r2, #8
 8002f66:	69b9      	ldr	r1, [r7, #24]
 8002f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	2203      	movs	r2, #3
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0203 	and.w	r2, r3, #3
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80c0 	beq.w	800312e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	4b66      	ldr	r3, [pc, #408]	; (800314c <HAL_GPIO_Init+0x324>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	4a65      	ldr	r2, [pc, #404]	; (800314c <HAL_GPIO_Init+0x324>)
 8002fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fbe:	4b63      	ldr	r3, [pc, #396]	; (800314c <HAL_GPIO_Init+0x324>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fca:	4a61      	ldr	r2, [pc, #388]	; (8003150 <HAL_GPIO_Init+0x328>)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	220f      	movs	r2, #15
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a58      	ldr	r2, [pc, #352]	; (8003154 <HAL_GPIO_Init+0x32c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d037      	beq.n	8003066 <HAL_GPIO_Init+0x23e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a57      	ldr	r2, [pc, #348]	; (8003158 <HAL_GPIO_Init+0x330>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d031      	beq.n	8003062 <HAL_GPIO_Init+0x23a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a56      	ldr	r2, [pc, #344]	; (800315c <HAL_GPIO_Init+0x334>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d02b      	beq.n	800305e <HAL_GPIO_Init+0x236>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a55      	ldr	r2, [pc, #340]	; (8003160 <HAL_GPIO_Init+0x338>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d025      	beq.n	800305a <HAL_GPIO_Init+0x232>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a54      	ldr	r2, [pc, #336]	; (8003164 <HAL_GPIO_Init+0x33c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01f      	beq.n	8003056 <HAL_GPIO_Init+0x22e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a53      	ldr	r2, [pc, #332]	; (8003168 <HAL_GPIO_Init+0x340>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d019      	beq.n	8003052 <HAL_GPIO_Init+0x22a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a52      	ldr	r2, [pc, #328]	; (800316c <HAL_GPIO_Init+0x344>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_GPIO_Init+0x226>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a51      	ldr	r2, [pc, #324]	; (8003170 <HAL_GPIO_Init+0x348>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00d      	beq.n	800304a <HAL_GPIO_Init+0x222>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a50      	ldr	r2, [pc, #320]	; (8003174 <HAL_GPIO_Init+0x34c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d007      	beq.n	8003046 <HAL_GPIO_Init+0x21e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a4f      	ldr	r2, [pc, #316]	; (8003178 <HAL_GPIO_Init+0x350>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <HAL_GPIO_Init+0x21a>
 800303e:	2309      	movs	r3, #9
 8003040:	e012      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003042:	230a      	movs	r3, #10
 8003044:	e010      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003046:	2308      	movs	r3, #8
 8003048:	e00e      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800304a:	2307      	movs	r3, #7
 800304c:	e00c      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800304e:	2306      	movs	r3, #6
 8003050:	e00a      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003052:	2305      	movs	r3, #5
 8003054:	e008      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003056:	2304      	movs	r3, #4
 8003058:	e006      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800305a:	2303      	movs	r3, #3
 800305c:	e004      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800305e:	2302      	movs	r3, #2
 8003060:	e002      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003066:	2300      	movs	r3, #0
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	f002 0203 	and.w	r2, r2, #3
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	4093      	lsls	r3, r2
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003078:	4935      	ldr	r1, [pc, #212]	; (8003150 <HAL_GPIO_Init+0x328>)
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	3302      	adds	r3, #2
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003086:	4b3d      	ldr	r3, [pc, #244]	; (800317c <HAL_GPIO_Init+0x354>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030aa:	4a34      	ldr	r2, [pc, #208]	; (800317c <HAL_GPIO_Init+0x354>)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030b0:	4b32      	ldr	r3, [pc, #200]	; (800317c <HAL_GPIO_Init+0x354>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030d4:	4a29      	ldr	r2, [pc, #164]	; (800317c <HAL_GPIO_Init+0x354>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030da:	4b28      	ldr	r3, [pc, #160]	; (800317c <HAL_GPIO_Init+0x354>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030fe:	4a1f      	ldr	r2, [pc, #124]	; (800317c <HAL_GPIO_Init+0x354>)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003104:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_GPIO_Init+0x354>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003128:	4a14      	ldr	r2, [pc, #80]	; (800317c <HAL_GPIO_Init+0x354>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3301      	adds	r3, #1
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b0f      	cmp	r3, #15
 8003138:	f67f ae84 	bls.w	8002e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	40013800 	.word	0x40013800
 8003154:	40020000 	.word	0x40020000
 8003158:	40020400 	.word	0x40020400
 800315c:	40020800 	.word	0x40020800
 8003160:	40020c00 	.word	0x40020c00
 8003164:	40021000 	.word	0x40021000
 8003168:	40021400 	.word	0x40021400
 800316c:	40021800 	.word	0x40021800
 8003170:	40021c00 	.word	0x40021c00
 8003174:	40022000 	.word	0x40022000
 8003178:	40022400 	.word	0x40022400
 800317c:	40013c00 	.word	0x40013c00

08003180 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800318a:	2300      	movs	r3, #0
 800318c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	e0d9      	b.n	8003350 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800319c:	2201      	movs	r2, #1
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4013      	ands	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	f040 80c9 	bne.w	800334a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80031b8:	4a6b      	ldr	r2, [pc, #428]	; (8003368 <HAL_GPIO_DeInit+0x1e8>)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	3302      	adds	r3, #2
 80031c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	220f      	movs	r2, #15
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	4013      	ands	r3, r2
 80031d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a63      	ldr	r2, [pc, #396]	; (800336c <HAL_GPIO_DeInit+0x1ec>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d037      	beq.n	8003252 <HAL_GPIO_DeInit+0xd2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a62      	ldr	r2, [pc, #392]	; (8003370 <HAL_GPIO_DeInit+0x1f0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d031      	beq.n	800324e <HAL_GPIO_DeInit+0xce>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a61      	ldr	r2, [pc, #388]	; (8003374 <HAL_GPIO_DeInit+0x1f4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d02b      	beq.n	800324a <HAL_GPIO_DeInit+0xca>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a60      	ldr	r2, [pc, #384]	; (8003378 <HAL_GPIO_DeInit+0x1f8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d025      	beq.n	8003246 <HAL_GPIO_DeInit+0xc6>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a5f      	ldr	r2, [pc, #380]	; (800337c <HAL_GPIO_DeInit+0x1fc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01f      	beq.n	8003242 <HAL_GPIO_DeInit+0xc2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a5e      	ldr	r2, [pc, #376]	; (8003380 <HAL_GPIO_DeInit+0x200>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d019      	beq.n	800323e <HAL_GPIO_DeInit+0xbe>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a5d      	ldr	r2, [pc, #372]	; (8003384 <HAL_GPIO_DeInit+0x204>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d013      	beq.n	800323a <HAL_GPIO_DeInit+0xba>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a5c      	ldr	r2, [pc, #368]	; (8003388 <HAL_GPIO_DeInit+0x208>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00d      	beq.n	8003236 <HAL_GPIO_DeInit+0xb6>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a5b      	ldr	r2, [pc, #364]	; (800338c <HAL_GPIO_DeInit+0x20c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <HAL_GPIO_DeInit+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a5a      	ldr	r2, [pc, #360]	; (8003390 <HAL_GPIO_DeInit+0x210>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d101      	bne.n	800322e <HAL_GPIO_DeInit+0xae>
 800322a:	2309      	movs	r3, #9
 800322c:	e012      	b.n	8003254 <HAL_GPIO_DeInit+0xd4>
 800322e:	230a      	movs	r3, #10
 8003230:	e010      	b.n	8003254 <HAL_GPIO_DeInit+0xd4>
 8003232:	2308      	movs	r3, #8
 8003234:	e00e      	b.n	8003254 <HAL_GPIO_DeInit+0xd4>
 8003236:	2307      	movs	r3, #7
 8003238:	e00c      	b.n	8003254 <HAL_GPIO_DeInit+0xd4>
 800323a:	2306      	movs	r3, #6
 800323c:	e00a      	b.n	8003254 <HAL_GPIO_DeInit+0xd4>
 800323e:	2305      	movs	r3, #5
 8003240:	e008      	b.n	8003254 <HAL_GPIO_DeInit+0xd4>
 8003242:	2304      	movs	r3, #4
 8003244:	e006      	b.n	8003254 <HAL_GPIO_DeInit+0xd4>
 8003246:	2303      	movs	r3, #3
 8003248:	e004      	b.n	8003254 <HAL_GPIO_DeInit+0xd4>
 800324a:	2302      	movs	r3, #2
 800324c:	e002      	b.n	8003254 <HAL_GPIO_DeInit+0xd4>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_GPIO_DeInit+0xd4>
 8003252:	2300      	movs	r3, #0
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	f002 0203 	and.w	r2, r2, #3
 800325a:	0092      	lsls	r2, r2, #2
 800325c:	4093      	lsls	r3, r2
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	429a      	cmp	r2, r3
 8003262:	d132      	bne.n	80032ca <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003264:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <HAL_GPIO_DeInit+0x214>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	43db      	mvns	r3, r3
 800326c:	4949      	ldr	r1, [pc, #292]	; (8003394 <HAL_GPIO_DeInit+0x214>)
 800326e:	4013      	ands	r3, r2
 8003270:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003272:	4b48      	ldr	r3, [pc, #288]	; (8003394 <HAL_GPIO_DeInit+0x214>)
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	43db      	mvns	r3, r3
 800327a:	4946      	ldr	r1, [pc, #280]	; (8003394 <HAL_GPIO_DeInit+0x214>)
 800327c:	4013      	ands	r3, r2
 800327e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003280:	4b44      	ldr	r3, [pc, #272]	; (8003394 <HAL_GPIO_DeInit+0x214>)
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	43db      	mvns	r3, r3
 8003288:	4942      	ldr	r1, [pc, #264]	; (8003394 <HAL_GPIO_DeInit+0x214>)
 800328a:	4013      	ands	r3, r2
 800328c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800328e:	4b41      	ldr	r3, [pc, #260]	; (8003394 <HAL_GPIO_DeInit+0x214>)
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	43db      	mvns	r3, r3
 8003296:	493f      	ldr	r1, [pc, #252]	; (8003394 <HAL_GPIO_DeInit+0x214>)
 8003298:	4013      	ands	r3, r2
 800329a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	220f      	movs	r2, #15
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80032ac:	4a2e      	ldr	r2, [pc, #184]	; (8003368 <HAL_GPIO_DeInit+0x1e8>)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	3302      	adds	r3, #2
 80032b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	43da      	mvns	r2, r3
 80032bc:	482a      	ldr	r0, [pc, #168]	; (8003368 <HAL_GPIO_DeInit+0x1e8>)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	089b      	lsrs	r3, r3, #2
 80032c2:	400a      	ands	r2, r1
 80032c4:	3302      	adds	r3, #2
 80032c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	2103      	movs	r1, #3
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	401a      	ands	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	08da      	lsrs	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3208      	adds	r2, #8
 80032e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	220f      	movs	r2, #15
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	08d2      	lsrs	r2, r2, #3
 8003300:	4019      	ands	r1, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3208      	adds	r2, #8
 8003306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	2103      	movs	r1, #3
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	401a      	ands	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	2101      	movs	r1, #1
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	fa01 f303 	lsl.w	r3, r1, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	401a      	ands	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	2103      	movs	r1, #3
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	401a      	ands	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3301      	adds	r3, #1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2b0f      	cmp	r3, #15
 8003354:	f67f af22 	bls.w	800319c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40013800 	.word	0x40013800
 800336c:	40020000 	.word	0x40020000
 8003370:	40020400 	.word	0x40020400
 8003374:	40020800 	.word	0x40020800
 8003378:	40020c00 	.word	0x40020c00
 800337c:	40021000 	.word	0x40021000
 8003380:	40021400 	.word	0x40021400
 8003384:	40021800 	.word	0x40021800
 8003388:	40021c00 	.word	0x40021c00
 800338c:	40022000 	.word	0x40022000
 8003390:	40022400 	.word	0x40022400
 8003394:	40013c00 	.word	0x40013c00

08003398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	887b      	ldrh	r3, [r7, #2]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	e001      	b.n	80033ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
 80033d4:	4613      	mov	r3, r2
 80033d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033d8:	787b      	ldrb	r3, [r7, #1]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033e4:	e003      	b.n	80033ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033e6:	887b      	ldrh	r3, [r7, #2]
 80033e8:	041a      	lsls	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	619a      	str	r2, [r3, #24]
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
	...

080033fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e12b      	b.n	8003666 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd fb4c 	bl	8000ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800344e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800345e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003460:	f001 f9ea 	bl	8004838 <HAL_RCC_GetPCLK1Freq>
 8003464:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4a81      	ldr	r2, [pc, #516]	; (8003670 <HAL_I2C_Init+0x274>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d807      	bhi.n	8003480 <HAL_I2C_Init+0x84>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a80      	ldr	r2, [pc, #512]	; (8003674 <HAL_I2C_Init+0x278>)
 8003474:	4293      	cmp	r3, r2
 8003476:	bf94      	ite	ls
 8003478:	2301      	movls	r3, #1
 800347a:	2300      	movhi	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e006      	b.n	800348e <HAL_I2C_Init+0x92>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4a7d      	ldr	r2, [pc, #500]	; (8003678 <HAL_I2C_Init+0x27c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	bf94      	ite	ls
 8003488:	2301      	movls	r3, #1
 800348a:	2300      	movhi	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0e7      	b.n	8003666 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4a78      	ldr	r2, [pc, #480]	; (800367c <HAL_I2C_Init+0x280>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	0c9b      	lsrs	r3, r3, #18
 80034a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4a6a      	ldr	r2, [pc, #424]	; (8003670 <HAL_I2C_Init+0x274>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d802      	bhi.n	80034d0 <HAL_I2C_Init+0xd4>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3301      	adds	r3, #1
 80034ce:	e009      	b.n	80034e4 <HAL_I2C_Init+0xe8>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	4a69      	ldr	r2, [pc, #420]	; (8003680 <HAL_I2C_Init+0x284>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	099b      	lsrs	r3, r3, #6
 80034e2:	3301      	adds	r3, #1
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	430b      	orrs	r3, r1
 80034ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	495c      	ldr	r1, [pc, #368]	; (8003670 <HAL_I2C_Init+0x274>)
 8003500:	428b      	cmp	r3, r1
 8003502:	d819      	bhi.n	8003538 <HAL_I2C_Init+0x13c>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1e59      	subs	r1, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003512:	1c59      	adds	r1, r3, #1
 8003514:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003518:	400b      	ands	r3, r1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_I2C_Init+0x138>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1e59      	subs	r1, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	fbb1 f3f3 	udiv	r3, r1, r3
 800352c:	3301      	adds	r3, #1
 800352e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003532:	e051      	b.n	80035d8 <HAL_I2C_Init+0x1dc>
 8003534:	2304      	movs	r3, #4
 8003536:	e04f      	b.n	80035d8 <HAL_I2C_Init+0x1dc>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d111      	bne.n	8003564 <HAL_I2C_Init+0x168>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1e58      	subs	r0, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6859      	ldr	r1, [r3, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	440b      	add	r3, r1
 800354e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003552:	3301      	adds	r3, #1
 8003554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	e012      	b.n	800358a <HAL_I2C_Init+0x18e>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1e58      	subs	r0, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	0099      	lsls	r1, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	fbb0 f3f3 	udiv	r3, r0, r3
 800357a:	3301      	adds	r3, #1
 800357c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_I2C_Init+0x196>
 800358e:	2301      	movs	r3, #1
 8003590:	e022      	b.n	80035d8 <HAL_I2C_Init+0x1dc>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10e      	bne.n	80035b8 <HAL_I2C_Init+0x1bc>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1e58      	subs	r0, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	440b      	add	r3, r1
 80035a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ac:	3301      	adds	r3, #1
 80035ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b6:	e00f      	b.n	80035d8 <HAL_I2C_Init+0x1dc>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1e58      	subs	r0, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	0099      	lsls	r1, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ce:	3301      	adds	r3, #1
 80035d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	6809      	ldr	r1, [r1, #0]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6911      	ldr	r1, [r2, #16]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	68d2      	ldr	r2, [r2, #12]
 8003612:	4311      	orrs	r1, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	430b      	orrs	r3, r1
 800361a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	000186a0 	.word	0x000186a0
 8003674:	001e847f 	.word	0x001e847f
 8003678:	003d08ff 	.word	0x003d08ff
 800367c:	431bde83 	.word	0x431bde83
 8003680:	10624dd3 	.word	0x10624dd3

08003684 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b20      	cmp	r3, #32
 8003698:	d129      	bne.n	80036ee <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2224      	movs	r2, #36	; 0x24
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0210 	bic.w	r2, r2, #16
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	e000      	b.n	80036f0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80036ee:	2302      	movs	r3, #2
  }
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003706:	2300      	movs	r3, #0
 8003708:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b20      	cmp	r3, #32
 8003714:	d12a      	bne.n	800376c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2224      	movs	r2, #36	; 0x24
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003736:	89fb      	ldrh	r3, [r7, #14]
 8003738:	f023 030f 	bic.w	r3, r3, #15
 800373c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	b29a      	uxth	r2, r3
 8003742:	89fb      	ldrh	r3, [r7, #14]
 8003744:	4313      	orrs	r3, r2
 8003746:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	89fa      	ldrh	r2, [r7, #14]
 800374e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	e000      	b.n	800376e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800376c:	2302      	movs	r3, #2
  }
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0bf      	b.n	800390e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd faf2 	bl	8000d8c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80037be:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6999      	ldr	r1, [r3, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037d4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6899      	ldr	r1, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b4a      	ldr	r3, [pc, #296]	; (8003918 <HAL_LTDC_Init+0x19c>)
 80037f0:	400b      	ands	r3, r1
 80037f2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	041b      	lsls	r3, r3, #16
 80037fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6899      	ldr	r1, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68d9      	ldr	r1, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <HAL_LTDC_Init+0x19c>)
 800381e:	400b      	ands	r3, r1
 8003820:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68d9      	ldr	r1, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1a      	ldr	r2, [r3, #32]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6919      	ldr	r1, [r3, #16]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b33      	ldr	r3, [pc, #204]	; (8003918 <HAL_LTDC_Init+0x19c>)
 800384c:	400b      	ands	r3, r1
 800384e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	041b      	lsls	r3, r3, #16
 8003856:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6919      	ldr	r1, [r3, #16]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6959      	ldr	r1, [r3, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b27      	ldr	r3, [pc, #156]	; (8003918 <HAL_LTDC_Init+0x19c>)
 800387a:	400b      	ands	r3, r1
 800387c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6959      	ldr	r1, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80038ac:	041b      	lsls	r3, r3, #16
 80038ae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80038be:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0206 	orr.w	r2, r2, #6
 80038ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	f000f800 	.word	0xf000f800

0800391c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003932:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	d023      	beq.n	8003986 <HAL_LTDC_IRQHandler+0x6a>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01e      	beq.n	8003986 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0204 	bic.w	r2, r2, #4
 8003956:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2204      	movs	r2, #4
 800395e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003966:	f043 0201 	orr.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2204      	movs	r2, #4
 8003974:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f86f 	bl	8003a64 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d023      	beq.n	80039d8 <HAL_LTDC_IRQHandler+0xbc>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01e      	beq.n	80039d8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0202 	bic.w	r2, r2, #2
 80039a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2202      	movs	r2, #2
 80039b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039b8:	f043 0202 	orr.w	r2, r3, #2
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2204      	movs	r2, #4
 80039c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f846 	bl	8003a64 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01b      	beq.n	8003a1a <HAL_LTDC_IRQHandler+0xfe>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d016      	beq.n	8003a1a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2201      	movs	r2, #1
 8003a02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f82f 	bl	8003a78 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01b      	beq.n	8003a5c <HAL_LTDC_IRQHandler+0x140>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d016      	beq.n	8003a5c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0208 	bic.w	r2, r2, #8
 8003a3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2208      	movs	r2, #8
 8003a44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f818 	bl	8003a8c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003aa0:	b5b0      	push	{r4, r5, r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_LTDC_ConfigLayer+0x1a>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e02c      	b.n	8003b14 <HAL_LTDC_ConfigLayer+0x74>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2134      	movs	r1, #52	; 0x34
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4614      	mov	r4, r2
 8003ade:	461d      	mov	r5, r3
 8003ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f83b 	bl	8003b70 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2201      	movs	r2, #1
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bdb0      	pop	{r4, r5, r7, pc}

08003b1c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_LTDC_EnableDither+0x16>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e016      	b.n	8003b60 <HAL_LTDC_EnableDither+0x44>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <HAL_LTDC_EnableDither+0x50>)
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	4a09      	ldr	r2, [pc, #36]	; (8003b6c <HAL_LTDC_EnableDither+0x50>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	40016800 	.word	0x40016800

08003b70 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b089      	sub	sp, #36	; 0x24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	0c1b      	lsrs	r3, r3, #16
 8003b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8c:	4413      	add	r3, r2
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	01db      	lsls	r3, r3, #7
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3384      	adds	r3, #132	; 0x84
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	01d2      	lsls	r2, r2, #7
 8003bac:	440a      	add	r2, r1
 8003bae:	3284      	adds	r2, #132	; 0x84
 8003bb0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003bb4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003bc6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003bc8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	01db      	lsls	r3, r3, #7
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3384      	adds	r3, #132	; 0x84
 8003bd8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003bde:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bee:	4413      	add	r3, r2
 8003bf0:	041b      	lsls	r3, r3, #16
 8003bf2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	01db      	lsls	r3, r3, #7
 8003bfe:	4413      	add	r3, r2
 8003c00:	3384      	adds	r3, #132	; 0x84
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	4611      	mov	r1, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	01d2      	lsls	r2, r2, #7
 8003c0e:	440a      	add	r2, r1
 8003c10:	3284      	adds	r2, #132	; 0x84
 8003c12:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003c16:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c26:	4413      	add	r3, r2
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	01db      	lsls	r3, r3, #7
 8003c34:	440b      	add	r3, r1
 8003c36:	3384      	adds	r3, #132	; 0x84
 8003c38:	4619      	mov	r1, r3
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	01db      	lsls	r3, r3, #7
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3384      	adds	r3, #132	; 0x84
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	4611      	mov	r1, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	01d2      	lsls	r2, r2, #7
 8003c5a:	440a      	add	r2, r1
 8003c5c:	3284      	adds	r2, #132	; 0x84
 8003c5e:	f023 0307 	bic.w	r3, r3, #7
 8003c62:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	01db      	lsls	r3, r3, #7
 8003c6e:	4413      	add	r3, r2
 8003c70:	3384      	adds	r3, #132	; 0x84
 8003c72:	461a      	mov	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c8a:	041b      	lsls	r3, r3, #16
 8003c8c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	061b      	lsls	r3, r3, #24
 8003c94:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	01db      	lsls	r3, r3, #7
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3384      	adds	r3, #132	; 0x84
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	01db      	lsls	r3, r3, #7
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3384      	adds	r3, #132	; 0x84
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	01db      	lsls	r3, r3, #7
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3384      	adds	r3, #132	; 0x84
 8003cd8:	4619      	mov	r1, r3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	01db      	lsls	r3, r3, #7
 8003cea:	4413      	add	r3, r2
 8003cec:	3384      	adds	r3, #132	; 0x84
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	01d2      	lsls	r2, r2, #7
 8003cfa:	440a      	add	r2, r1
 8003cfc:	3284      	adds	r2, #132	; 0x84
 8003cfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d02:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	01db      	lsls	r3, r3, #7
 8003d0e:	4413      	add	r3, r2
 8003d10:	3384      	adds	r3, #132	; 0x84
 8003d12:	461a      	mov	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	01db      	lsls	r3, r3, #7
 8003d24:	4413      	add	r3, r2
 8003d26:	3384      	adds	r3, #132	; 0x84
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	4611      	mov	r1, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	01d2      	lsls	r2, r2, #7
 8003d34:	440a      	add	r2, r1
 8003d36:	3284      	adds	r2, #132	; 0x84
 8003d38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d3c:	f023 0307 	bic.w	r3, r3, #7
 8003d40:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	69da      	ldr	r2, [r3, #28]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	68f9      	ldr	r1, [r7, #12]
 8003d4c:	6809      	ldr	r1, [r1, #0]
 8003d4e:	4608      	mov	r0, r1
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	01c9      	lsls	r1, r1, #7
 8003d54:	4401      	add	r1, r0
 8003d56:	3184      	adds	r1, #132	; 0x84
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	01db      	lsls	r3, r3, #7
 8003d66:	4413      	add	r3, r2
 8003d68:	3384      	adds	r3, #132	; 0x84
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	461a      	mov	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	01db      	lsls	r3, r3, #7
 8003d76:	4413      	add	r3, r2
 8003d78:	3384      	adds	r3, #132	; 0x84
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	01db      	lsls	r3, r3, #7
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3384      	adds	r3, #132	; 0x84
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003d9e:	2304      	movs	r3, #4
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	e01b      	b.n	8003ddc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d102      	bne.n	8003db2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003dac:	2303      	movs	r3, #3
 8003dae:	61fb      	str	r3, [r7, #28]
 8003db0:	e014      	b.n	8003ddc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d00b      	beq.n	8003dd2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d007      	beq.n	8003dd2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d003      	beq.n	8003dd2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003dce:	2b07      	cmp	r3, #7
 8003dd0:	d102      	bne.n	8003dd8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	e001      	b.n	8003ddc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	01db      	lsls	r3, r3, #7
 8003de6:	4413      	add	r3, r2
 8003de8:	3384      	adds	r3, #132	; 0x84
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	4611      	mov	r1, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	01d2      	lsls	r2, r2, #7
 8003df6:	440a      	add	r2, r1
 8003df8:	3284      	adds	r2, #132	; 0x84
 8003dfa:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	6859      	ldr	r1, [r3, #4]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	1acb      	subs	r3, r1, r3
 8003e16:	69f9      	ldr	r1, [r7, #28]
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003e1e:	68f9      	ldr	r1, [r7, #12]
 8003e20:	6809      	ldr	r1, [r1, #0]
 8003e22:	4608      	mov	r0, r1
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	01c9      	lsls	r1, r1, #7
 8003e28:	4401      	add	r1, r0
 8003e2a:	3184      	adds	r1, #132	; 0x84
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	01db      	lsls	r3, r3, #7
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3384      	adds	r3, #132	; 0x84
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	4611      	mov	r1, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	01d2      	lsls	r2, r2, #7
 8003e4a:	440a      	add	r2, r1
 8003e4c:	3284      	adds	r2, #132	; 0x84
 8003e4e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e52:	f023 0307 	bic.w	r3, r3, #7
 8003e56:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	01db      	lsls	r3, r3, #7
 8003e62:	4413      	add	r3, r2
 8003e64:	3384      	adds	r3, #132	; 0x84
 8003e66:	461a      	mov	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	01db      	lsls	r3, r3, #7
 8003e78:	4413      	add	r3, r2
 8003e7a:	3384      	adds	r3, #132	; 0x84
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	6812      	ldr	r2, [r2, #0]
 8003e82:	4611      	mov	r1, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	01d2      	lsls	r2, r2, #7
 8003e88:	440a      	add	r2, r1
 8003e8a:	3284      	adds	r2, #132	; 0x84
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6013      	str	r3, [r2, #0]
}
 8003e92:	bf00      	nop
 8003e94:	3724      	adds	r7, #36	; 0x24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_PWREx_EnableOverDrive+0x90>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	4a1f      	ldr	r2, [pc, #124]	; (8003f30 <HAL_PWREx_EnableOverDrive+0x90>)
 8003eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eba:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ec6:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <HAL_PWREx_EnableOverDrive+0x94>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ecc:	f7fe fa20 	bl	8002310 <HAL_GetTick>
 8003ed0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ed2:	e009      	b.n	8003ee8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ed4:	f7fe fa1c 	bl	8002310 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ee2:	d901      	bls.n	8003ee8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e01f      	b.n	8003f28 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ee8:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <HAL_PWREx_EnableOverDrive+0x98>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef4:	d1ee      	bne.n	8003ed4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ef6:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003efc:	f7fe fa08 	bl	8002310 <HAL_GetTick>
 8003f00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f02:	e009      	b.n	8003f18 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f04:	f7fe fa04 	bl	8002310 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f12:	d901      	bls.n	8003f18 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e007      	b.n	8003f28 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f18:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f24:	d1ee      	bne.n	8003f04 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40023800 	.word	0x40023800
 8003f34:	420e0040 	.word	0x420e0040
 8003f38:	40007000 	.word	0x40007000
 8003f3c:	420e0044 	.word	0x420e0044

08003f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e267      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d075      	beq.n	800404a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f5e:	4b88      	ldr	r3, [pc, #544]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d00c      	beq.n	8003f84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6a:	4b85      	ldr	r3, [pc, #532]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d112      	bne.n	8003f9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f76:	4b82      	ldr	r3, [pc, #520]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f82:	d10b      	bne.n	8003f9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f84:	4b7e      	ldr	r3, [pc, #504]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d05b      	beq.n	8004048 <HAL_RCC_OscConfig+0x108>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d157      	bne.n	8004048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e242      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa4:	d106      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x74>
 8003fa6:	4b76      	ldr	r3, [pc, #472]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a75      	ldr	r2, [pc, #468]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	e01d      	b.n	8003ff0 <HAL_RCC_OscConfig+0xb0>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x98>
 8003fbe:	4b70      	ldr	r3, [pc, #448]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a6f      	ldr	r2, [pc, #444]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	4b6d      	ldr	r3, [pc, #436]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a6c      	ldr	r2, [pc, #432]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e00b      	b.n	8003ff0 <HAL_RCC_OscConfig+0xb0>
 8003fd8:	4b69      	ldr	r3, [pc, #420]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a68      	ldr	r2, [pc, #416]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	4b66      	ldr	r3, [pc, #408]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a65      	ldr	r2, [pc, #404]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d013      	beq.n	8004020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff8:	f7fe f98a 	bl	8002310 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004000:	f7fe f986 	bl	8002310 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b64      	cmp	r3, #100	; 0x64
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e207      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004012:	4b5b      	ldr	r3, [pc, #364]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0xc0>
 800401e:	e014      	b.n	800404a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fe f976 	bl	8002310 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004028:	f7fe f972 	bl	8002310 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e1f3      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403a:	4b51      	ldr	r3, [pc, #324]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0xe8>
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d063      	beq.n	800411e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004056:	4b4a      	ldr	r3, [pc, #296]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00b      	beq.n	800407a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004062:	4b47      	ldr	r3, [pc, #284]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800406a:	2b08      	cmp	r3, #8
 800406c:	d11c      	bne.n	80040a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800406e:	4b44      	ldr	r3, [pc, #272]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d116      	bne.n	80040a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407a:	4b41      	ldr	r3, [pc, #260]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <HAL_RCC_OscConfig+0x152>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d001      	beq.n	8004092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e1c7      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004092:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4937      	ldr	r1, [pc, #220]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a6:	e03a      	b.n	800411e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d020      	beq.n	80040f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040b0:	4b34      	ldr	r3, [pc, #208]	; (8004184 <HAL_RCC_OscConfig+0x244>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b6:	f7fe f92b 	bl	8002310 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040be:	f7fe f927 	bl	8002310 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e1a8      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d0:	4b2b      	ldr	r3, [pc, #172]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f0      	beq.n	80040be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040dc:	4b28      	ldr	r3, [pc, #160]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4925      	ldr	r1, [pc, #148]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	600b      	str	r3, [r1, #0]
 80040f0:	e015      	b.n	800411e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040f2:	4b24      	ldr	r3, [pc, #144]	; (8004184 <HAL_RCC_OscConfig+0x244>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fe f90a 	bl	8002310 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004100:	f7fe f906 	bl	8002310 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e187      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004112:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d036      	beq.n	8004198 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d016      	beq.n	8004160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004132:	4b15      	ldr	r3, [pc, #84]	; (8004188 <HAL_RCC_OscConfig+0x248>)
 8004134:	2201      	movs	r2, #1
 8004136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004138:	f7fe f8ea 	bl	8002310 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004140:	f7fe f8e6 	bl	8002310 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e167      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8004154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x200>
 800415e:	e01b      	b.n	8004198 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <HAL_RCC_OscConfig+0x248>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004166:	f7fe f8d3 	bl	8002310 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800416c:	e00e      	b.n	800418c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800416e:	f7fe f8cf 	bl	8002310 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d907      	bls.n	800418c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e150      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
 8004180:	40023800 	.word	0x40023800
 8004184:	42470000 	.word	0x42470000
 8004188:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800418c:	4b88      	ldr	r3, [pc, #544]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 800418e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1ea      	bne.n	800416e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 8097 	beq.w	80042d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a6:	2300      	movs	r3, #0
 80041a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041aa:	4b81      	ldr	r3, [pc, #516]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10f      	bne.n	80041d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b6:	2300      	movs	r3, #0
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	4b7d      	ldr	r3, [pc, #500]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	4a7c      	ldr	r2, [pc, #496]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80041c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c4:	6413      	str	r3, [r2, #64]	; 0x40
 80041c6:	4b7a      	ldr	r3, [pc, #488]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d2:	2301      	movs	r3, #1
 80041d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d6:	4b77      	ldr	r3, [pc, #476]	; (80043b4 <HAL_RCC_OscConfig+0x474>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d118      	bne.n	8004214 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041e2:	4b74      	ldr	r3, [pc, #464]	; (80043b4 <HAL_RCC_OscConfig+0x474>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a73      	ldr	r2, [pc, #460]	; (80043b4 <HAL_RCC_OscConfig+0x474>)
 80041e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ee:	f7fe f88f 	bl	8002310 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f6:	f7fe f88b 	bl	8002310 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e10c      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004208:	4b6a      	ldr	r3, [pc, #424]	; (80043b4 <HAL_RCC_OscConfig+0x474>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d106      	bne.n	800422a <HAL_RCC_OscConfig+0x2ea>
 800421c:	4b64      	ldr	r3, [pc, #400]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 800421e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004220:	4a63      	ldr	r2, [pc, #396]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6713      	str	r3, [r2, #112]	; 0x70
 8004228:	e01c      	b.n	8004264 <HAL_RCC_OscConfig+0x324>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b05      	cmp	r3, #5
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0x30c>
 8004232:	4b5f      	ldr	r3, [pc, #380]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	4a5e      	ldr	r2, [pc, #376]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004238:	f043 0304 	orr.w	r3, r3, #4
 800423c:	6713      	str	r3, [r2, #112]	; 0x70
 800423e:	4b5c      	ldr	r3, [pc, #368]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	4a5b      	ldr	r2, [pc, #364]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	6713      	str	r3, [r2, #112]	; 0x70
 800424a:	e00b      	b.n	8004264 <HAL_RCC_OscConfig+0x324>
 800424c:	4b58      	ldr	r3, [pc, #352]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	4a57      	ldr	r2, [pc, #348]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	6713      	str	r3, [r2, #112]	; 0x70
 8004258:	4b55      	ldr	r3, [pc, #340]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	4a54      	ldr	r2, [pc, #336]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 800425e:	f023 0304 	bic.w	r3, r3, #4
 8004262:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d015      	beq.n	8004298 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426c:	f7fe f850 	bl	8002310 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004272:	e00a      	b.n	800428a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004274:	f7fe f84c 	bl	8002310 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e0cb      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428a:	4b49      	ldr	r3, [pc, #292]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0ee      	beq.n	8004274 <HAL_RCC_OscConfig+0x334>
 8004296:	e014      	b.n	80042c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004298:	f7fe f83a 	bl	8002310 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800429e:	e00a      	b.n	80042b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a0:	f7fe f836 	bl	8002310 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e0b5      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b6:	4b3e      	ldr	r3, [pc, #248]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1ee      	bne.n	80042a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042c2:	7dfb      	ldrb	r3, [r7, #23]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d105      	bne.n	80042d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c8:	4b39      	ldr	r3, [pc, #228]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	4a38      	ldr	r2, [pc, #224]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80042ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80a1 	beq.w	8004420 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042de:	4b34      	ldr	r3, [pc, #208]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d05c      	beq.n	80043a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d141      	bne.n	8004376 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f2:	4b31      	ldr	r3, [pc, #196]	; (80043b8 <HAL_RCC_OscConfig+0x478>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f8:	f7fe f80a 	bl	8002310 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004300:	f7fe f806 	bl	8002310 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e087      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004312:	4b27      	ldr	r3, [pc, #156]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69da      	ldr	r2, [r3, #28]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	019b      	lsls	r3, r3, #6
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	085b      	lsrs	r3, r3, #1
 8004336:	3b01      	subs	r3, #1
 8004338:	041b      	lsls	r3, r3, #16
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	061b      	lsls	r3, r3, #24
 8004342:	491b      	ldr	r1, [pc, #108]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004344:	4313      	orrs	r3, r2
 8004346:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004348:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <HAL_RCC_OscConfig+0x478>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434e:	f7fd ffdf 	bl	8002310 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004356:	f7fd ffdb 	bl	8002310 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e05c      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004368:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x416>
 8004374:	e054      	b.n	8004420 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004376:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <HAL_RCC_OscConfig+0x478>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fd ffc8 	bl	8002310 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004384:	f7fd ffc4 	bl	8002310 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e045      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004396:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x444>
 80043a2:	e03d      	b.n	8004420 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e038      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
 80043b0:	40023800 	.word	0x40023800
 80043b4:	40007000 	.word	0x40007000
 80043b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043bc:	4b1b      	ldr	r3, [pc, #108]	; (800442c <HAL_RCC_OscConfig+0x4ec>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d028      	beq.n	800441c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d121      	bne.n	800441c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d11a      	bne.n	800441c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043ec:	4013      	ands	r3, r2
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d111      	bne.n	800441c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	085b      	lsrs	r3, r3, #1
 8004404:	3b01      	subs	r3, #1
 8004406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d107      	bne.n	800441c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40023800 	.word	0x40023800

08004430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e0cc      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004444:	4b68      	ldr	r3, [pc, #416]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d90c      	bls.n	800446c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004452:	4b65      	ldr	r3, [pc, #404]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445a:	4b63      	ldr	r3, [pc, #396]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d001      	beq.n	800446c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0b8      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d020      	beq.n	80044ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004484:	4b59      	ldr	r3, [pc, #356]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4a58      	ldr	r2, [pc, #352]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800448e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800449c:	4b53      	ldr	r3, [pc, #332]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4a52      	ldr	r2, [pc, #328]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a8:	4b50      	ldr	r3, [pc, #320]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	494d      	ldr	r1, [pc, #308]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d044      	beq.n	8004550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d107      	bne.n	80044de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	4b47      	ldr	r3, [pc, #284]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d119      	bne.n	800450e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e07f      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d003      	beq.n	80044ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d107      	bne.n	80044fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ee:	4b3f      	ldr	r3, [pc, #252]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d109      	bne.n	800450e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e06f      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fe:	4b3b      	ldr	r3, [pc, #236]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e067      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800450e:	4b37      	ldr	r3, [pc, #220]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f023 0203 	bic.w	r2, r3, #3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4934      	ldr	r1, [pc, #208]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	4313      	orrs	r3, r2
 800451e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004520:	f7fd fef6 	bl	8002310 <HAL_GetTick>
 8004524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004526:	e00a      	b.n	800453e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004528:	f7fd fef2 	bl	8002310 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f241 3288 	movw	r2, #5000	; 0x1388
 8004536:	4293      	cmp	r3, r2
 8004538:	d901      	bls.n	800453e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e04f      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453e:	4b2b      	ldr	r3, [pc, #172]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 020c 	and.w	r2, r3, #12
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	429a      	cmp	r2, r3
 800454e:	d1eb      	bne.n	8004528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004550:	4b25      	ldr	r3, [pc, #148]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d20c      	bcs.n	8004578 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455e:	4b22      	ldr	r3, [pc, #136]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004566:	4b20      	ldr	r3, [pc, #128]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d001      	beq.n	8004578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e032      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004584:	4b19      	ldr	r3, [pc, #100]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4916      	ldr	r1, [pc, #88]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d009      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	490e      	ldr	r1, [pc, #56]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045b6:	f000 f82d 	bl	8004614 <HAL_RCC_GetSysClockFreq>
 80045ba:	4602      	mov	r2, r0
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	490a      	ldr	r1, [pc, #40]	; (80045f0 <HAL_RCC_ClockConfig+0x1c0>)
 80045c8:	5ccb      	ldrb	r3, [r1, r3]
 80045ca:	fa22 f303 	lsr.w	r3, r2, r3
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 80045d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fd fe56 	bl	8002288 <HAL_InitTick>

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40023c00 	.word	0x40023c00
 80045ec:	40023800 	.word	0x40023800
 80045f0:	08053df8 	.word	0x08053df8
 80045f4:	2000003c 	.word	0x2000003c
 80045f8:	20000040 	.word	0x20000040

080045fc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <HAL_RCC_EnableCSS+0x14>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]
}
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	4247004c 	.word	0x4247004c

08004614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004618:	b094      	sub	sp, #80	; 0x50
 800461a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	647b      	str	r3, [r7, #68]	; 0x44
 8004620:	2300      	movs	r3, #0
 8004622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004624:	2300      	movs	r3, #0
 8004626:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800462c:	4b79      	ldr	r3, [pc, #484]	; (8004814 <HAL_RCC_GetSysClockFreq+0x200>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 030c 	and.w	r3, r3, #12
 8004634:	2b08      	cmp	r3, #8
 8004636:	d00d      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x40>
 8004638:	2b08      	cmp	r3, #8
 800463a:	f200 80e1 	bhi.w	8004800 <HAL_RCC_GetSysClockFreq+0x1ec>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0x34>
 8004642:	2b04      	cmp	r3, #4
 8004644:	d003      	beq.n	800464e <HAL_RCC_GetSysClockFreq+0x3a>
 8004646:	e0db      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004648:	4b73      	ldr	r3, [pc, #460]	; (8004818 <HAL_RCC_GetSysClockFreq+0x204>)
 800464a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800464c:	e0db      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800464e:	4b73      	ldr	r3, [pc, #460]	; (800481c <HAL_RCC_GetSysClockFreq+0x208>)
 8004650:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004652:	e0d8      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004654:	4b6f      	ldr	r3, [pc, #444]	; (8004814 <HAL_RCC_GetSysClockFreq+0x200>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800465c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800465e:	4b6d      	ldr	r3, [pc, #436]	; (8004814 <HAL_RCC_GetSysClockFreq+0x200>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d063      	beq.n	8004732 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800466a:	4b6a      	ldr	r3, [pc, #424]	; (8004814 <HAL_RCC_GetSysClockFreq+0x200>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	099b      	lsrs	r3, r3, #6
 8004670:	2200      	movs	r2, #0
 8004672:	63bb      	str	r3, [r7, #56]	; 0x38
 8004674:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467c:	633b      	str	r3, [r7, #48]	; 0x30
 800467e:	2300      	movs	r3, #0
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
 8004682:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004686:	4622      	mov	r2, r4
 8004688:	462b      	mov	r3, r5
 800468a:	f04f 0000 	mov.w	r0, #0
 800468e:	f04f 0100 	mov.w	r1, #0
 8004692:	0159      	lsls	r1, r3, #5
 8004694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004698:	0150      	lsls	r0, r2, #5
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4621      	mov	r1, r4
 80046a0:	1a51      	subs	r1, r2, r1
 80046a2:	6139      	str	r1, [r7, #16]
 80046a4:	4629      	mov	r1, r5
 80046a6:	eb63 0301 	sbc.w	r3, r3, r1
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046b8:	4659      	mov	r1, fp
 80046ba:	018b      	lsls	r3, r1, #6
 80046bc:	4651      	mov	r1, sl
 80046be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046c2:	4651      	mov	r1, sl
 80046c4:	018a      	lsls	r2, r1, #6
 80046c6:	4651      	mov	r1, sl
 80046c8:	ebb2 0801 	subs.w	r8, r2, r1
 80046cc:	4659      	mov	r1, fp
 80046ce:	eb63 0901 	sbc.w	r9, r3, r1
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046e6:	4690      	mov	r8, r2
 80046e8:	4699      	mov	r9, r3
 80046ea:	4623      	mov	r3, r4
 80046ec:	eb18 0303 	adds.w	r3, r8, r3
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	462b      	mov	r3, r5
 80046f4:	eb49 0303 	adc.w	r3, r9, r3
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004706:	4629      	mov	r1, r5
 8004708:	024b      	lsls	r3, r1, #9
 800470a:	4621      	mov	r1, r4
 800470c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004710:	4621      	mov	r1, r4
 8004712:	024a      	lsls	r2, r1, #9
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
 8004718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800471a:	2200      	movs	r2, #0
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
 800471e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004720:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004724:	f7fb fdbc 	bl	80002a0 <__aeabi_uldivmod>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4613      	mov	r3, r2
 800472e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004730:	e058      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004732:	4b38      	ldr	r3, [pc, #224]	; (8004814 <HAL_RCC_GetSysClockFreq+0x200>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	099b      	lsrs	r3, r3, #6
 8004738:	2200      	movs	r2, #0
 800473a:	4618      	mov	r0, r3
 800473c:	4611      	mov	r1, r2
 800473e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004742:	623b      	str	r3, [r7, #32]
 8004744:	2300      	movs	r3, #0
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
 8004748:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800474c:	4642      	mov	r2, r8
 800474e:	464b      	mov	r3, r9
 8004750:	f04f 0000 	mov.w	r0, #0
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	0159      	lsls	r1, r3, #5
 800475a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800475e:	0150      	lsls	r0, r2, #5
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4641      	mov	r1, r8
 8004766:	ebb2 0a01 	subs.w	sl, r2, r1
 800476a:	4649      	mov	r1, r9
 800476c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800477c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004780:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004784:	ebb2 040a 	subs.w	r4, r2, sl
 8004788:	eb63 050b 	sbc.w	r5, r3, fp
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	00eb      	lsls	r3, r5, #3
 8004796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800479a:	00e2      	lsls	r2, r4, #3
 800479c:	4614      	mov	r4, r2
 800479e:	461d      	mov	r5, r3
 80047a0:	4643      	mov	r3, r8
 80047a2:	18e3      	adds	r3, r4, r3
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	464b      	mov	r3, r9
 80047a8:	eb45 0303 	adc.w	r3, r5, r3
 80047ac:	607b      	str	r3, [r7, #4]
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047ba:	4629      	mov	r1, r5
 80047bc:	028b      	lsls	r3, r1, #10
 80047be:	4621      	mov	r1, r4
 80047c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047c4:	4621      	mov	r1, r4
 80047c6:	028a      	lsls	r2, r1, #10
 80047c8:	4610      	mov	r0, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ce:	2200      	movs	r2, #0
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	61fa      	str	r2, [r7, #28]
 80047d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047d8:	f7fb fd62 	bl	80002a0 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4613      	mov	r3, r2
 80047e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <HAL_RCC_GetSysClockFreq+0x200>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	0c1b      	lsrs	r3, r3, #16
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	3301      	adds	r3, #1
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047fe:	e002      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCC_GetSysClockFreq+0x204>)
 8004802:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004808:	4618      	mov	r0, r3
 800480a:	3750      	adds	r7, #80	; 0x50
 800480c:	46bd      	mov	sp, r7
 800480e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004812:	bf00      	nop
 8004814:	40023800 	.word	0x40023800
 8004818:	00f42400 	.word	0x00f42400
 800481c:	007a1200 	.word	0x007a1200

08004820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004824:	4b03      	ldr	r3, [pc, #12]	; (8004834 <HAL_RCC_GetHCLKFreq+0x14>)
 8004826:	681b      	ldr	r3, [r3, #0]
}
 8004828:	4618      	mov	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	2000003c 	.word	0x2000003c

08004838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800483c:	f7ff fff0 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8004840:	4602      	mov	r2, r0
 8004842:	4b05      	ldr	r3, [pc, #20]	; (8004858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	0a9b      	lsrs	r3, r3, #10
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	4903      	ldr	r1, [pc, #12]	; (800485c <HAL_RCC_GetPCLK1Freq+0x24>)
 800484e:	5ccb      	ldrb	r3, [r1, r3]
 8004850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004854:	4618      	mov	r0, r3
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40023800 	.word	0x40023800
 800485c:	08053e08 	.word	0x08053e08

08004860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004864:	f7ff ffdc 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8004868:	4602      	mov	r2, r0
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	0b5b      	lsrs	r3, r3, #13
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	4903      	ldr	r1, [pc, #12]	; (8004884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004876:	5ccb      	ldrb	r3, [r1, r3]
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40023800 	.word	0x40023800
 8004884:	08053e08 	.word	0x08053e08

08004888 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_RCC_NMI_IRQHandler+0x20>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d104      	bne.n	80048a2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004898:	f000 f80a 	bl	80048b0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800489c:	4b03      	ldr	r3, [pc, #12]	; (80048ac <HAL_RCC_NMI_IRQHandler+0x24>)
 800489e:	2280      	movs	r2, #128	; 0x80
 80048a0:	701a      	strb	r2, [r3, #0]
  }
}
 80048a2:	bf00      	nop
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800
 80048ac:	4002380e 	.word	0x4002380e

080048b0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10b      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d105      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d075      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048f4:	4b91      	ldr	r3, [pc, #580]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048fa:	f7fd fd09 	bl	8002310 <HAL_GetTick>
 80048fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004900:	e008      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004902:	f7fd fd05 	bl	8002310 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e189      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004914:	4b8a      	ldr	r3, [pc, #552]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1f0      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d009      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	019a      	lsls	r2, r3, #6
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	071b      	lsls	r3, r3, #28
 8004938:	4981      	ldr	r1, [pc, #516]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01f      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800494c:	4b7c      	ldr	r3, [pc, #496]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800494e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004952:	0f1b      	lsrs	r3, r3, #28
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	019a      	lsls	r2, r3, #6
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	061b      	lsls	r3, r3, #24
 8004966:	431a      	orrs	r2, r3
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	071b      	lsls	r3, r3, #28
 800496c:	4974      	ldr	r1, [pc, #464]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004974:	4b72      	ldr	r3, [pc, #456]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800497a:	f023 021f 	bic.w	r2, r3, #31
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	3b01      	subs	r3, #1
 8004984:	496e      	ldr	r1, [pc, #440]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00d      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	019a      	lsls	r2, r3, #6
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	061b      	lsls	r3, r3, #24
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	071b      	lsls	r3, r3, #28
 80049ac:	4964      	ldr	r1, [pc, #400]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049b4:	4b61      	ldr	r3, [pc, #388]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049ba:	f7fd fca9 	bl	8002310 <HAL_GetTick>
 80049be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049c0:	e008      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049c2:	f7fd fca5 	bl	8002310 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e129      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049d4:	4b5a      	ldr	r3, [pc, #360]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0f0      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d105      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d079      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049f8:	4b52      	ldr	r3, [pc, #328]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049fe:	f7fd fc87 	bl	8002310 <HAL_GetTick>
 8004a02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a04:	e008      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004a06:	f7fd fc83 	bl	8002310 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e107      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a18:	4b49      	ldr	r3, [pc, #292]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a24:	d0ef      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d020      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a32:	4b43      	ldr	r3, [pc, #268]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	0f1b      	lsrs	r3, r3, #28
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	019a      	lsls	r2, r3, #6
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	061b      	lsls	r3, r3, #24
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	071b      	lsls	r3, r3, #28
 8004a52:	493b      	ldr	r1, [pc, #236]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a5a:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	4934      	ldr	r1, [pc, #208]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01e      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a80:	4b2f      	ldr	r3, [pc, #188]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	0e1b      	lsrs	r3, r3, #24
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	019a      	lsls	r2, r3, #6
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	061b      	lsls	r3, r3, #24
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	071b      	lsls	r3, r3, #28
 8004aa0:	4927      	ldr	r1, [pc, #156]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004aa8:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	4922      	ldr	r1, [pc, #136]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004abe:	4b21      	ldr	r3, [pc, #132]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ac4:	f7fd fc24 	bl	8002310 <HAL_GetTick>
 8004ac8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004acc:	f7fd fc20 	bl	8002310 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e0a4      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ade:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aea:	d1ef      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 808b 	beq.w	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	4a0f      	ldr	r2, [pc, #60]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b08:	6413      	str	r3, [r2, #64]	; 0x40
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b16:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a0b      	ldr	r2, [pc, #44]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b22:	f7fd fbf5 	bl	8002310 <HAL_GetTick>
 8004b26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b28:	e010      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b2a:	f7fd fbf1 	bl	8002310 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d909      	bls.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e075      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004b3c:	42470068 	.word	0x42470068
 8004b40:	40023800 	.word	0x40023800
 8004b44:	42470070 	.word	0x42470070
 8004b48:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b4c:	4b38      	ldr	r3, [pc, #224]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0e8      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b58:	4b36      	ldr	r3, [pc, #216]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d02f      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d028      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b76:	4b2f      	ldr	r3, [pc, #188]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b80:	4b2d      	ldr	r3, [pc, #180]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b86:	4b2c      	ldr	r3, [pc, #176]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b8c:	4a29      	ldr	r2, [pc, #164]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b92:	4b28      	ldr	r3, [pc, #160]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d114      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b9e:	f7fd fbb7 	bl	8002310 <HAL_GetTick>
 8004ba2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba4:	e00a      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba6:	f7fd fbb3 	bl	8002310 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e035      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bbc:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0ee      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bd4:	d10d      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004bd6:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bea:	4912      	ldr	r1, [pc, #72]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	608b      	str	r3, [r1, #8]
 8004bf0:	e005      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004bf2:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	4a0f      	ldr	r2, [pc, #60]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bf8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bfc:	6093      	str	r3, [r2, #8]
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0a:	490a      	ldr	r1, [pc, #40]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d004      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004c24:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40007000 	.word	0x40007000
 8004c34:	40023800 	.word	0x40023800
 8004c38:	42470e40 	.word	0x42470e40
 8004c3c:	424711e0 	.word	0x424711e0

08004c40 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e066      	b.n	8004d24 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	7f5b      	ldrb	r3, [r3, #29]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fd f88c 	bl	8001d84 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	22ca      	movs	r2, #202	; 0xca
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2253      	movs	r2, #83	; 0x53
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fa45 	bl	8005112 <RTC_EnterInitMode>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d12c      	bne.n	8004cec <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6899      	ldr	r1, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	68d2      	ldr	r2, [r2, #12]
 8004ccc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6919      	ldr	r1, [r3, #16]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	041a      	lsls	r2, r3, #16
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fa4c 	bl	8005180 <RTC_ExitInitMode>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d113      	bne.n	8004d1a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699a      	ldr	r2, [r3, #24]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	22ff      	movs	r2, #255	; 0xff
 8004d20:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	7f1b      	ldrb	r3, [r3, #28]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_RTC_SetTime+0x1c>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e087      	b.n	8004e58 <HAL_RTC_SetTime+0x12c>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2202      	movs	r2, #2
 8004d52:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d126      	bne.n	8004da8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d102      	bne.n	8004d6e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fa29 	bl	80051ca <RTC_ByteToBcd2>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fa22 	bl	80051ca <RTC_ByteToBcd2>
 8004d86:	4603      	mov	r3, r0
 8004d88:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d8a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	789b      	ldrb	r3, [r3, #2]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fa1a 	bl	80051ca <RTC_ByteToBcd2>
 8004d96:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d98:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	78db      	ldrb	r3, [r3, #3]
 8004da0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]
 8004da6:	e018      	b.n	8004dda <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d102      	bne.n	8004dbc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2200      	movs	r2, #0
 8004dba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004dc8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004dce:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	78db      	ldrb	r3, [r3, #3]
 8004dd4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	22ca      	movs	r2, #202	; 0xca
 8004de0:	625a      	str	r2, [r3, #36]	; 0x24
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2253      	movs	r2, #83	; 0x53
 8004de8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 f991 	bl	8005112 <RTC_EnterInitMode>
 8004df0:	4603      	mov	r3, r0
 8004df2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004df4:	7cfb      	ldrb	r3, [r7, #19]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d120      	bne.n	8004e3c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004e04:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e08:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6899      	ldr	r1, [r3, #8]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 f9a4 	bl	8005180 <RTC_ExitInitMode>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004e3c:	7cfb      	ldrb	r3, [r7, #19]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	22ff      	movs	r2, #255	; 0xff
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	771a      	strb	r2, [r3, #28]

  return status;
 8004e56:	7cfb      	ldrb	r3, [r7, #19]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	371c      	adds	r7, #28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd90      	pop	{r4, r7, pc}

08004e60 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004e92:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e96:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	0c1b      	lsrs	r3, r3, #16
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	0d9b      	lsrs	r3, r3, #22
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d11a      	bne.n	8004f12 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 f98f 	bl	8005204 <RTC_Bcd2ToByte>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	461a      	mov	r2, r3
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	785b      	ldrb	r3, [r3, #1]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 f986 	bl	8005204 <RTC_Bcd2ToByte>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	461a      	mov	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	789b      	ldrb	r3, [r3, #2]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 f97d 	bl	8005204 <RTC_Bcd2ToByte>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f1c:	b590      	push	{r4, r7, lr}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	7f1b      	ldrb	r3, [r3, #28]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_RTC_SetDate+0x1c>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e071      	b.n	800501c <HAL_RTC_SetDate+0x100>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2202      	movs	r2, #2
 8004f42:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10e      	bne.n	8004f68 <HAL_RTC_SetDate+0x4c>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	785b      	ldrb	r3, [r3, #1]
 8004f4e:	f003 0310 	and.w	r3, r3, #16
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d008      	beq.n	8004f68 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	f023 0310 	bic.w	r3, r3, #16
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	330a      	adds	r3, #10
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d11c      	bne.n	8004fa8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	78db      	ldrb	r3, [r3, #3]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 f929 	bl	80051ca <RTC_ByteToBcd2>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	785b      	ldrb	r3, [r3, #1]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 f922 	bl	80051ca <RTC_ByteToBcd2>
 8004f86:	4603      	mov	r3, r0
 8004f88:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f8a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	789b      	ldrb	r3, [r3, #2]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 f91a 	bl	80051ca <RTC_ByteToBcd2>
 8004f96:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f98:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e00e      	b.n	8004fc6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	78db      	ldrb	r3, [r3, #3]
 8004fac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	785b      	ldrb	r3, [r3, #1]
 8004fb2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fb4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004fba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	22ca      	movs	r2, #202	; 0xca
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2253      	movs	r2, #83	; 0x53
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f89b 	bl	8005112 <RTC_EnterInitMode>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004fe0:	7cfb      	ldrb	r3, [r7, #19]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10c      	bne.n	8005000 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ff0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ff4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f8c2 	bl	8005180 <RTC_ExitInitMode>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005000:	7cfb      	ldrb	r3, [r7, #19]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	22ff      	movs	r2, #255	; 0xff
 8005012:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	771a      	strb	r2, [r3, #28]

  return status;
 800501a:	7cfb      	ldrb	r3, [r7, #19]
}
 800501c:	4618      	mov	r0, r3
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	bd90      	pop	{r4, r7, pc}

08005024 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800503e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005042:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	0c1b      	lsrs	r3, r3, #16
 8005048:	b2da      	uxtb	r2, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	0a1b      	lsrs	r3, r3, #8
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f003 031f 	and.w	r3, r3, #31
 8005058:	b2da      	uxtb	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005066:	b2da      	uxtb	r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	0b5b      	lsrs	r3, r3, #13
 8005070:	b2db      	uxtb	r3, r3
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	b2da      	uxtb	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d11a      	bne.n	80050b8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	78db      	ldrb	r3, [r3, #3]
 8005086:	4618      	mov	r0, r3
 8005088:	f000 f8bc 	bl	8005204 <RTC_Bcd2ToByte>
 800508c:	4603      	mov	r3, r0
 800508e:	461a      	mov	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	785b      	ldrb	r3, [r3, #1]
 8005098:	4618      	mov	r0, r3
 800509a:	f000 f8b3 	bl	8005204 <RTC_Bcd2ToByte>
 800509e:	4603      	mov	r3, r0
 80050a0:	461a      	mov	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	789b      	ldrb	r3, [r3, #2]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f8aa 	bl	8005204 <RTC_Bcd2ToByte>
 80050b0:	4603      	mov	r3, r0
 80050b2:	461a      	mov	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050dc:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050de:	f7fd f917 	bl	8002310 <HAL_GetTick>
 80050e2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050e4:	e009      	b.n	80050fa <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050e6:	f7fd f913 	bl	8002310 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050f4:	d901      	bls.n	80050fa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e007      	b.n	800510a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0ee      	beq.n	80050e6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512c:	2b00      	cmp	r3, #0
 800512e:	d122      	bne.n	8005176 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800513e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005140:	f7fd f8e6 	bl	8002310 <HAL_GetTick>
 8005144:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005146:	e00c      	b.n	8005162 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005148:	f7fd f8e2 	bl	8002310 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005156:	d904      	bls.n	8005162 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2204      	movs	r2, #4
 800515c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d102      	bne.n	8005176 <RTC_EnterInitMode+0x64>
 8005170:	7bfb      	ldrb	r3, [r7, #15]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d1e8      	bne.n	8005148 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005176:	7bfb      	ldrb	r3, [r7, #15]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800519a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10a      	bne.n	80051c0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff ff89 	bl	80050c2 <HAL_RTC_WaitForSynchro>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d004      	beq.n	80051c0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2204      	movs	r2, #4
 80051ba:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	4603      	mov	r3, r0
 80051d2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80051d8:	e005      	b.n	80051e6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	3301      	adds	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	3b0a      	subs	r3, #10
 80051e4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	2b09      	cmp	r3, #9
 80051ea:	d8f6      	bhi.n	80051da <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	b2db      	uxtb	r3, r3
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	091b      	lsrs	r3, r3, #4
 8005216:	b2db      	uxtb	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	0092      	lsls	r2, r2, #2
 800521c:	4413      	add	r3, r2
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	b2da      	uxtb	r2, r3
 800522a:	7bfb      	ldrb	r3, [r7, #15]
 800522c:	4413      	add	r3, r2
 800522e:	b2db      	uxtb	r3, r3
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e025      	b.n	800529c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7fb fad1 	bl	800080c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3304      	adds	r3, #4
 800527a:	4619      	mov	r1, r3
 800527c:	4610      	mov	r0, r2
 800527e:	f001 fc85 	bl	8006b8c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	461a      	mov	r2, r3
 800528c:	6839      	ldr	r1, [r7, #0]
 800528e:	f001 fcda 	bl	8006c46 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80052b6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d101      	bne.n	80052c2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80052be:	2302      	movs	r3, #2
 80052c0:	e021      	b.n	8005306 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d002      	beq.n	80052ce <HAL_SDRAM_SendCommand+0x2a>
 80052c8:	7dfb      	ldrb	r3, [r7, #23]
 80052ca:	2b05      	cmp	r3, #5
 80052cc:	d118      	bne.n	8005300 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 fd1a 	bl	8006d18 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d104      	bne.n	80052f6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2205      	movs	r2, #5
 80052f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80052f4:	e006      	b.n	8005304 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80052fe:	e001      	b.n	8005304 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d101      	bne.n	8005328 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005324:	2302      	movs	r3, #2
 8005326:	e016      	b.n	8005356 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d10f      	bne.n	8005354 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f001 fd25 	bl	8006d92 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	e000      	b.n	8005356 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e07b      	b.n	8005468 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	2b00      	cmp	r3, #0
 8005376:	d108      	bne.n	800538a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005380:	d009      	beq.n	8005396 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	61da      	str	r2, [r3, #28]
 8005388:	e005      	b.n	8005396 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7fc fd47 	bl	8001e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541a:	ea42 0103 	orr.w	r1, r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005422:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	0c1b      	lsrs	r3, r3, #16
 8005434:	f003 0104 	and.w	r1, r3, #4
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	f003 0210 	and.w	r2, r3, #16
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005456:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e01a      	b.n	80054b8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2202      	movs	r2, #2
 8005486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005498:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fc fd1a 	bl	8001ed4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	4613      	mov	r3, r2
 80054ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_SPI_Transmit+0x22>
 80054de:	2302      	movs	r3, #2
 80054e0:	e126      	b.n	8005730 <HAL_SPI_Transmit+0x270>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054ea:	f7fc ff11 	bl	8002310 <HAL_GetTick>
 80054ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d002      	beq.n	8005506 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005500:	2302      	movs	r3, #2
 8005502:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005504:	e10b      	b.n	800571e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <HAL_SPI_Transmit+0x52>
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d102      	bne.n	8005518 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005516:	e102      	b.n	800571e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2203      	movs	r2, #3
 800551c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	88fa      	ldrh	r2, [r7, #6]
 8005530:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	88fa      	ldrh	r2, [r7, #6]
 8005536:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800555e:	d10f      	bne.n	8005580 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800556e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800557e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d007      	beq.n	800559e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800559c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a6:	d14b      	bne.n	8005640 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <HAL_SPI_Transmit+0xf6>
 80055b0:	8afb      	ldrh	r3, [r7, #22]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d13e      	bne.n	8005634 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	881a      	ldrh	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	1c9a      	adds	r2, r3, #2
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055da:	e02b      	b.n	8005634 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d112      	bne.n	8005610 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	881a      	ldrh	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	1c9a      	adds	r2, r3, #2
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	86da      	strh	r2, [r3, #54]	; 0x36
 800560e:	e011      	b.n	8005634 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005610:	f7fc fe7e 	bl	8002310 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d803      	bhi.n	8005628 <HAL_SPI_Transmit+0x168>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005626:	d102      	bne.n	800562e <HAL_SPI_Transmit+0x16e>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d102      	bne.n	8005634 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005632:	e074      	b.n	800571e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ce      	bne.n	80055dc <HAL_SPI_Transmit+0x11c>
 800563e:	e04c      	b.n	80056da <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <HAL_SPI_Transmit+0x18e>
 8005648:	8afb      	ldrh	r3, [r7, #22]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d140      	bne.n	80056d0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	7812      	ldrb	r2, [r2, #0]
 800565a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005674:	e02c      	b.n	80056d0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b02      	cmp	r3, #2
 8005682:	d113      	bne.n	80056ac <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	330c      	adds	r3, #12
 800568e:	7812      	ldrb	r2, [r2, #0]
 8005690:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80056aa:	e011      	b.n	80056d0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ac:	f7fc fe30 	bl	8002310 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d803      	bhi.n	80056c4 <HAL_SPI_Transmit+0x204>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c2:	d102      	bne.n	80056ca <HAL_SPI_Transmit+0x20a>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056ce:	e026      	b.n	800571e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1cd      	bne.n	8005676 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 fbda 	bl	8005e98 <SPI_EndRxTxTransaction>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2220      	movs	r2, #32
 80056ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056f8:	2300      	movs	r3, #0
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	77fb      	strb	r3, [r7, #31]
 800571a:	e000      	b.n	800571e <HAL_SPI_Transmit+0x25e>
  }

error:
 800571c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800572e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3720      	adds	r7, #32
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	4613      	mov	r3, r2
 8005746:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005754:	d112      	bne.n	800577c <HAL_SPI_Receive+0x44>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10e      	bne.n	800577c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2204      	movs	r2, #4
 8005762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005766:	88fa      	ldrh	r2, [r7, #6]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f8f1 	bl	800595a <HAL_SPI_TransmitReceive>
 8005778:	4603      	mov	r3, r0
 800577a:	e0ea      	b.n	8005952 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_SPI_Receive+0x52>
 8005786:	2302      	movs	r3, #2
 8005788:	e0e3      	b.n	8005952 <HAL_SPI_Receive+0x21a>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005792:	f7fc fdbd 	bl	8002310 <HAL_GetTick>
 8005796:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d002      	beq.n	80057aa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80057a4:	2302      	movs	r3, #2
 80057a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057a8:	e0ca      	b.n	8005940 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_SPI_Receive+0x7e>
 80057b0:	88fb      	ldrh	r3, [r7, #6]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d102      	bne.n	80057bc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057ba:	e0c1      	b.n	8005940 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2204      	movs	r2, #4
 80057c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	88fa      	ldrh	r2, [r7, #6]
 80057d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	88fa      	ldrh	r2, [r7, #6]
 80057da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005802:	d10f      	bne.n	8005824 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005812:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005822:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582e:	2b40      	cmp	r3, #64	; 0x40
 8005830:	d007      	beq.n	8005842 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005840:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d162      	bne.n	8005910 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800584a:	e02e      	b.n	80058aa <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b01      	cmp	r3, #1
 8005858:	d115      	bne.n	8005886 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f103 020c 	add.w	r2, r3, #12
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005866:	7812      	ldrb	r2, [r2, #0]
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800587a:	b29b      	uxth	r3, r3
 800587c:	3b01      	subs	r3, #1
 800587e:	b29a      	uxth	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005884:	e011      	b.n	80058aa <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005886:	f7fc fd43 	bl	8002310 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d803      	bhi.n	800589e <HAL_SPI_Receive+0x166>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589c:	d102      	bne.n	80058a4 <HAL_SPI_Receive+0x16c>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d102      	bne.n	80058aa <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058a8:	e04a      	b.n	8005940 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1cb      	bne.n	800584c <HAL_SPI_Receive+0x114>
 80058b4:	e031      	b.n	800591a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d113      	bne.n	80058ec <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	b292      	uxth	r2, r2
 80058d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	1c9a      	adds	r2, r3, #2
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058ea:	e011      	b.n	8005910 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058ec:	f7fc fd10 	bl	8002310 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d803      	bhi.n	8005904 <HAL_SPI_Receive+0x1cc>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d102      	bne.n	800590a <HAL_SPI_Receive+0x1d2>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800590e:	e017      	b.n	8005940 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1cd      	bne.n	80058b6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	6839      	ldr	r1, [r7, #0]
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 fa54 	bl	8005dcc <SPI_EndRxTransaction>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2220      	movs	r2, #32
 800592e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	75fb      	strb	r3, [r7, #23]
 800593c:	e000      	b.n	8005940 <HAL_SPI_Receive+0x208>
  }

error :
 800593e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005950:	7dfb      	ldrb	r3, [r7, #23]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b08c      	sub	sp, #48	; 0x30
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	607a      	str	r2, [r7, #4]
 8005966:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005968:	2301      	movs	r3, #1
 800596a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x26>
 800597c:	2302      	movs	r3, #2
 800597e:	e18a      	b.n	8005c96 <HAL_SPI_TransmitReceive+0x33c>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005988:	f7fc fcc2 	bl	8002310 <HAL_GetTick>
 800598c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800599e:	887b      	ldrh	r3, [r7, #2]
 80059a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d00f      	beq.n	80059ca <HAL_SPI_TransmitReceive+0x70>
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059b0:	d107      	bne.n	80059c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d103      	bne.n	80059c2 <HAL_SPI_TransmitReceive+0x68>
 80059ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d003      	beq.n	80059ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80059c2:	2302      	movs	r3, #2
 80059c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059c8:	e15b      	b.n	8005c82 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_SPI_TransmitReceive+0x82>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_SPI_TransmitReceive+0x82>
 80059d6:	887b      	ldrh	r3, [r7, #2]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d103      	bne.n	80059e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059e2:	e14e      	b.n	8005c82 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d003      	beq.n	80059f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2205      	movs	r2, #5
 80059f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	887a      	ldrh	r2, [r7, #2]
 8005a08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	887a      	ldrh	r2, [r7, #2]
 8005a0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	887a      	ldrh	r2, [r7, #2]
 8005a1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	887a      	ldrh	r2, [r7, #2]
 8005a20:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a38:	2b40      	cmp	r3, #64	; 0x40
 8005a3a:	d007      	beq.n	8005a4c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a54:	d178      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_SPI_TransmitReceive+0x10a>
 8005a5e:	8b7b      	ldrh	r3, [r7, #26]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d166      	bne.n	8005b32 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	881a      	ldrh	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a74:	1c9a      	adds	r2, r3, #2
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a88:	e053      	b.n	8005b32 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d11b      	bne.n	8005ad0 <HAL_SPI_TransmitReceive+0x176>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d016      	beq.n	8005ad0 <HAL_SPI_TransmitReceive+0x176>
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d113      	bne.n	8005ad0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	881a      	ldrh	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	1c9a      	adds	r2, r3, #2
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d119      	bne.n	8005b12 <HAL_SPI_TransmitReceive+0x1b8>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d014      	beq.n	8005b12 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	b292      	uxth	r2, r2
 8005af4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	1c9a      	adds	r2, r3, #2
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	3b01      	subs	r3, #1
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b12:	f7fc fbfd 	bl	8002310 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d807      	bhi.n	8005b32 <HAL_SPI_TransmitReceive+0x1d8>
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d003      	beq.n	8005b32 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b30:	e0a7      	b.n	8005c82 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1a6      	bne.n	8005a8a <HAL_SPI_TransmitReceive+0x130>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1a1      	bne.n	8005a8a <HAL_SPI_TransmitReceive+0x130>
 8005b46:	e07c      	b.n	8005c42 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <HAL_SPI_TransmitReceive+0x1fc>
 8005b50:	8b7b      	ldrh	r3, [r7, #26]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d16b      	bne.n	8005c2e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	330c      	adds	r3, #12
 8005b60:	7812      	ldrb	r2, [r2, #0]
 8005b62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b7c:	e057      	b.n	8005c2e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d11c      	bne.n	8005bc6 <HAL_SPI_TransmitReceive+0x26c>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d017      	beq.n	8005bc6 <HAL_SPI_TransmitReceive+0x26c>
 8005b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d114      	bne.n	8005bc6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	7812      	ldrb	r2, [r2, #0]
 8005ba8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d119      	bne.n	8005c08 <HAL_SPI_TransmitReceive+0x2ae>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d014      	beq.n	8005c08 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c04:	2301      	movs	r3, #1
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c08:	f7fc fb82 	bl	8002310 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d803      	bhi.n	8005c20 <HAL_SPI_TransmitReceive+0x2c6>
 8005c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1e:	d102      	bne.n	8005c26 <HAL_SPI_TransmitReceive+0x2cc>
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d103      	bne.n	8005c2e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c2c:	e029      	b.n	8005c82 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1a2      	bne.n	8005b7e <HAL_SPI_TransmitReceive+0x224>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d19d      	bne.n	8005b7e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f926 	bl	8005e98 <SPI_EndRxTxTransaction>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d006      	beq.n	8005c60 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c5e:	e010      	b.n	8005c82 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10b      	bne.n	8005c80 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c68:	2300      	movs	r3, #0
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	e000      	b.n	8005c82 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3730      	adds	r7, #48	; 0x30
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cac:	b2db      	uxtb	r3, r3
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
	...

08005cbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ccc:	f7fc fb20 	bl	8002310 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	4413      	add	r3, r2
 8005cda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cdc:	f7fc fb18 	bl	8002310 <HAL_GetTick>
 8005ce0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ce2:	4b39      	ldr	r3, [pc, #228]	; (8005dc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	015b      	lsls	r3, r3, #5
 8005ce8:	0d1b      	lsrs	r3, r3, #20
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	fb02 f303 	mul.w	r3, r2, r3
 8005cf0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cf2:	e054      	b.n	8005d9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfa:	d050      	beq.n	8005d9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cfc:	f7fc fb08 	bl	8002310 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d902      	bls.n	8005d12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d13d      	bne.n	8005d8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d2a:	d111      	bne.n	8005d50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d34:	d004      	beq.n	8005d40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3e:	d107      	bne.n	8005d50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d58:	d10f      	bne.n	8005d7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e017      	b.n	8005dbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4013      	ands	r3, r2
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	bf0c      	ite	eq
 8005dae:	2301      	moveq	r3, #1
 8005db0:	2300      	movne	r3, #0
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	79fb      	ldrb	r3, [r7, #7]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d19b      	bne.n	8005cf4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3720      	adds	r7, #32
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	2000003c 	.word	0x2000003c

08005dcc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005de0:	d111      	bne.n	8005e06 <SPI_EndRxTransaction+0x3a>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dea:	d004      	beq.n	8005df6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df4:	d107      	bne.n	8005e06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e04:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e0e:	d12a      	bne.n	8005e66 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e18:	d012      	beq.n	8005e40 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2200      	movs	r2, #0
 8005e22:	2180      	movs	r1, #128	; 0x80
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f7ff ff49 	bl	8005cbc <SPI_WaitFlagStateUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d02d      	beq.n	8005e8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e34:	f043 0220 	orr.w	r2, r3, #32
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e026      	b.n	8005e8e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2200      	movs	r2, #0
 8005e48:	2101      	movs	r1, #1
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f7ff ff36 	bl	8005cbc <SPI_WaitFlagStateUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d01a      	beq.n	8005e8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5a:	f043 0220 	orr.w	r2, r3, #32
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e013      	b.n	8005e8e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2101      	movs	r1, #1
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f7ff ff23 	bl	8005cbc <SPI_WaitFlagStateUntilTimeout>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d007      	beq.n	8005e8c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e80:	f043 0220 	orr.w	r2, r3, #32
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e000      	b.n	8005e8e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ea4:	4b1b      	ldr	r3, [pc, #108]	; (8005f14 <SPI_EndRxTxTransaction+0x7c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1b      	ldr	r2, [pc, #108]	; (8005f18 <SPI_EndRxTxTransaction+0x80>)
 8005eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005eae:	0d5b      	lsrs	r3, r3, #21
 8005eb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005eb4:	fb02 f303 	mul.w	r3, r2, r3
 8005eb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ec2:	d112      	bne.n	8005eea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2180      	movs	r1, #128	; 0x80
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f7ff fef4 	bl	8005cbc <SPI_WaitFlagStateUntilTimeout>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d016      	beq.n	8005f08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ede:	f043 0220 	orr.w	r2, r3, #32
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e00f      	b.n	8005f0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f00:	2b80      	cmp	r3, #128	; 0x80
 8005f02:	d0f2      	beq.n	8005eea <SPI_EndRxTxTransaction+0x52>
 8005f04:	e000      	b.n	8005f08 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f06:	bf00      	nop
  }

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	2000003c 	.word	0x2000003c
 8005f18:	165e9f81 	.word	0x165e9f81

08005f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e041      	b.n	8005fb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fc f8c0 	bl	80020c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	f000 f896 	bl	800608c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d001      	beq.n	8005fd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e046      	b.n	8006062 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a23      	ldr	r2, [pc, #140]	; (8006070 <HAL_TIM_Base_Start+0xb4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d022      	beq.n	800602c <HAL_TIM_Base_Start+0x70>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fee:	d01d      	beq.n	800602c <HAL_TIM_Base_Start+0x70>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a1f      	ldr	r2, [pc, #124]	; (8006074 <HAL_TIM_Base_Start+0xb8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d018      	beq.n	800602c <HAL_TIM_Base_Start+0x70>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1e      	ldr	r2, [pc, #120]	; (8006078 <HAL_TIM_Base_Start+0xbc>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d013      	beq.n	800602c <HAL_TIM_Base_Start+0x70>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a1c      	ldr	r2, [pc, #112]	; (800607c <HAL_TIM_Base_Start+0xc0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00e      	beq.n	800602c <HAL_TIM_Base_Start+0x70>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a1b      	ldr	r2, [pc, #108]	; (8006080 <HAL_TIM_Base_Start+0xc4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d009      	beq.n	800602c <HAL_TIM_Base_Start+0x70>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a19      	ldr	r2, [pc, #100]	; (8006084 <HAL_TIM_Base_Start+0xc8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d004      	beq.n	800602c <HAL_TIM_Base_Start+0x70>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a18      	ldr	r2, [pc, #96]	; (8006088 <HAL_TIM_Base_Start+0xcc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d111      	bne.n	8006050 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b06      	cmp	r3, #6
 800603c:	d010      	beq.n	8006060 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0201 	orr.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800604e:	e007      	b.n	8006060 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40010000 	.word	0x40010000
 8006074:	40000400 	.word	0x40000400
 8006078:	40000800 	.word	0x40000800
 800607c:	40000c00 	.word	0x40000c00
 8006080:	40010400 	.word	0x40010400
 8006084:	40014000 	.word	0x40014000
 8006088:	40001800 	.word	0x40001800

0800608c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a40      	ldr	r2, [pc, #256]	; (80061a0 <TIM_Base_SetConfig+0x114>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d013      	beq.n	80060cc <TIM_Base_SetConfig+0x40>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060aa:	d00f      	beq.n	80060cc <TIM_Base_SetConfig+0x40>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a3d      	ldr	r2, [pc, #244]	; (80061a4 <TIM_Base_SetConfig+0x118>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00b      	beq.n	80060cc <TIM_Base_SetConfig+0x40>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a3c      	ldr	r2, [pc, #240]	; (80061a8 <TIM_Base_SetConfig+0x11c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d007      	beq.n	80060cc <TIM_Base_SetConfig+0x40>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a3b      	ldr	r2, [pc, #236]	; (80061ac <TIM_Base_SetConfig+0x120>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d003      	beq.n	80060cc <TIM_Base_SetConfig+0x40>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a3a      	ldr	r2, [pc, #232]	; (80061b0 <TIM_Base_SetConfig+0x124>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d108      	bne.n	80060de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a2f      	ldr	r2, [pc, #188]	; (80061a0 <TIM_Base_SetConfig+0x114>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d02b      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ec:	d027      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a2c      	ldr	r2, [pc, #176]	; (80061a4 <TIM_Base_SetConfig+0x118>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d023      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a2b      	ldr	r2, [pc, #172]	; (80061a8 <TIM_Base_SetConfig+0x11c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d01f      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a2a      	ldr	r2, [pc, #168]	; (80061ac <TIM_Base_SetConfig+0x120>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d01b      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a29      	ldr	r2, [pc, #164]	; (80061b0 <TIM_Base_SetConfig+0x124>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d017      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a28      	ldr	r2, [pc, #160]	; (80061b4 <TIM_Base_SetConfig+0x128>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a27      	ldr	r2, [pc, #156]	; (80061b8 <TIM_Base_SetConfig+0x12c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00f      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a26      	ldr	r2, [pc, #152]	; (80061bc <TIM_Base_SetConfig+0x130>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00b      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a25      	ldr	r2, [pc, #148]	; (80061c0 <TIM_Base_SetConfig+0x134>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d007      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a24      	ldr	r2, [pc, #144]	; (80061c4 <TIM_Base_SetConfig+0x138>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d003      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a23      	ldr	r2, [pc, #140]	; (80061c8 <TIM_Base_SetConfig+0x13c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d108      	bne.n	8006150 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a0a      	ldr	r2, [pc, #40]	; (80061a0 <TIM_Base_SetConfig+0x114>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d003      	beq.n	8006184 <TIM_Base_SetConfig+0xf8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a0c      	ldr	r2, [pc, #48]	; (80061b0 <TIM_Base_SetConfig+0x124>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d103      	bne.n	800618c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	615a      	str	r2, [r3, #20]
}
 8006192:	bf00      	nop
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	40010000 	.word	0x40010000
 80061a4:	40000400 	.word	0x40000400
 80061a8:	40000800 	.word	0x40000800
 80061ac:	40000c00 	.word	0x40000c00
 80061b0:	40010400 	.word	0x40010400
 80061b4:	40014000 	.word	0x40014000
 80061b8:	40014400 	.word	0x40014400
 80061bc:	40014800 	.word	0x40014800
 80061c0:	40001800 	.word	0x40001800
 80061c4:	40001c00 	.word	0x40001c00
 80061c8:	40002000 	.word	0x40002000

080061cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e05a      	b.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a21      	ldr	r2, [pc, #132]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d022      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006230:	d01d      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1d      	ldr	r2, [pc, #116]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d018      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a1b      	ldr	r2, [pc, #108]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d013      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00e      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d009      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a17      	ldr	r2, [pc, #92]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d004      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d10c      	bne.n	8006288 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	4313      	orrs	r3, r2
 800627e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40010000 	.word	0x40010000
 80062ac:	40000400 	.word	0x40000400
 80062b0:	40000800 	.word	0x40000800
 80062b4:	40000c00 	.word	0x40000c00
 80062b8:	40010400 	.word	0x40010400
 80062bc:	40014000 	.word	0x40014000
 80062c0:	40001800 	.word	0x40001800

080062c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e03f      	b.n	8006356 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fb ff38 	bl	8002160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2224      	movs	r2, #36	; 0x24
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f9cb 	bl	80066a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800631c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	695a      	ldr	r2, [r3, #20]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800632c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800633c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2220      	movs	r2, #32
 8006350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b08a      	sub	sp, #40	; 0x28
 8006362:	af02      	add	r7, sp, #8
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	603b      	str	r3, [r7, #0]
 800636a:	4613      	mov	r3, r2
 800636c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b20      	cmp	r3, #32
 800637c:	d17c      	bne.n	8006478 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <HAL_UART_Transmit+0x2c>
 8006384:	88fb      	ldrh	r3, [r7, #6]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e075      	b.n	800647a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_UART_Transmit+0x3e>
 8006398:	2302      	movs	r3, #2
 800639a:	e06e      	b.n	800647a <HAL_UART_Transmit+0x11c>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2221      	movs	r2, #33	; 0x21
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063b2:	f7fb ffad 	bl	8002310 <HAL_GetTick>
 80063b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	88fa      	ldrh	r2, [r7, #6]
 80063bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	88fa      	ldrh	r2, [r7, #6]
 80063c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063cc:	d108      	bne.n	80063e0 <HAL_UART_Transmit+0x82>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d104      	bne.n	80063e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	e003      	b.n	80063e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063f0:	e02a      	b.n	8006448 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2200      	movs	r2, #0
 80063fa:	2180      	movs	r1, #128	; 0x80
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f8e2 	bl	80065c6 <UART_WaitOnFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e036      	b.n	800647a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10b      	bne.n	800642a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006420:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	3302      	adds	r3, #2
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	e007      	b.n	800643a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	781a      	ldrb	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	3301      	adds	r3, #1
 8006438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1cf      	bne.n	80063f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2200      	movs	r2, #0
 800645a:	2140      	movs	r1, #64	; 0x40
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 f8b2 	bl	80065c6 <UART_WaitOnFlagUntilTimeout>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e006      	b.n	800647a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	e000      	b.n	800647a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006478:	2302      	movs	r3, #2
  }
}
 800647a:	4618      	mov	r0, r3
 800647c:	3720      	adds	r7, #32
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b08a      	sub	sp, #40	; 0x28
 8006486:	af02      	add	r7, sp, #8
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	603b      	str	r3, [r7, #0]
 800648e:	4613      	mov	r3, r2
 8006490:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b20      	cmp	r3, #32
 80064a0:	f040 808c 	bne.w	80065bc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <HAL_UART_Receive+0x2e>
 80064aa:	88fb      	ldrh	r3, [r7, #6]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e084      	b.n	80065be <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d101      	bne.n	80064c2 <HAL_UART_Receive+0x40>
 80064be:	2302      	movs	r3, #2
 80064c0:	e07d      	b.n	80065be <HAL_UART_Receive+0x13c>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2222      	movs	r2, #34	; 0x22
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064de:	f7fb ff17 	bl	8002310 <HAL_GetTick>
 80064e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	88fa      	ldrh	r2, [r7, #6]
 80064e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	88fa      	ldrh	r2, [r7, #6]
 80064ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f8:	d108      	bne.n	800650c <HAL_UART_Receive+0x8a>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d104      	bne.n	800650c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006502:	2300      	movs	r3, #0
 8006504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	e003      	b.n	8006514 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006510:	2300      	movs	r3, #0
 8006512:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800651c:	e043      	b.n	80065a6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2200      	movs	r2, #0
 8006526:	2120      	movs	r1, #32
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f84c 	bl	80065c6 <UART_WaitOnFlagUntilTimeout>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e042      	b.n	80065be <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10c      	bne.n	8006558 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654a:	b29a      	uxth	r2, r3
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	3302      	adds	r3, #2
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	e01f      	b.n	8006598 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006560:	d007      	beq.n	8006572 <HAL_UART_Receive+0xf0>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10a      	bne.n	8006580 <HAL_UART_Receive+0xfe>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	b2da      	uxtb	r2, r3
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e008      	b.n	8006592 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800658c:	b2da      	uxtb	r2, r3
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	3301      	adds	r3, #1
 8006596:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1b6      	bne.n	800651e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	e000      	b.n	80065be <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80065bc:	2302      	movs	r3, #2
  }
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3720      	adds	r7, #32
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b090      	sub	sp, #64	; 0x40
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	4613      	mov	r3, r2
 80065d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d6:	e050      	b.n	800667a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065de:	d04c      	beq.n	800667a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80065e6:	f7fb fe93 	bl	8002310 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d241      	bcs.n	800667a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	330c      	adds	r3, #12
 80065fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800660c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	330c      	adds	r3, #12
 8006614:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006616:	637a      	str	r2, [r7, #52]	; 0x34
 8006618:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800661c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e5      	bne.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3314      	adds	r3, #20
 8006630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	613b      	str	r3, [r7, #16]
   return(result);
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f023 0301 	bic.w	r3, r3, #1
 8006640:	63bb      	str	r3, [r7, #56]	; 0x38
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3314      	adds	r3, #20
 8006648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800664a:	623a      	str	r2, [r7, #32]
 800664c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	69f9      	ldr	r1, [r7, #28]
 8006650:	6a3a      	ldr	r2, [r7, #32]
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	61bb      	str	r3, [r7, #24]
   return(result);
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e5      	bne.n	800662a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e00f      	b.n	800669a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4013      	ands	r3, r2
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	429a      	cmp	r2, r3
 8006688:	bf0c      	ite	eq
 800668a:	2301      	moveq	r3, #1
 800668c:	2300      	movne	r3, #0
 800668e:	b2db      	uxtb	r3, r3
 8006690:	461a      	mov	r2, r3
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	429a      	cmp	r2, r3
 8006696:	d09f      	beq.n	80065d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3740      	adds	r7, #64	; 0x40
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a8:	b0c0      	sub	sp, #256	; 0x100
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c0:	68d9      	ldr	r1, [r3, #12]
 80066c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	ea40 0301 	orr.w	r3, r0, r1
 80066cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	431a      	orrs	r2, r3
 80066dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066fc:	f021 010c 	bic.w	r1, r1, #12
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800670a:	430b      	orrs	r3, r1
 800670c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800670e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800671a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671e:	6999      	ldr	r1, [r3, #24]
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	ea40 0301 	orr.w	r3, r0, r1
 800672a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800672c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b8f      	ldr	r3, [pc, #572]	; (8006970 <UART_SetConfig+0x2cc>)
 8006734:	429a      	cmp	r2, r3
 8006736:	d005      	beq.n	8006744 <UART_SetConfig+0xa0>
 8006738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4b8d      	ldr	r3, [pc, #564]	; (8006974 <UART_SetConfig+0x2d0>)
 8006740:	429a      	cmp	r2, r3
 8006742:	d104      	bne.n	800674e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006744:	f7fe f88c 	bl	8004860 <HAL_RCC_GetPCLK2Freq>
 8006748:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800674c:	e003      	b.n	8006756 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800674e:	f7fe f873 	bl	8004838 <HAL_RCC_GetPCLK1Freq>
 8006752:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006760:	f040 810c 	bne.w	800697c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006768:	2200      	movs	r2, #0
 800676a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800676e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006772:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006776:	4622      	mov	r2, r4
 8006778:	462b      	mov	r3, r5
 800677a:	1891      	adds	r1, r2, r2
 800677c:	65b9      	str	r1, [r7, #88]	; 0x58
 800677e:	415b      	adcs	r3, r3
 8006780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006782:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006786:	4621      	mov	r1, r4
 8006788:	eb12 0801 	adds.w	r8, r2, r1
 800678c:	4629      	mov	r1, r5
 800678e:	eb43 0901 	adc.w	r9, r3, r1
 8006792:	f04f 0200 	mov.w	r2, #0
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800679e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067a6:	4690      	mov	r8, r2
 80067a8:	4699      	mov	r9, r3
 80067aa:	4623      	mov	r3, r4
 80067ac:	eb18 0303 	adds.w	r3, r8, r3
 80067b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067b4:	462b      	mov	r3, r5
 80067b6:	eb49 0303 	adc.w	r3, r9, r3
 80067ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067d2:	460b      	mov	r3, r1
 80067d4:	18db      	adds	r3, r3, r3
 80067d6:	653b      	str	r3, [r7, #80]	; 0x50
 80067d8:	4613      	mov	r3, r2
 80067da:	eb42 0303 	adc.w	r3, r2, r3
 80067de:	657b      	str	r3, [r7, #84]	; 0x54
 80067e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067e8:	f7f9 fd5a 	bl	80002a0 <__aeabi_uldivmod>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4b61      	ldr	r3, [pc, #388]	; (8006978 <UART_SetConfig+0x2d4>)
 80067f2:	fba3 2302 	umull	r2, r3, r3, r2
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	011c      	lsls	r4, r3, #4
 80067fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006804:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006808:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800680c:	4642      	mov	r2, r8
 800680e:	464b      	mov	r3, r9
 8006810:	1891      	adds	r1, r2, r2
 8006812:	64b9      	str	r1, [r7, #72]	; 0x48
 8006814:	415b      	adcs	r3, r3
 8006816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006818:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800681c:	4641      	mov	r1, r8
 800681e:	eb12 0a01 	adds.w	sl, r2, r1
 8006822:	4649      	mov	r1, r9
 8006824:	eb43 0b01 	adc.w	fp, r3, r1
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006834:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800683c:	4692      	mov	sl, r2
 800683e:	469b      	mov	fp, r3
 8006840:	4643      	mov	r3, r8
 8006842:	eb1a 0303 	adds.w	r3, sl, r3
 8006846:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800684a:	464b      	mov	r3, r9
 800684c:	eb4b 0303 	adc.w	r3, fp, r3
 8006850:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006860:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006864:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006868:	460b      	mov	r3, r1
 800686a:	18db      	adds	r3, r3, r3
 800686c:	643b      	str	r3, [r7, #64]	; 0x40
 800686e:	4613      	mov	r3, r2
 8006870:	eb42 0303 	adc.w	r3, r2, r3
 8006874:	647b      	str	r3, [r7, #68]	; 0x44
 8006876:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800687a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800687e:	f7f9 fd0f 	bl	80002a0 <__aeabi_uldivmod>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4611      	mov	r1, r2
 8006888:	4b3b      	ldr	r3, [pc, #236]	; (8006978 <UART_SetConfig+0x2d4>)
 800688a:	fba3 2301 	umull	r2, r3, r3, r1
 800688e:	095b      	lsrs	r3, r3, #5
 8006890:	2264      	movs	r2, #100	; 0x64
 8006892:	fb02 f303 	mul.w	r3, r2, r3
 8006896:	1acb      	subs	r3, r1, r3
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800689e:	4b36      	ldr	r3, [pc, #216]	; (8006978 <UART_SetConfig+0x2d4>)
 80068a0:	fba3 2302 	umull	r2, r3, r3, r2
 80068a4:	095b      	lsrs	r3, r3, #5
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068ac:	441c      	add	r4, r3
 80068ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068c0:	4642      	mov	r2, r8
 80068c2:	464b      	mov	r3, r9
 80068c4:	1891      	adds	r1, r2, r2
 80068c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80068c8:	415b      	adcs	r3, r3
 80068ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068d0:	4641      	mov	r1, r8
 80068d2:	1851      	adds	r1, r2, r1
 80068d4:	6339      	str	r1, [r7, #48]	; 0x30
 80068d6:	4649      	mov	r1, r9
 80068d8:	414b      	adcs	r3, r1
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068e8:	4659      	mov	r1, fp
 80068ea:	00cb      	lsls	r3, r1, #3
 80068ec:	4651      	mov	r1, sl
 80068ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068f2:	4651      	mov	r1, sl
 80068f4:	00ca      	lsls	r2, r1, #3
 80068f6:	4610      	mov	r0, r2
 80068f8:	4619      	mov	r1, r3
 80068fa:	4603      	mov	r3, r0
 80068fc:	4642      	mov	r2, r8
 80068fe:	189b      	adds	r3, r3, r2
 8006900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006904:	464b      	mov	r3, r9
 8006906:	460a      	mov	r2, r1
 8006908:	eb42 0303 	adc.w	r3, r2, r3
 800690c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800691c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006924:	460b      	mov	r3, r1
 8006926:	18db      	adds	r3, r3, r3
 8006928:	62bb      	str	r3, [r7, #40]	; 0x28
 800692a:	4613      	mov	r3, r2
 800692c:	eb42 0303 	adc.w	r3, r2, r3
 8006930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006936:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800693a:	f7f9 fcb1 	bl	80002a0 <__aeabi_uldivmod>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <UART_SetConfig+0x2d4>)
 8006944:	fba3 1302 	umull	r1, r3, r3, r2
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	2164      	movs	r1, #100	; 0x64
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	3332      	adds	r3, #50	; 0x32
 8006956:	4a08      	ldr	r2, [pc, #32]	; (8006978 <UART_SetConfig+0x2d4>)
 8006958:	fba2 2303 	umull	r2, r3, r2, r3
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	f003 0207 	and.w	r2, r3, #7
 8006962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4422      	add	r2, r4
 800696a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800696c:	e105      	b.n	8006b7a <UART_SetConfig+0x4d6>
 800696e:	bf00      	nop
 8006970:	40011000 	.word	0x40011000
 8006974:	40011400 	.word	0x40011400
 8006978:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800697c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006980:	2200      	movs	r2, #0
 8006982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006986:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800698a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800698e:	4642      	mov	r2, r8
 8006990:	464b      	mov	r3, r9
 8006992:	1891      	adds	r1, r2, r2
 8006994:	6239      	str	r1, [r7, #32]
 8006996:	415b      	adcs	r3, r3
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
 800699a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800699e:	4641      	mov	r1, r8
 80069a0:	1854      	adds	r4, r2, r1
 80069a2:	4649      	mov	r1, r9
 80069a4:	eb43 0501 	adc.w	r5, r3, r1
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	00eb      	lsls	r3, r5, #3
 80069b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069b6:	00e2      	lsls	r2, r4, #3
 80069b8:	4614      	mov	r4, r2
 80069ba:	461d      	mov	r5, r3
 80069bc:	4643      	mov	r3, r8
 80069be:	18e3      	adds	r3, r4, r3
 80069c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069c4:	464b      	mov	r3, r9
 80069c6:	eb45 0303 	adc.w	r3, r5, r3
 80069ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069ea:	4629      	mov	r1, r5
 80069ec:	008b      	lsls	r3, r1, #2
 80069ee:	4621      	mov	r1, r4
 80069f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069f4:	4621      	mov	r1, r4
 80069f6:	008a      	lsls	r2, r1, #2
 80069f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069fc:	f7f9 fc50 	bl	80002a0 <__aeabi_uldivmod>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4b60      	ldr	r3, [pc, #384]	; (8006b88 <UART_SetConfig+0x4e4>)
 8006a06:	fba3 2302 	umull	r2, r3, r3, r2
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	011c      	lsls	r4, r3, #4
 8006a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a20:	4642      	mov	r2, r8
 8006a22:	464b      	mov	r3, r9
 8006a24:	1891      	adds	r1, r2, r2
 8006a26:	61b9      	str	r1, [r7, #24]
 8006a28:	415b      	adcs	r3, r3
 8006a2a:	61fb      	str	r3, [r7, #28]
 8006a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a30:	4641      	mov	r1, r8
 8006a32:	1851      	adds	r1, r2, r1
 8006a34:	6139      	str	r1, [r7, #16]
 8006a36:	4649      	mov	r1, r9
 8006a38:	414b      	adcs	r3, r1
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	f04f 0300 	mov.w	r3, #0
 8006a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a48:	4659      	mov	r1, fp
 8006a4a:	00cb      	lsls	r3, r1, #3
 8006a4c:	4651      	mov	r1, sl
 8006a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a52:	4651      	mov	r1, sl
 8006a54:	00ca      	lsls	r2, r1, #3
 8006a56:	4610      	mov	r0, r2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	189b      	adds	r3, r3, r2
 8006a60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a64:	464b      	mov	r3, r9
 8006a66:	460a      	mov	r2, r1
 8006a68:	eb42 0303 	adc.w	r3, r2, r3
 8006a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	f04f 0300 	mov.w	r3, #0
 8006a84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a88:	4649      	mov	r1, r9
 8006a8a:	008b      	lsls	r3, r1, #2
 8006a8c:	4641      	mov	r1, r8
 8006a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a92:	4641      	mov	r1, r8
 8006a94:	008a      	lsls	r2, r1, #2
 8006a96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a9a:	f7f9 fc01 	bl	80002a0 <__aeabi_uldivmod>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4b39      	ldr	r3, [pc, #228]	; (8006b88 <UART_SetConfig+0x4e4>)
 8006aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	2164      	movs	r1, #100	; 0x64
 8006aac:	fb01 f303 	mul.w	r3, r1, r3
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	3332      	adds	r3, #50	; 0x32
 8006ab6:	4a34      	ldr	r2, [pc, #208]	; (8006b88 <UART_SetConfig+0x4e4>)
 8006ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ac2:	441c      	add	r4, r3
 8006ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac8:	2200      	movs	r2, #0
 8006aca:	673b      	str	r3, [r7, #112]	; 0x70
 8006acc:	677a      	str	r2, [r7, #116]	; 0x74
 8006ace:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ad2:	4642      	mov	r2, r8
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	1891      	adds	r1, r2, r2
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	415b      	adcs	r3, r3
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ae2:	4641      	mov	r1, r8
 8006ae4:	1851      	adds	r1, r2, r1
 8006ae6:	6039      	str	r1, [r7, #0]
 8006ae8:	4649      	mov	r1, r9
 8006aea:	414b      	adcs	r3, r1
 8006aec:	607b      	str	r3, [r7, #4]
 8006aee:	f04f 0200 	mov.w	r2, #0
 8006af2:	f04f 0300 	mov.w	r3, #0
 8006af6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006afa:	4659      	mov	r1, fp
 8006afc:	00cb      	lsls	r3, r1, #3
 8006afe:	4651      	mov	r1, sl
 8006b00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b04:	4651      	mov	r1, sl
 8006b06:	00ca      	lsls	r2, r1, #3
 8006b08:	4610      	mov	r0, r2
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	4642      	mov	r2, r8
 8006b10:	189b      	adds	r3, r3, r2
 8006b12:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b14:	464b      	mov	r3, r9
 8006b16:	460a      	mov	r2, r1
 8006b18:	eb42 0303 	adc.w	r3, r2, r3
 8006b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	663b      	str	r3, [r7, #96]	; 0x60
 8006b28:	667a      	str	r2, [r7, #100]	; 0x64
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	f04f 0300 	mov.w	r3, #0
 8006b32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b36:	4649      	mov	r1, r9
 8006b38:	008b      	lsls	r3, r1, #2
 8006b3a:	4641      	mov	r1, r8
 8006b3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b40:	4641      	mov	r1, r8
 8006b42:	008a      	lsls	r2, r1, #2
 8006b44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b48:	f7f9 fbaa 	bl	80002a0 <__aeabi_uldivmod>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <UART_SetConfig+0x4e4>)
 8006b52:	fba3 1302 	umull	r1, r3, r3, r2
 8006b56:	095b      	lsrs	r3, r3, #5
 8006b58:	2164      	movs	r1, #100	; 0x64
 8006b5a:	fb01 f303 	mul.w	r3, r1, r3
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	3332      	adds	r3, #50	; 0x32
 8006b64:	4a08      	ldr	r2, [pc, #32]	; (8006b88 <UART_SetConfig+0x4e4>)
 8006b66:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6a:	095b      	lsrs	r3, r3, #5
 8006b6c:	f003 020f 	and.w	r2, r3, #15
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4422      	add	r2, r4
 8006b78:	609a      	str	r2, [r3, #8]
}
 8006b7a:	bf00      	nop
 8006b7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b80:	46bd      	mov	sp, r7
 8006b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b86:	bf00      	nop
 8006b88:	51eb851f 	.word	0x51eb851f

08006b8c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d123      	bne.n	8006be6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006ba6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	6851      	ldr	r1, [r2, #4]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	6892      	ldr	r2, [r2, #8]
 8006bb2:	4311      	orrs	r1, r2
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	68d2      	ldr	r2, [r2, #12]
 8006bb8:	4311      	orrs	r1, r2
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	6912      	ldr	r2, [r2, #16]
 8006bbe:	4311      	orrs	r1, r2
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	6952      	ldr	r2, [r2, #20]
 8006bc4:	4311      	orrs	r1, r2
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	6992      	ldr	r2, [r2, #24]
 8006bca:	4311      	orrs	r1, r2
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	69d2      	ldr	r2, [r2, #28]
 8006bd0:	4311      	orrs	r1, r2
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	6a12      	ldr	r2, [r2, #32]
 8006bd6:	4311      	orrs	r1, r2
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	e028      	b.n	8006c38 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	69d9      	ldr	r1, [r3, #28]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	4319      	orrs	r1, r3
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006c0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	6851      	ldr	r1, [r2, #4]
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	6892      	ldr	r2, [r2, #8]
 8006c18:	4311      	orrs	r1, r2
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	68d2      	ldr	r2, [r2, #12]
 8006c1e:	4311      	orrs	r1, r2
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	6912      	ldr	r2, [r2, #16]
 8006c24:	4311      	orrs	r1, r2
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	6952      	ldr	r2, [r2, #20]
 8006c2a:	4311      	orrs	r1, r2
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	6992      	ldr	r2, [r2, #24]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b085      	sub	sp, #20
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d128      	bne.n	8006caa <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	1e59      	subs	r1, r3, #1
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	4319      	orrs	r1, r3
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	021b      	lsls	r3, r3, #8
 8006c78:	4319      	orrs	r1, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	031b      	lsls	r3, r3, #12
 8006c82:	4319      	orrs	r1, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	041b      	lsls	r3, r3, #16
 8006c8c:	4319      	orrs	r1, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	051b      	lsls	r3, r3, #20
 8006c96:	4319      	orrs	r1, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	061b      	lsls	r3, r3, #24
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	609a      	str	r2, [r3, #8]
 8006ca8:	e02f      	b.n	8006d0a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006cb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	68d2      	ldr	r2, [r2, #12]
 8006cba:	3a01      	subs	r2, #1
 8006cbc:	0311      	lsls	r1, r2, #12
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	6952      	ldr	r2, [r2, #20]
 8006cc2:	3a01      	subs	r2, #1
 8006cc4:	0512      	lsls	r2, r2, #20
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	1e59      	subs	r1, r3, #1
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	4319      	orrs	r1, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	021b      	lsls	r3, r3, #8
 8006cee:	4319      	orrs	r1, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	041b      	lsls	r3, r3, #16
 8006cf8:	4319      	orrs	r1, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	061b      	lsls	r3, r3, #24
 8006d02:	430b      	orrs	r3, r1
 8006d04:	431a      	orrs	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	0d9b      	lsrs	r3, r3, #22
 8006d2e:	059b      	lsls	r3, r3, #22
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	6811      	ldr	r1, [r2, #0]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	6852      	ldr	r2, [r2, #4]
 8006d38:	4311      	orrs	r1, r2
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	6892      	ldr	r2, [r2, #8]
 8006d3e:	3a01      	subs	r2, #1
 8006d40:	0152      	lsls	r2, r2, #5
 8006d42:	4311      	orrs	r1, r2
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	68d2      	ldr	r2, [r2, #12]
 8006d48:	0252      	lsls	r2, r2, #9
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006d52:	f7fb fadd 	bl	8002310 <HAL_GetTick>
 8006d56:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006d58:	e010      	b.n	8006d7c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d00c      	beq.n	8006d7c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d007      	beq.n	8006d78 <FMC_SDRAM_SendCommand+0x60>
 8006d68:	f7fb fad2 	bl	8002310 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d201      	bcs.n	8006d7c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e006      	b.n	8006d8a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	f003 0320 	and.w	r3, r3, #32
 8006d84:	2b20      	cmp	r3, #32
 8006d86:	d0e8      	beq.n	8006d5a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006da4:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	0052      	lsls	r2, r2, #1
 8006dac:	431a      	orrs	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8006dc4:	f000 fa5c 	bl	8007280 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8006dc8:	20ca      	movs	r0, #202	; 0xca
 8006dca:	f000 f95d 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8006dce:	20c3      	movs	r0, #195	; 0xc3
 8006dd0:	f000 f967 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8006dd4:	2008      	movs	r0, #8
 8006dd6:	f000 f964 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8006dda:	2050      	movs	r0, #80	; 0x50
 8006ddc:	f000 f961 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8006de0:	20cf      	movs	r0, #207	; 0xcf
 8006de2:	f000 f951 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006de6:	2000      	movs	r0, #0
 8006de8:	f000 f95b 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8006dec:	20c1      	movs	r0, #193	; 0xc1
 8006dee:	f000 f958 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8006df2:	2030      	movs	r0, #48	; 0x30
 8006df4:	f000 f955 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8006df8:	20ed      	movs	r0, #237	; 0xed
 8006dfa:	f000 f945 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8006dfe:	2064      	movs	r0, #100	; 0x64
 8006e00:	f000 f94f 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8006e04:	2003      	movs	r0, #3
 8006e06:	f000 f94c 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8006e0a:	2012      	movs	r0, #18
 8006e0c:	f000 f949 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8006e10:	2081      	movs	r0, #129	; 0x81
 8006e12:	f000 f946 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8006e16:	20e8      	movs	r0, #232	; 0xe8
 8006e18:	f000 f936 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8006e1c:	2085      	movs	r0, #133	; 0x85
 8006e1e:	f000 f940 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006e22:	2000      	movs	r0, #0
 8006e24:	f000 f93d 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8006e28:	2078      	movs	r0, #120	; 0x78
 8006e2a:	f000 f93a 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8006e2e:	20cb      	movs	r0, #203	; 0xcb
 8006e30:	f000 f92a 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8006e34:	2039      	movs	r0, #57	; 0x39
 8006e36:	f000 f934 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8006e3a:	202c      	movs	r0, #44	; 0x2c
 8006e3c:	f000 f931 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006e40:	2000      	movs	r0, #0
 8006e42:	f000 f92e 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8006e46:	2034      	movs	r0, #52	; 0x34
 8006e48:	f000 f92b 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8006e4c:	2002      	movs	r0, #2
 8006e4e:	f000 f928 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8006e52:	20f7      	movs	r0, #247	; 0xf7
 8006e54:	f000 f918 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8006e58:	2020      	movs	r0, #32
 8006e5a:	f000 f922 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8006e5e:	20ea      	movs	r0, #234	; 0xea
 8006e60:	f000 f912 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006e64:	2000      	movs	r0, #0
 8006e66:	f000 f91c 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	f000 f919 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8006e70:	20b1      	movs	r0, #177	; 0xb1
 8006e72:	f000 f909 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006e76:	2000      	movs	r0, #0
 8006e78:	f000 f913 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8006e7c:	201b      	movs	r0, #27
 8006e7e:	f000 f910 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8006e82:	20b6      	movs	r0, #182	; 0xb6
 8006e84:	f000 f900 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8006e88:	200a      	movs	r0, #10
 8006e8a:	f000 f90a 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8006e8e:	20a2      	movs	r0, #162	; 0xa2
 8006e90:	f000 f907 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8006e94:	20c0      	movs	r0, #192	; 0xc0
 8006e96:	f000 f8f7 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8006e9a:	2010      	movs	r0, #16
 8006e9c:	f000 f901 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8006ea0:	20c1      	movs	r0, #193	; 0xc1
 8006ea2:	f000 f8f1 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8006ea6:	2010      	movs	r0, #16
 8006ea8:	f000 f8fb 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8006eac:	20c5      	movs	r0, #197	; 0xc5
 8006eae:	f000 f8eb 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8006eb2:	2045      	movs	r0, #69	; 0x45
 8006eb4:	f000 f8f5 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8006eb8:	2015      	movs	r0, #21
 8006eba:	f000 f8f2 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8006ebe:	20c7      	movs	r0, #199	; 0xc7
 8006ec0:	f000 f8e2 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8006ec4:	2090      	movs	r0, #144	; 0x90
 8006ec6:	f000 f8ec 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8006eca:	2036      	movs	r0, #54	; 0x36
 8006ecc:	f000 f8dc 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8006ed0:	20c8      	movs	r0, #200	; 0xc8
 8006ed2:	f000 f8e6 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8006ed6:	20f2      	movs	r0, #242	; 0xf2
 8006ed8:	f000 f8d6 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006edc:	2000      	movs	r0, #0
 8006ede:	f000 f8e0 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8006ee2:	20b0      	movs	r0, #176	; 0xb0
 8006ee4:	f000 f8d0 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8006ee8:	20c2      	movs	r0, #194	; 0xc2
 8006eea:	f000 f8da 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8006eee:	20b6      	movs	r0, #182	; 0xb6
 8006ef0:	f000 f8ca 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8006ef4:	200a      	movs	r0, #10
 8006ef6:	f000 f8d4 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8006efa:	20a7      	movs	r0, #167	; 0xa7
 8006efc:	f000 f8d1 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8006f00:	2027      	movs	r0, #39	; 0x27
 8006f02:	f000 f8ce 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8006f06:	2004      	movs	r0, #4
 8006f08:	f000 f8cb 	bl	80070a2 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8006f0c:	202a      	movs	r0, #42	; 0x2a
 8006f0e:	f000 f8bb 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006f12:	2000      	movs	r0, #0
 8006f14:	f000 f8c5 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006f18:	2000      	movs	r0, #0
 8006f1a:	f000 f8c2 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006f1e:	2000      	movs	r0, #0
 8006f20:	f000 f8bf 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8006f24:	20ef      	movs	r0, #239	; 0xef
 8006f26:	f000 f8bc 	bl	80070a2 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8006f2a:	202b      	movs	r0, #43	; 0x2b
 8006f2c:	f000 f8ac 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006f30:	2000      	movs	r0, #0
 8006f32:	f000 f8b6 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006f36:	2000      	movs	r0, #0
 8006f38:	f000 f8b3 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8006f3c:	2001      	movs	r0, #1
 8006f3e:	f000 f8b0 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8006f42:	203f      	movs	r0, #63	; 0x3f
 8006f44:	f000 f8ad 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8006f48:	20f6      	movs	r0, #246	; 0xf6
 8006f4a:	f000 f89d 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8006f4e:	2001      	movs	r0, #1
 8006f50:	f000 f8a7 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006f54:	2000      	movs	r0, #0
 8006f56:	f000 f8a4 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8006f5a:	2006      	movs	r0, #6
 8006f5c:	f000 f8a1 	bl	80070a2 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8006f60:	202c      	movs	r0, #44	; 0x2c
 8006f62:	f000 f891 	bl	8007088 <ili9341_WriteReg>
  LCD_Delay(200);
 8006f66:	20c8      	movs	r0, #200	; 0xc8
 8006f68:	f000 fa78 	bl	800745c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8006f6c:	2026      	movs	r0, #38	; 0x26
 8006f6e:	f000 f88b 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8006f72:	2001      	movs	r0, #1
 8006f74:	f000 f895 	bl	80070a2 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8006f78:	20e0      	movs	r0, #224	; 0xe0
 8006f7a:	f000 f885 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8006f7e:	200f      	movs	r0, #15
 8006f80:	f000 f88f 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8006f84:	2029      	movs	r0, #41	; 0x29
 8006f86:	f000 f88c 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8006f8a:	2024      	movs	r0, #36	; 0x24
 8006f8c:	f000 f889 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8006f90:	200c      	movs	r0, #12
 8006f92:	f000 f886 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8006f96:	200e      	movs	r0, #14
 8006f98:	f000 f883 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8006f9c:	2009      	movs	r0, #9
 8006f9e:	f000 f880 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8006fa2:	204e      	movs	r0, #78	; 0x4e
 8006fa4:	f000 f87d 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8006fa8:	2078      	movs	r0, #120	; 0x78
 8006faa:	f000 f87a 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8006fae:	203c      	movs	r0, #60	; 0x3c
 8006fb0:	f000 f877 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8006fb4:	2009      	movs	r0, #9
 8006fb6:	f000 f874 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8006fba:	2013      	movs	r0, #19
 8006fbc:	f000 f871 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8006fc0:	2005      	movs	r0, #5
 8006fc2:	f000 f86e 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8006fc6:	2017      	movs	r0, #23
 8006fc8:	f000 f86b 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8006fcc:	2011      	movs	r0, #17
 8006fce:	f000 f868 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	f000 f865 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8006fd8:	20e1      	movs	r0, #225	; 0xe1
 8006fda:	f000 f855 	bl	8007088 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006fde:	2000      	movs	r0, #0
 8006fe0:	f000 f85f 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8006fe4:	2016      	movs	r0, #22
 8006fe6:	f000 f85c 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8006fea:	201b      	movs	r0, #27
 8006fec:	f000 f859 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8006ff0:	2004      	movs	r0, #4
 8006ff2:	f000 f856 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8006ff6:	2011      	movs	r0, #17
 8006ff8:	f000 f853 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8006ffc:	2007      	movs	r0, #7
 8006ffe:	f000 f850 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8007002:	2031      	movs	r0, #49	; 0x31
 8007004:	f000 f84d 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8007008:	2033      	movs	r0, #51	; 0x33
 800700a:	f000 f84a 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800700e:	2042      	movs	r0, #66	; 0x42
 8007010:	f000 f847 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8007014:	2005      	movs	r0, #5
 8007016:	f000 f844 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800701a:	200c      	movs	r0, #12
 800701c:	f000 f841 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8007020:	200a      	movs	r0, #10
 8007022:	f000 f83e 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8007026:	2028      	movs	r0, #40	; 0x28
 8007028:	f000 f83b 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800702c:	202f      	movs	r0, #47	; 0x2f
 800702e:	f000 f838 	bl	80070a2 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8007032:	200f      	movs	r0, #15
 8007034:	f000 f835 	bl	80070a2 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8007038:	2011      	movs	r0, #17
 800703a:	f000 f825 	bl	8007088 <ili9341_WriteReg>
  LCD_Delay(200);
 800703e:	20c8      	movs	r0, #200	; 0xc8
 8007040:	f000 fa0c 	bl	800745c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8007044:	2029      	movs	r0, #41	; 0x29
 8007046:	f000 f81f 	bl	8007088 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800704a:	202c      	movs	r0, #44	; 0x2c
 800704c:	f000 f81c 	bl	8007088 <ili9341_WriteReg>
}
 8007050:	bf00      	nop
 8007052:	bd80      	pop	{r7, pc}

08007054 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8007058:	f000 f912 	bl	8007280 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800705c:	2103      	movs	r1, #3
 800705e:	20d3      	movs	r0, #211	; 0xd3
 8007060:	f000 f82c 	bl	80070bc <ili9341_ReadData>
 8007064:	4603      	mov	r3, r0
 8007066:	b29b      	uxth	r3, r3
}
 8007068:	4618      	mov	r0, r3
 800706a:	bd80      	pop	{r7, pc}

0800706c <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8007070:	2029      	movs	r0, #41	; 0x29
 8007072:	f000 f809 	bl	8007088 <ili9341_WriteReg>
}
 8007076:	bf00      	nop
 8007078:	bd80      	pop	{r7, pc}

0800707a <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800707e:	2028      	movs	r0, #40	; 0x28
 8007080:	f000 f802 	bl	8007088 <ili9341_WriteReg>
}
 8007084:	bf00      	nop
 8007086:	bd80      	pop	{r7, pc}

08007088 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	4603      	mov	r3, r0
 8007090:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8007092:	79fb      	ldrb	r3, [r7, #7]
 8007094:	4618      	mov	r0, r3
 8007096:	f000 f98d 	bl	80073b4 <LCD_IO_WriteReg>
}
 800709a:	bf00      	nop
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	4603      	mov	r3, r0
 80070aa:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80070ac:	88fb      	ldrh	r3, [r7, #6]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 f95e 	bl	8007370 <LCD_IO_WriteData>
}
 80070b4:	bf00      	nop
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	460a      	mov	r2, r1
 80070c6:	80fb      	strh	r3, [r7, #6]
 80070c8:	4613      	mov	r3, r2
 80070ca:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80070cc:	797a      	ldrb	r2, [r7, #5]
 80070ce:	88fb      	ldrh	r3, [r7, #6]
 80070d0:	4611      	mov	r1, r2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 f990 	bl	80073f8 <LCD_IO_ReadData>
 80070d8:	4603      	mov	r3, r0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80070e2:	b480      	push	{r7}
 80070e4:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80070e6:	23f0      	movs	r3, #240	; 0xf0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80070f2:	b480      	push	{r7}
 80070f4:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80070f6:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8007108:	4819      	ldr	r0, [pc, #100]	; (8007170 <SPIx_Init+0x6c>)
 800710a:	f7fe fdc8 	bl	8005c9e <HAL_SPI_GetState>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d12b      	bne.n	800716c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8007114:	4b16      	ldr	r3, [pc, #88]	; (8007170 <SPIx_Init+0x6c>)
 8007116:	4a17      	ldr	r2, [pc, #92]	; (8007174 <SPIx_Init+0x70>)
 8007118:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800711a:	4b15      	ldr	r3, [pc, #84]	; (8007170 <SPIx_Init+0x6c>)
 800711c:	2218      	movs	r2, #24
 800711e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8007120:	4b13      	ldr	r3, [pc, #76]	; (8007170 <SPIx_Init+0x6c>)
 8007122:	2200      	movs	r2, #0
 8007124:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8007126:	4b12      	ldr	r3, [pc, #72]	; (8007170 <SPIx_Init+0x6c>)
 8007128:	2200      	movs	r2, #0
 800712a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800712c:	4b10      	ldr	r3, [pc, #64]	; (8007170 <SPIx_Init+0x6c>)
 800712e:	2200      	movs	r2, #0
 8007130:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8007132:	4b0f      	ldr	r3, [pc, #60]	; (8007170 <SPIx_Init+0x6c>)
 8007134:	2200      	movs	r2, #0
 8007136:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8007138:	4b0d      	ldr	r3, [pc, #52]	; (8007170 <SPIx_Init+0x6c>)
 800713a:	2207      	movs	r2, #7
 800713c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800713e:	4b0c      	ldr	r3, [pc, #48]	; (8007170 <SPIx_Init+0x6c>)
 8007140:	2200      	movs	r2, #0
 8007142:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8007144:	4b0a      	ldr	r3, [pc, #40]	; (8007170 <SPIx_Init+0x6c>)
 8007146:	2200      	movs	r2, #0
 8007148:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800714a:	4b09      	ldr	r3, [pc, #36]	; (8007170 <SPIx_Init+0x6c>)
 800714c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007150:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8007152:	4b07      	ldr	r3, [pc, #28]	; (8007170 <SPIx_Init+0x6c>)
 8007154:	2200      	movs	r2, #0
 8007156:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8007158:	4b05      	ldr	r3, [pc, #20]	; (8007170 <SPIx_Init+0x6c>)
 800715a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800715e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8007160:	4803      	ldr	r0, [pc, #12]	; (8007170 <SPIx_Init+0x6c>)
 8007162:	f000 f853 	bl	800720c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8007166:	4802      	ldr	r0, [pc, #8]	; (8007170 <SPIx_Init+0x6c>)
 8007168:	f7fe f8f9 	bl	800535e <HAL_SPI_Init>
  } 
}
 800716c:	bf00      	nop
 800716e:	bd80      	pop	{r7, pc}
 8007170:	200005d0 	.word	0x200005d0
 8007174:	40015000 	.word	0x40015000

08007178 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	4603      	mov	r3, r0
 8007180:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8007186:	79fb      	ldrb	r3, [r7, #7]
 8007188:	b29a      	uxth	r2, r3
 800718a:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <SPIx_Read+0x38>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f107 0108 	add.w	r1, r7, #8
 8007192:	4808      	ldr	r0, [pc, #32]	; (80071b4 <SPIx_Read+0x3c>)
 8007194:	f7fe fad0 	bl	8005738 <HAL_SPI_Receive>
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80071a2:	f000 f827 	bl	80071f4 <SPIx_Error>
  }
  
  return readvalue;
 80071a6:	68bb      	ldr	r3, [r7, #8]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	200000a0 	.word	0x200000a0
 80071b4:	200005d0 	.word	0x200005d0

080071b8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80071c6:	4b09      	ldr	r3, [pc, #36]	; (80071ec <SPIx_Write+0x34>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	1db9      	adds	r1, r7, #6
 80071cc:	2201      	movs	r2, #1
 80071ce:	4808      	ldr	r0, [pc, #32]	; (80071f0 <SPIx_Write+0x38>)
 80071d0:	f7fe f976 	bl	80054c0 <HAL_SPI_Transmit>
 80071d4:	4603      	mov	r3, r0
 80071d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d001      	beq.n	80071e2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80071de:	f000 f809 	bl	80071f4 <SPIx_Error>
  }
}
 80071e2:	bf00      	nop
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	200000a0 	.word	0x200000a0
 80071f0:	200005d0 	.word	0x200005d0

080071f4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80071f8:	4803      	ldr	r0, [pc, #12]	; (8007208 <SPIx_Error+0x14>)
 80071fa:	f7fe f939 	bl	8005470 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80071fe:	f7ff ff81 	bl	8007104 <SPIx_Init>
}
 8007202:	bf00      	nop
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	200005d0 	.word	0x200005d0

0800720c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08a      	sub	sp, #40	; 0x28
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8007214:	2300      	movs	r3, #0
 8007216:	613b      	str	r3, [r7, #16]
 8007218:	4b17      	ldr	r3, [pc, #92]	; (8007278 <SPIx_MspInit+0x6c>)
 800721a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721c:	4a16      	ldr	r2, [pc, #88]	; (8007278 <SPIx_MspInit+0x6c>)
 800721e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007222:	6453      	str	r3, [r2, #68]	; 0x44
 8007224:	4b14      	ldr	r3, [pc, #80]	; (8007278 <SPIx_MspInit+0x6c>)
 8007226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	4b10      	ldr	r3, [pc, #64]	; (8007278 <SPIx_MspInit+0x6c>)
 8007236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007238:	4a0f      	ldr	r2, [pc, #60]	; (8007278 <SPIx_MspInit+0x6c>)
 800723a:	f043 0320 	orr.w	r3, r3, #32
 800723e:	6313      	str	r3, [r2, #48]	; 0x30
 8007240:	4b0d      	ldr	r3, [pc, #52]	; (8007278 <SPIx_MspInit+0x6c>)
 8007242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800724c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8007250:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8007252:	2302      	movs	r3, #2
 8007254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8007256:	2302      	movs	r3, #2
 8007258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800725a:	2301      	movs	r3, #1
 800725c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800725e:	2305      	movs	r3, #5
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8007262:	f107 0314 	add.w	r3, r7, #20
 8007266:	4619      	mov	r1, r3
 8007268:	4804      	ldr	r0, [pc, #16]	; (800727c <SPIx_MspInit+0x70>)
 800726a:	f7fb fddd 	bl	8002e28 <HAL_GPIO_Init>
}
 800726e:	bf00      	nop
 8007270:	3728      	adds	r7, #40	; 0x28
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	40023800 	.word	0x40023800
 800727c:	40021400 	.word	0x40021400

08007280 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b088      	sub	sp, #32
 8007284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8007286:	4b36      	ldr	r3, [pc, #216]	; (8007360 <LCD_IO_Init+0xe0>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d164      	bne.n	8007358 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800728e:	4b34      	ldr	r3, [pc, #208]	; (8007360 <LCD_IO_Init+0xe0>)
 8007290:	2201      	movs	r2, #1
 8007292:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8007294:	2300      	movs	r3, #0
 8007296:	60bb      	str	r3, [r7, #8]
 8007298:	4b32      	ldr	r3, [pc, #200]	; (8007364 <LCD_IO_Init+0xe4>)
 800729a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729c:	4a31      	ldr	r2, [pc, #196]	; (8007364 <LCD_IO_Init+0xe4>)
 800729e:	f043 0308 	orr.w	r3, r3, #8
 80072a2:	6313      	str	r3, [r2, #48]	; 0x30
 80072a4:	4b2f      	ldr	r3, [pc, #188]	; (8007364 <LCD_IO_Init+0xe4>)
 80072a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a8:	f003 0308 	and.w	r3, r3, #8
 80072ac:	60bb      	str	r3, [r7, #8]
 80072ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80072b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80072b6:	2301      	movs	r3, #1
 80072b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80072be:	2302      	movs	r3, #2
 80072c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80072c2:	f107 030c 	add.w	r3, r7, #12
 80072c6:	4619      	mov	r1, r3
 80072c8:	4827      	ldr	r0, [pc, #156]	; (8007368 <LCD_IO_Init+0xe8>)
 80072ca:	f7fb fdad 	bl	8002e28 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80072ce:	2300      	movs	r3, #0
 80072d0:	607b      	str	r3, [r7, #4]
 80072d2:	4b24      	ldr	r3, [pc, #144]	; (8007364 <LCD_IO_Init+0xe4>)
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	4a23      	ldr	r2, [pc, #140]	; (8007364 <LCD_IO_Init+0xe4>)
 80072d8:	f043 0308 	orr.w	r3, r3, #8
 80072dc:	6313      	str	r3, [r2, #48]	; 0x30
 80072de:	4b21      	ldr	r3, [pc, #132]	; (8007364 <LCD_IO_Init+0xe4>)
 80072e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e2:	f003 0308 	and.w	r3, r3, #8
 80072e6:	607b      	str	r3, [r7, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80072ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80072f0:	2301      	movs	r3, #1
 80072f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80072f4:	2300      	movs	r3, #0
 80072f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80072f8:	2302      	movs	r3, #2
 80072fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80072fc:	f107 030c 	add.w	r3, r7, #12
 8007300:	4619      	mov	r1, r3
 8007302:	4819      	ldr	r0, [pc, #100]	; (8007368 <LCD_IO_Init+0xe8>)
 8007304:	f7fb fd90 	bl	8002e28 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8007308:	2300      	movs	r3, #0
 800730a:	603b      	str	r3, [r7, #0]
 800730c:	4b15      	ldr	r3, [pc, #84]	; (8007364 <LCD_IO_Init+0xe4>)
 800730e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007310:	4a14      	ldr	r2, [pc, #80]	; (8007364 <LCD_IO_Init+0xe4>)
 8007312:	f043 0304 	orr.w	r3, r3, #4
 8007316:	6313      	str	r3, [r2, #48]	; 0x30
 8007318:	4b12      	ldr	r3, [pc, #72]	; (8007364 <LCD_IO_Init+0xe4>)
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	f003 0304 	and.w	r3, r3, #4
 8007320:	603b      	str	r3, [r7, #0]
 8007322:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8007324:	2304      	movs	r3, #4
 8007326:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8007328:	2301      	movs	r3, #1
 800732a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8007330:	2302      	movs	r3, #2
 8007332:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8007334:	f107 030c 	add.w	r3, r7, #12
 8007338:	4619      	mov	r1, r3
 800733a:	480c      	ldr	r0, [pc, #48]	; (800736c <LCD_IO_Init+0xec>)
 800733c:	f7fb fd74 	bl	8002e28 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8007340:	2200      	movs	r2, #0
 8007342:	2104      	movs	r1, #4
 8007344:	4809      	ldr	r0, [pc, #36]	; (800736c <LCD_IO_Init+0xec>)
 8007346:	f7fc f83f 	bl	80033c8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800734a:	2201      	movs	r2, #1
 800734c:	2104      	movs	r1, #4
 800734e:	4807      	ldr	r0, [pc, #28]	; (800736c <LCD_IO_Init+0xec>)
 8007350:	f7fc f83a 	bl	80033c8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8007354:	f7ff fed6 	bl	8007104 <SPIx_Init>
  }
}
 8007358:	bf00      	nop
 800735a:	3720      	adds	r7, #32
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20000628 	.word	0x20000628
 8007364:	40023800 	.word	0x40023800
 8007368:	40020c00 	.word	0x40020c00
 800736c:	40020800 	.word	0x40020800

08007370 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800737a:	2201      	movs	r2, #1
 800737c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007380:	480a      	ldr	r0, [pc, #40]	; (80073ac <LCD_IO_WriteData+0x3c>)
 8007382:	f7fc f821 	bl	80033c8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8007386:	2200      	movs	r2, #0
 8007388:	2104      	movs	r1, #4
 800738a:	4809      	ldr	r0, [pc, #36]	; (80073b0 <LCD_IO_WriteData+0x40>)
 800738c:	f7fc f81c 	bl	80033c8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8007390:	88fb      	ldrh	r3, [r7, #6]
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff ff10 	bl	80071b8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8007398:	2201      	movs	r2, #1
 800739a:	2104      	movs	r1, #4
 800739c:	4804      	ldr	r0, [pc, #16]	; (80073b0 <LCD_IO_WriteData+0x40>)
 800739e:	f7fc f813 	bl	80033c8 <HAL_GPIO_WritePin>
}
 80073a2:	bf00      	nop
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	40020c00 	.word	0x40020c00
 80073b0:	40020800 	.word	0x40020800

080073b4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	4603      	mov	r3, r0
 80073bc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80073be:	2200      	movs	r2, #0
 80073c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073c4:	480a      	ldr	r0, [pc, #40]	; (80073f0 <LCD_IO_WriteReg+0x3c>)
 80073c6:	f7fb ffff 	bl	80033c8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80073ca:	2200      	movs	r2, #0
 80073cc:	2104      	movs	r1, #4
 80073ce:	4809      	ldr	r0, [pc, #36]	; (80073f4 <LCD_IO_WriteReg+0x40>)
 80073d0:	f7fb fffa 	bl	80033c8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80073d4:	79fb      	ldrb	r3, [r7, #7]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff feed 	bl	80071b8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80073de:	2201      	movs	r2, #1
 80073e0:	2104      	movs	r1, #4
 80073e2:	4804      	ldr	r0, [pc, #16]	; (80073f4 <LCD_IO_WriteReg+0x40>)
 80073e4:	f7fb fff0 	bl	80033c8 <HAL_GPIO_WritePin>
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	40020c00 	.word	0x40020c00
 80073f4:	40020800 	.word	0x40020800

080073f8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	460a      	mov	r2, r1
 8007402:	80fb      	strh	r3, [r7, #6]
 8007404:	4613      	mov	r3, r2
 8007406:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800740c:	2200      	movs	r2, #0
 800740e:	2104      	movs	r1, #4
 8007410:	4810      	ldr	r0, [pc, #64]	; (8007454 <LCD_IO_ReadData+0x5c>)
 8007412:	f7fb ffd9 	bl	80033c8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8007416:	2200      	movs	r2, #0
 8007418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800741c:	480e      	ldr	r0, [pc, #56]	; (8007458 <LCD_IO_ReadData+0x60>)
 800741e:	f7fb ffd3 	bl	80033c8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8007422:	88fb      	ldrh	r3, [r7, #6]
 8007424:	4618      	mov	r0, r3
 8007426:	f7ff fec7 	bl	80071b8 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800742a:	797b      	ldrb	r3, [r7, #5]
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff fea3 	bl	8007178 <SPIx_Read>
 8007432:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8007434:	2201      	movs	r2, #1
 8007436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800743a:	4807      	ldr	r0, [pc, #28]	; (8007458 <LCD_IO_ReadData+0x60>)
 800743c:	f7fb ffc4 	bl	80033c8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8007440:	2201      	movs	r2, #1
 8007442:	2104      	movs	r1, #4
 8007444:	4803      	ldr	r0, [pc, #12]	; (8007454 <LCD_IO_ReadData+0x5c>)
 8007446:	f7fb ffbf 	bl	80033c8 <HAL_GPIO_WritePin>
  
  return readvalue;
 800744a:	68fb      	ldr	r3, [r7, #12]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	40020800 	.word	0x40020800
 8007458:	40020c00 	.word	0x40020c00

0800745c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7fa ff5f 	bl	8002328 <HAL_Delay>
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8007478:	4b2d      	ldr	r3, [pc, #180]	; (8007530 <BSP_LCD_Init+0xbc>)
 800747a:	4a2e      	ldr	r2, [pc, #184]	; (8007534 <BSP_LCD_Init+0xc0>)
 800747c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800747e:	4b2c      	ldr	r3, [pc, #176]	; (8007530 <BSP_LCD_Init+0xbc>)
 8007480:	2209      	movs	r2, #9
 8007482:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8007484:	4b2a      	ldr	r3, [pc, #168]	; (8007530 <BSP_LCD_Init+0xbc>)
 8007486:	2201      	movs	r2, #1
 8007488:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800748a:	4b29      	ldr	r3, [pc, #164]	; (8007530 <BSP_LCD_Init+0xbc>)
 800748c:	221d      	movs	r2, #29
 800748e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8007490:	4b27      	ldr	r3, [pc, #156]	; (8007530 <BSP_LCD_Init+0xbc>)
 8007492:	2203      	movs	r2, #3
 8007494:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8007496:	4b26      	ldr	r3, [pc, #152]	; (8007530 <BSP_LCD_Init+0xbc>)
 8007498:	f240 120d 	movw	r2, #269	; 0x10d
 800749c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800749e:	4b24      	ldr	r3, [pc, #144]	; (8007530 <BSP_LCD_Init+0xbc>)
 80074a0:	f240 1243 	movw	r2, #323	; 0x143
 80074a4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80074a6:	4b22      	ldr	r3, [pc, #136]	; (8007530 <BSP_LCD_Init+0xbc>)
 80074a8:	f240 1217 	movw	r2, #279	; 0x117
 80074ac:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80074ae:	4b20      	ldr	r3, [pc, #128]	; (8007530 <BSP_LCD_Init+0xbc>)
 80074b0:	f240 1247 	movw	r2, #327	; 0x147
 80074b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80074b6:	4b1e      	ldr	r3, [pc, #120]	; (8007530 <BSP_LCD_Init+0xbc>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80074be:	4b1c      	ldr	r3, [pc, #112]	; (8007530 <BSP_LCD_Init+0xbc>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80074c6:	4b1a      	ldr	r3, [pc, #104]	; (8007530 <BSP_LCD_Init+0xbc>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80074ce:	4b1a      	ldr	r3, [pc, #104]	; (8007538 <BSP_LCD_Init+0xc4>)
 80074d0:	2208      	movs	r2, #8
 80074d2:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80074d4:	4b18      	ldr	r3, [pc, #96]	; (8007538 <BSP_LCD_Init+0xc4>)
 80074d6:	22c0      	movs	r2, #192	; 0xc0
 80074d8:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80074da:	4b17      	ldr	r3, [pc, #92]	; (8007538 <BSP_LCD_Init+0xc4>)
 80074dc:	2204      	movs	r2, #4
 80074de:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80074e0:	4b15      	ldr	r3, [pc, #84]	; (8007538 <BSP_LCD_Init+0xc4>)
 80074e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80074e6:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80074e8:	4813      	ldr	r0, [pc, #76]	; (8007538 <BSP_LCD_Init+0xc4>)
 80074ea:	f7fd f9e9 	bl	80048c0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80074ee:	4b10      	ldr	r3, [pc, #64]	; (8007530 <BSP_LCD_Init+0xbc>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80074f4:	4b0e      	ldr	r3, [pc, #56]	; (8007530 <BSP_LCD_Init+0xbc>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80074fa:	4b0d      	ldr	r3, [pc, #52]	; (8007530 <BSP_LCD_Init+0xbc>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007500:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <BSP_LCD_Init+0xbc>)
 8007502:	2200      	movs	r2, #0
 8007504:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8007506:	f000 fb6b 	bl	8007be0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800750a:	4809      	ldr	r0, [pc, #36]	; (8007530 <BSP_LCD_Init+0xbc>)
 800750c:	f7fc f936 	bl	800377c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8007510:	4b0a      	ldr	r3, [pc, #40]	; (800753c <BSP_LCD_Init+0xc8>)
 8007512:	4a0b      	ldr	r2, [pc, #44]	; (8007540 <BSP_LCD_Init+0xcc>)
 8007514:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8007516:	4b09      	ldr	r3, [pc, #36]	; (800753c <BSP_LCD_Init+0xc8>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800751e:	f000 fd4d 	bl	8007fbc <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8007522:	4808      	ldr	r0, [pc, #32]	; (8007544 <BSP_LCD_Init+0xd0>)
 8007524:	f000 f8ce 	bl	80076c4 <BSP_LCD_SetFont>

  return LCD_OK;
 8007528:	2300      	movs	r3, #0
}  
 800752a:	4618      	mov	r0, r3
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	2000062c 	.word	0x2000062c
 8007534:	40016800 	.word	0x40016800
 8007538:	20000714 	.word	0x20000714
 800753c:	20000760 	.word	0x20000760
 8007540:	20000068 	.word	0x20000068
 8007544:	20000060 	.word	0x20000060

08007548 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800754c:	4b03      	ldr	r3, [pc, #12]	; (800755c <BSP_LCD_GetXSize+0x14>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007552:	4798      	blx	r3
 8007554:	4603      	mov	r3, r0
}
 8007556:	4618      	mov	r0, r3
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20000760 	.word	0x20000760

08007560 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8007564:	4b03      	ldr	r3, [pc, #12]	; (8007574 <BSP_LCD_GetYSize+0x14>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	4798      	blx	r3
 800756c:	4603      	mov	r3, r0
}
 800756e:	4618      	mov	r0, r3
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	20000760 	.word	0x20000760

08007578 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8007578:	b580      	push	{r7, lr}
 800757a:	b090      	sub	sp, #64	; 0x40
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	6039      	str	r1, [r7, #0]
 8007582:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8007584:	2300      	movs	r3, #0
 8007586:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8007588:	f7ff ffde 	bl	8007548 <BSP_LCD_GetXSize>
 800758c:	4603      	mov	r3, r0
 800758e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8007594:	f7ff ffe4 	bl	8007560 <BSP_LCD_GetYSize>
 8007598:	4603      	mov	r3, r0
 800759a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800759c:	2300      	movs	r3, #0
 800759e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80075a4:	23ff      	movs	r3, #255	; 0xff
 80075a6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80075be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80075c2:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80075c4:	2307      	movs	r3, #7
 80075c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80075c8:	f7ff ffbe 	bl	8007548 <BSP_LCD_GetXSize>
 80075cc:	4603      	mov	r3, r0
 80075ce:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80075d0:	f7ff ffc6 	bl	8007560 <BSP_LCD_GetYSize>
 80075d4:	4603      	mov	r3, r0
 80075d6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80075d8:	88fa      	ldrh	r2, [r7, #6]
 80075da:	f107 030c 	add.w	r3, r7, #12
 80075de:	4619      	mov	r1, r3
 80075e0:	4814      	ldr	r0, [pc, #80]	; (8007634 <BSP_LCD_LayerDefaultInit+0xbc>)
 80075e2:	f7fc fa5d 	bl	8003aa0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80075e6:	88fa      	ldrh	r2, [r7, #6]
 80075e8:	4913      	ldr	r1, [pc, #76]	; (8007638 <BSP_LCD_LayerDefaultInit+0xc0>)
 80075ea:	4613      	mov	r3, r2
 80075ec:	005b      	lsls	r3, r3, #1
 80075ee:	4413      	add	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	440b      	add	r3, r1
 80075f4:	3304      	adds	r3, #4
 80075f6:	f04f 32ff 	mov.w	r2, #4294967295
 80075fa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &LCD_DEFAULT_FONT;
 80075fc:	88fa      	ldrh	r2, [r7, #6]
 80075fe:	490e      	ldr	r1, [pc, #56]	; (8007638 <BSP_LCD_LayerDefaultInit+0xc0>)
 8007600:	4613      	mov	r3, r2
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	3308      	adds	r3, #8
 800760c:	4a0b      	ldr	r2, [pc, #44]	; (800763c <BSP_LCD_LayerDefaultInit+0xc4>)
 800760e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8007610:	88fa      	ldrh	r2, [r7, #6]
 8007612:	4909      	ldr	r1, [pc, #36]	; (8007638 <BSP_LCD_LayerDefaultInit+0xc0>)
 8007614:	4613      	mov	r3, r2
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	440b      	add	r3, r1
 800761e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8007622:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8007624:	4803      	ldr	r0, [pc, #12]	; (8007634 <BSP_LCD_LayerDefaultInit+0xbc>)
 8007626:	f7fc fa79 	bl	8003b1c <HAL_LTDC_EnableDither>
}
 800762a:	bf00      	nop
 800762c:	3740      	adds	r7, #64	; 0x40
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	2000062c 	.word	0x2000062c
 8007638:	20000748 	.word	0x20000748
 800763c:	20000060 	.word	0x20000060

08007640 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8007648:	4a04      	ldr	r2, [pc, #16]	; (800765c <BSP_LCD_SelectLayer+0x1c>)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6013      	str	r3, [r2, #0]
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	20000744 	.word	0x20000744

08007660 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8007668:	4b07      	ldr	r3, [pc, #28]	; (8007688 <BSP_LCD_SetTextColor+0x28>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	4907      	ldr	r1, [pc, #28]	; (800768c <BSP_LCD_SetTextColor+0x2c>)
 800766e:	4613      	mov	r3, r2
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	4413      	add	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	440b      	add	r3, r1
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	601a      	str	r2, [r3, #0]
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	20000744 	.word	0x20000744
 800768c:	20000748 	.word	0x20000748

08007690 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8007698:	4b08      	ldr	r3, [pc, #32]	; (80076bc <BSP_LCD_SetBackColor+0x2c>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	4908      	ldr	r1, [pc, #32]	; (80076c0 <BSP_LCD_SetBackColor+0x30>)
 800769e:	4613      	mov	r3, r2
 80076a0:	005b      	lsls	r3, r3, #1
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	440b      	add	r3, r1
 80076a8:	3304      	adds	r3, #4
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	601a      	str	r2, [r3, #0]
}
 80076ae:	bf00      	nop
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	20000744 	.word	0x20000744
 80076c0:	20000748 	.word	0x20000748

080076c4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80076cc:	4b08      	ldr	r3, [pc, #32]	; (80076f0 <BSP_LCD_SetFont+0x2c>)
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	4908      	ldr	r1, [pc, #32]	; (80076f4 <BSP_LCD_SetFont+0x30>)
 80076d2:	4613      	mov	r3, r2
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	440b      	add	r3, r1
 80076dc:	3308      	adds	r3, #8
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	601a      	str	r2, [r3, #0]
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	20000744 	.word	0x20000744
 80076f4:	20000748 	.word	0x20000748

080076f8 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80076fc:	4b07      	ldr	r3, [pc, #28]	; (800771c <BSP_LCD_GetFont+0x24>)
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	4907      	ldr	r1, [pc, #28]	; (8007720 <BSP_LCD_GetFont+0x28>)
 8007702:	4613      	mov	r3, r2
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	4413      	add	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	440b      	add	r3, r1
 800770c:	3308      	adds	r3, #8
 800770e:	681b      	ldr	r3, [r3, #0]
}
 8007710:	4618      	mov	r0, r3
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	20000744 	.word	0x20000744
 8007720:	20000748 	.word	0x20000748

08007724 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8007724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007726:	b085      	sub	sp, #20
 8007728:	af02      	add	r7, sp, #8
 800772a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800772c:	4b0f      	ldr	r3, [pc, #60]	; (800776c <BSP_LCD_Clear+0x48>)
 800772e:	681c      	ldr	r4, [r3, #0]
 8007730:	4b0e      	ldr	r3, [pc, #56]	; (800776c <BSP_LCD_Clear+0x48>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a0e      	ldr	r2, [pc, #56]	; (8007770 <BSP_LCD_Clear+0x4c>)
 8007736:	2134      	movs	r1, #52	; 0x34
 8007738:	fb01 f303 	mul.w	r3, r1, r3
 800773c:	4413      	add	r3, r2
 800773e:	335c      	adds	r3, #92	; 0x5c
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	461e      	mov	r6, r3
 8007744:	f7ff ff00 	bl	8007548 <BSP_LCD_GetXSize>
 8007748:	4605      	mov	r5, r0
 800774a:	f7ff ff09 	bl	8007560 <BSP_LCD_GetYSize>
 800774e:	4602      	mov	r2, r0
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	9301      	str	r3, [sp, #4]
 8007754:	2300      	movs	r3, #0
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	4613      	mov	r3, r2
 800775a:	462a      	mov	r2, r5
 800775c:	4631      	mov	r1, r6
 800775e:	4620      	mov	r0, r4
 8007760:	f000 fbf4 	bl	8007f4c <FillBuffer>
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800776c:	20000744 	.word	0x20000744
 8007770:	2000062c 	.word	0x2000062c

08007774 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8007774:	b590      	push	{r4, r7, lr}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	80fb      	strh	r3, [r7, #6]
 800777e:	460b      	mov	r3, r1
 8007780:	80bb      	strh	r3, [r7, #4]
 8007782:	4613      	mov	r3, r2
 8007784:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8007786:	4b1b      	ldr	r3, [pc, #108]	; (80077f4 <BSP_LCD_DisplayChar+0x80>)
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	491b      	ldr	r1, [pc, #108]	; (80077f8 <BSP_LCD_DisplayChar+0x84>)
 800778c:	4613      	mov	r3, r2
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	440b      	add	r3, r1
 8007796:	3308      	adds	r3, #8
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	6819      	ldr	r1, [r3, #0]
 800779c:	78fb      	ldrb	r3, [r7, #3]
 800779e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80077a2:	4b14      	ldr	r3, [pc, #80]	; (80077f4 <BSP_LCD_DisplayChar+0x80>)
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	4c14      	ldr	r4, [pc, #80]	; (80077f8 <BSP_LCD_DisplayChar+0x84>)
 80077a8:	4613      	mov	r3, r2
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4423      	add	r3, r4
 80077b2:	3308      	adds	r3, #8
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80077b8:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80077bc:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <BSP_LCD_DisplayChar+0x80>)
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	4c0d      	ldr	r4, [pc, #52]	; (80077f8 <BSP_LCD_DisplayChar+0x84>)
 80077c2:	4613      	mov	r3, r2
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4423      	add	r3, r4
 80077cc:	3308      	adds	r3, #8
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	889b      	ldrh	r3, [r3, #4]
 80077d2:	3307      	adds	r3, #7
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	da00      	bge.n	80077da <BSP_LCD_DisplayChar+0x66>
 80077d8:	3307      	adds	r3, #7
 80077da:	10db      	asrs	r3, r3, #3
 80077dc:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80077e0:	18ca      	adds	r2, r1, r3
 80077e2:	88b9      	ldrh	r1, [r7, #4]
 80077e4:	88fb      	ldrh	r3, [r7, #6]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 faf6 	bl	8007dd8 <DrawChar>
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd90      	pop	{r4, r7, pc}
 80077f4:	20000744 	.word	0x20000744
 80077f8:	20000748 	.word	0x20000748

080077fc <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80077fc:	b5b0      	push	{r4, r5, r7, lr}
 80077fe:	b088      	sub	sp, #32
 8007800:	af00      	add	r7, sp, #0
 8007802:	60ba      	str	r2, [r7, #8]
 8007804:	461a      	mov	r2, r3
 8007806:	4603      	mov	r3, r0
 8007808:	81fb      	strh	r3, [r7, #14]
 800780a:	460b      	mov	r3, r1
 800780c:	81bb      	strh	r3, [r7, #12]
 800780e:	4613      	mov	r3, r2
 8007810:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8007812:	2301      	movs	r3, #1
 8007814:	83fb      	strh	r3, [r7, #30]
 8007816:	2300      	movs	r3, #0
 8007818:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800781a:	2300      	movs	r3, #0
 800781c:	61bb      	str	r3, [r7, #24]
 800781e:	2300      	movs	r3, #0
 8007820:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8007826:	e002      	b.n	800782e <BSP_LCD_DisplayStringAt+0x32>
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	3301      	adds	r3, #1
 800782c:	61bb      	str	r3, [r7, #24]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	617a      	str	r2, [r7, #20]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1f6      	bne.n	8007828 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800783a:	f7ff fe85 	bl	8007548 <BSP_LCD_GetXSize>
 800783e:	4601      	mov	r1, r0
 8007840:	4b4b      	ldr	r3, [pc, #300]	; (8007970 <BSP_LCD_DisplayStringAt+0x174>)
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	484b      	ldr	r0, [pc, #300]	; (8007974 <BSP_LCD_DisplayStringAt+0x178>)
 8007846:	4613      	mov	r3, r2
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	4413      	add	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4403      	add	r3, r0
 8007850:	3308      	adds	r3, #8
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	889b      	ldrh	r3, [r3, #4]
 8007856:	fbb1 f3f3 	udiv	r3, r1, r3
 800785a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800785c:	79fb      	ldrb	r3, [r7, #7]
 800785e:	2b03      	cmp	r3, #3
 8007860:	d01c      	beq.n	800789c <BSP_LCD_DisplayStringAt+0xa0>
 8007862:	2b03      	cmp	r3, #3
 8007864:	dc33      	bgt.n	80078ce <BSP_LCD_DisplayStringAt+0xd2>
 8007866:	2b01      	cmp	r3, #1
 8007868:	d002      	beq.n	8007870 <BSP_LCD_DisplayStringAt+0x74>
 800786a:	2b02      	cmp	r3, #2
 800786c:	d019      	beq.n	80078a2 <BSP_LCD_DisplayStringAt+0xa6>
 800786e:	e02e      	b.n	80078ce <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	1ad1      	subs	r1, r2, r3
 8007876:	4b3e      	ldr	r3, [pc, #248]	; (8007970 <BSP_LCD_DisplayStringAt+0x174>)
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	483e      	ldr	r0, [pc, #248]	; (8007974 <BSP_LCD_DisplayStringAt+0x178>)
 800787c:	4613      	mov	r3, r2
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4403      	add	r3, r0
 8007886:	3308      	adds	r3, #8
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	889b      	ldrh	r3, [r3, #4]
 800788c:	fb01 f303 	mul.w	r3, r1, r3
 8007890:	085b      	lsrs	r3, r3, #1
 8007892:	b29a      	uxth	r2, r3
 8007894:	89fb      	ldrh	r3, [r7, #14]
 8007896:	4413      	add	r3, r2
 8007898:	83fb      	strh	r3, [r7, #30]
      break;
 800789a:	e01b      	b.n	80078d4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 800789c:	89fb      	ldrh	r3, [r7, #14]
 800789e:	83fb      	strh	r3, [r7, #30]
      break;
 80078a0:	e018      	b.n	80078d4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	b299      	uxth	r1, r3
 80078aa:	4b31      	ldr	r3, [pc, #196]	; (8007970 <BSP_LCD_DisplayStringAt+0x174>)
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4831      	ldr	r0, [pc, #196]	; (8007974 <BSP_LCD_DisplayStringAt+0x178>)
 80078b0:	4613      	mov	r3, r2
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4403      	add	r3, r0
 80078ba:	3308      	adds	r3, #8
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	889b      	ldrh	r3, [r3, #4]
 80078c0:	fb11 f303 	smulbb	r3, r1, r3
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	89fb      	ldrh	r3, [r7, #14]
 80078c8:	4413      	add	r3, r2
 80078ca:	83fb      	strh	r3, [r7, #30]
      break;
 80078cc:	e002      	b.n	80078d4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80078ce:	89fb      	ldrh	r3, [r7, #14]
 80078d0:	83fb      	strh	r3, [r7, #30]
      break;
 80078d2:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80078d4:	e01a      	b.n	800790c <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	781a      	ldrb	r2, [r3, #0]
 80078da:	89b9      	ldrh	r1, [r7, #12]
 80078dc:	8bfb      	ldrh	r3, [r7, #30]
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff ff48 	bl	8007774 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80078e4:	4b22      	ldr	r3, [pc, #136]	; (8007970 <BSP_LCD_DisplayStringAt+0x174>)
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	4922      	ldr	r1, [pc, #136]	; (8007974 <BSP_LCD_DisplayStringAt+0x178>)
 80078ea:	4613      	mov	r3, r2
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	440b      	add	r3, r1
 80078f4:	3308      	adds	r3, #8
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	889a      	ldrh	r2, [r3, #4]
 80078fa:	8bfb      	ldrh	r3, [r7, #30]
 80078fc:	4413      	add	r3, r2
 80078fe:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	3301      	adds	r3, #1
 8007904:	60bb      	str	r3, [r7, #8]
    i++;
 8007906:	8bbb      	ldrh	r3, [r7, #28]
 8007908:	3301      	adds	r3, #1
 800790a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	bf14      	ite	ne
 8007914:	2301      	movne	r3, #1
 8007916:	2300      	moveq	r3, #0
 8007918:	b2dc      	uxtb	r4, r3
 800791a:	f7ff fe15 	bl	8007548 <BSP_LCD_GetXSize>
 800791e:	8bb9      	ldrh	r1, [r7, #28]
 8007920:	4b13      	ldr	r3, [pc, #76]	; (8007970 <BSP_LCD_DisplayStringAt+0x174>)
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	4d13      	ldr	r5, [pc, #76]	; (8007974 <BSP_LCD_DisplayStringAt+0x178>)
 8007926:	4613      	mov	r3, r2
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	4413      	add	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	442b      	add	r3, r5
 8007930:	3308      	adds	r3, #8
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	889b      	ldrh	r3, [r3, #4]
 8007936:	fb01 f303 	mul.w	r3, r1, r3
 800793a:	1ac3      	subs	r3, r0, r3
 800793c:	b299      	uxth	r1, r3
 800793e:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <BSP_LCD_DisplayStringAt+0x174>)
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	480c      	ldr	r0, [pc, #48]	; (8007974 <BSP_LCD_DisplayStringAt+0x178>)
 8007944:	4613      	mov	r3, r2
 8007946:	005b      	lsls	r3, r3, #1
 8007948:	4413      	add	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4403      	add	r3, r0
 800794e:	3308      	adds	r3, #8
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	889b      	ldrh	r3, [r3, #4]
 8007954:	4299      	cmp	r1, r3
 8007956:	bf2c      	ite	cs
 8007958:	2301      	movcs	r3, #1
 800795a:	2300      	movcc	r3, #0
 800795c:	b2db      	uxtb	r3, r3
 800795e:	4023      	ands	r3, r4
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1b7      	bne.n	80078d6 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8007966:	bf00      	nop
 8007968:	bf00      	nop
 800796a:	3720      	adds	r7, #32
 800796c:	46bd      	mov	sp, r7
 800796e:	bdb0      	pop	{r4, r5, r7, pc}
 8007970:	20000744 	.word	0x20000744
 8007974:	20000748 	.word	0x20000748

08007978 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	6039      	str	r1, [r7, #0]
 8007982:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8007984:	f7ff feb8 	bl	80076f8 <BSP_LCD_GetFont>
 8007988:	4603      	mov	r3, r0
 800798a:	88db      	ldrh	r3, [r3, #6]
 800798c:	88fa      	ldrh	r2, [r7, #6]
 800798e:	fb12 f303 	smulbb	r3, r2, r3
 8007992:	b299      	uxth	r1, r3
 8007994:	2303      	movs	r3, #3
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	2000      	movs	r0, #0
 800799a:	f7ff ff2f 	bl	80077fc <BSP_LCD_DisplayStringAt>
}
 800799e:	bf00      	nop
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80079a8:	b5b0      	push	{r4, r5, r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	4603      	mov	r3, r0
 80079b0:	80fb      	strh	r3, [r7, #6]
 80079b2:	460b      	mov	r3, r1
 80079b4:	80bb      	strh	r3, [r7, #4]
 80079b6:	4613      	mov	r3, r2
 80079b8:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80079be:	4b16      	ldr	r3, [pc, #88]	; (8007a18 <BSP_LCD_DrawHLine+0x70>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a16      	ldr	r2, [pc, #88]	; (8007a1c <BSP_LCD_DrawHLine+0x74>)
 80079c4:	2134      	movs	r1, #52	; 0x34
 80079c6:	fb01 f303 	mul.w	r3, r1, r3
 80079ca:	4413      	add	r3, r2
 80079cc:	335c      	adds	r3, #92	; 0x5c
 80079ce:	681c      	ldr	r4, [r3, #0]
 80079d0:	f7ff fdba 	bl	8007548 <BSP_LCD_GetXSize>
 80079d4:	4602      	mov	r2, r0
 80079d6:	88bb      	ldrh	r3, [r7, #4]
 80079d8:	fb03 f202 	mul.w	r2, r3, r2
 80079dc:	88fb      	ldrh	r3, [r7, #6]
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4423      	add	r3, r4
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80079e6:	4b0c      	ldr	r3, [pc, #48]	; (8007a18 <BSP_LCD_DrawHLine+0x70>)
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	68f9      	ldr	r1, [r7, #12]
 80079ec:	887c      	ldrh	r4, [r7, #2]
 80079ee:	4b0a      	ldr	r3, [pc, #40]	; (8007a18 <BSP_LCD_DrawHLine+0x70>)
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	4d0b      	ldr	r5, [pc, #44]	; (8007a20 <BSP_LCD_DrawHLine+0x78>)
 80079f4:	4613      	mov	r3, r2
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	442b      	add	r3, r5
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	9301      	str	r3, [sp, #4]
 8007a02:	2300      	movs	r3, #0
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	2301      	movs	r3, #1
 8007a08:	4622      	mov	r2, r4
 8007a0a:	f000 fa9f 	bl	8007f4c <FillBuffer>
}
 8007a0e:	bf00      	nop
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bdb0      	pop	{r4, r5, r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000744 	.word	0x20000744
 8007a1c:	2000062c 	.word	0x2000062c
 8007a20:	20000748 	.word	0x20000748

08007a24 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8007a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af02      	add	r7, sp, #8
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	80fb      	strh	r3, [r7, #6]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	80bb      	strh	r3, [r7, #4]
 8007a32:	4613      	mov	r3, r2
 8007a34:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8007a3a:	4b18      	ldr	r3, [pc, #96]	; (8007a9c <BSP_LCD_DrawVLine+0x78>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a18      	ldr	r2, [pc, #96]	; (8007aa0 <BSP_LCD_DrawVLine+0x7c>)
 8007a40:	2134      	movs	r1, #52	; 0x34
 8007a42:	fb01 f303 	mul.w	r3, r1, r3
 8007a46:	4413      	add	r3, r2
 8007a48:	335c      	adds	r3, #92	; 0x5c
 8007a4a:	681c      	ldr	r4, [r3, #0]
 8007a4c:	f7ff fd7c 	bl	8007548 <BSP_LCD_GetXSize>
 8007a50:	4602      	mov	r2, r0
 8007a52:	88bb      	ldrh	r3, [r7, #4]
 8007a54:	fb03 f202 	mul.w	r2, r3, r2
 8007a58:	88fb      	ldrh	r3, [r7, #6]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4423      	add	r3, r4
 8007a60:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8007a62:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <BSP_LCD_DrawVLine+0x78>)
 8007a64:	681c      	ldr	r4, [r3, #0]
 8007a66:	68fd      	ldr	r5, [r7, #12]
 8007a68:	887e      	ldrh	r6, [r7, #2]
 8007a6a:	f7ff fd6d 	bl	8007548 <BSP_LCD_GetXSize>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	1e59      	subs	r1, r3, #1
 8007a72:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <BSP_LCD_DrawVLine+0x78>)
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	480b      	ldr	r0, [pc, #44]	; (8007aa4 <BSP_LCD_DrawVLine+0x80>)
 8007a78:	4613      	mov	r3, r2
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	4413      	add	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4403      	add	r3, r0
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	9100      	str	r1, [sp, #0]
 8007a88:	4633      	mov	r3, r6
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 fa5c 	bl	8007f4c <FillBuffer>
}
 8007a94:	bf00      	nop
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a9c:	20000744 	.word	0x20000744
 8007aa0:	2000062c 	.word	0x2000062c
 8007aa4:	20000748 	.word	0x20000748

08007aa8 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8007aa8:	b590      	push	{r4, r7, lr}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4604      	mov	r4, r0
 8007ab0:	4608      	mov	r0, r1
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4623      	mov	r3, r4
 8007ab8:	80fb      	strh	r3, [r7, #6]
 8007aba:	4603      	mov	r3, r0
 8007abc:	80bb      	strh	r3, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	807b      	strh	r3, [r7, #2]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8007ac6:	887a      	ldrh	r2, [r7, #2]
 8007ac8:	88b9      	ldrh	r1, [r7, #4]
 8007aca:	88fb      	ldrh	r3, [r7, #6]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7ff ff6b 	bl	80079a8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8007ad2:	88ba      	ldrh	r2, [r7, #4]
 8007ad4:	883b      	ldrh	r3, [r7, #0]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	b299      	uxth	r1, r3
 8007ada:	887a      	ldrh	r2, [r7, #2]
 8007adc:	88fb      	ldrh	r3, [r7, #6]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff ff62 	bl	80079a8 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8007ae4:	883a      	ldrh	r2, [r7, #0]
 8007ae6:	88b9      	ldrh	r1, [r7, #4]
 8007ae8:	88fb      	ldrh	r3, [r7, #6]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff ff9a 	bl	8007a24 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8007af0:	88fa      	ldrh	r2, [r7, #6]
 8007af2:	887b      	ldrh	r3, [r7, #2]
 8007af4:	4413      	add	r3, r2
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	883a      	ldrh	r2, [r7, #0]
 8007afa:	88b9      	ldrh	r1, [r7, #4]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7ff ff91 	bl	8007a24 <BSP_LCD_DrawVLine>
}
 8007b02:	bf00      	nop
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd90      	pop	{r4, r7, pc}
	...

08007b0c <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8007b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b10:	b086      	sub	sp, #24
 8007b12:	af02      	add	r7, sp, #8
 8007b14:	4604      	mov	r4, r0
 8007b16:	4608      	mov	r0, r1
 8007b18:	4611      	mov	r1, r2
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	4623      	mov	r3, r4
 8007b1e:	80fb      	strh	r3, [r7, #6]
 8007b20:	4603      	mov	r3, r0
 8007b22:	80bb      	strh	r3, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	807b      	strh	r3, [r7, #2]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8007b30:	4b20      	ldr	r3, [pc, #128]	; (8007bb4 <BSP_LCD_FillRect+0xa8>)
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	4920      	ldr	r1, [pc, #128]	; (8007bb8 <BSP_LCD_FillRect+0xac>)
 8007b36:	4613      	mov	r3, r2
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	4413      	add	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	440b      	add	r3, r1
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff fd8c 	bl	8007660 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8007b48:	4b1a      	ldr	r3, [pc, #104]	; (8007bb4 <BSP_LCD_FillRect+0xa8>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a1b      	ldr	r2, [pc, #108]	; (8007bbc <BSP_LCD_FillRect+0xb0>)
 8007b4e:	2134      	movs	r1, #52	; 0x34
 8007b50:	fb01 f303 	mul.w	r3, r1, r3
 8007b54:	4413      	add	r3, r2
 8007b56:	335c      	adds	r3, #92	; 0x5c
 8007b58:	681c      	ldr	r4, [r3, #0]
 8007b5a:	f7ff fcf5 	bl	8007548 <BSP_LCD_GetXSize>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	88bb      	ldrh	r3, [r7, #4]
 8007b62:	fb03 f202 	mul.w	r2, r3, r2
 8007b66:	88fb      	ldrh	r3, [r7, #6]
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4423      	add	r3, r4
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8007b70:	4b10      	ldr	r3, [pc, #64]	; (8007bb4 <BSP_LCD_FillRect+0xa8>)
 8007b72:	681c      	ldr	r4, [r3, #0]
 8007b74:	68fd      	ldr	r5, [r7, #12]
 8007b76:	887e      	ldrh	r6, [r7, #2]
 8007b78:	f8b7 8000 	ldrh.w	r8, [r7]
 8007b7c:	f7ff fce4 	bl	8007548 <BSP_LCD_GetXSize>
 8007b80:	4602      	mov	r2, r0
 8007b82:	887b      	ldrh	r3, [r7, #2]
 8007b84:	1ad1      	subs	r1, r2, r3
 8007b86:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <BSP_LCD_FillRect+0xa8>)
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	480b      	ldr	r0, [pc, #44]	; (8007bb8 <BSP_LCD_FillRect+0xac>)
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	005b      	lsls	r3, r3, #1
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4403      	add	r3, r0
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	9301      	str	r3, [sp, #4]
 8007b9a:	9100      	str	r1, [sp, #0]
 8007b9c:	4643      	mov	r3, r8
 8007b9e:	4632      	mov	r2, r6
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f000 f9d2 	bl	8007f4c <FillBuffer>
}
 8007ba8:	bf00      	nop
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000744 	.word	0x20000744
 8007bb8:	20000748 	.word	0x20000748
 8007bbc:	2000062c 	.word	0x2000062c

08007bc0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8007bc4:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <BSP_LCD_DisplayOn+0x1c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8007bce:	4b03      	ldr	r3, [pc, #12]	; (8007bdc <BSP_LCD_DisplayOn+0x1c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	4798      	blx	r3
  }
}
 8007bd6:	bf00      	nop
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20000760 	.word	0x20000760

08007be0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b08e      	sub	sp, #56	; 0x38
 8007be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8007be6:	2300      	movs	r3, #0
 8007be8:	623b      	str	r3, [r7, #32]
 8007bea:	4b61      	ldr	r3, [pc, #388]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bee:	4a60      	ldr	r2, [pc, #384]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007bf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8007bf6:	4b5e      	ldr	r3, [pc, #376]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bfe:	623b      	str	r3, [r7, #32]
 8007c00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8007c02:	2300      	movs	r3, #0
 8007c04:	61fb      	str	r3, [r7, #28]
 8007c06:	4b5a      	ldr	r3, [pc, #360]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0a:	4a59      	ldr	r2, [pc, #356]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c10:	6313      	str	r3, [r2, #48]	; 0x30
 8007c12:	4b57      	ldr	r3, [pc, #348]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c1a:	61fb      	str	r3, [r7, #28]
 8007c1c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61bb      	str	r3, [r7, #24]
 8007c22:	4b53      	ldr	r3, [pc, #332]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c26:	4a52      	ldr	r2, [pc, #328]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c28:	f043 0301 	orr.w	r3, r3, #1
 8007c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c2e:	4b50      	ldr	r3, [pc, #320]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	61bb      	str	r3, [r7, #24]
 8007c38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	4b4c      	ldr	r3, [pc, #304]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c42:	4a4b      	ldr	r2, [pc, #300]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c44:	f043 0302 	orr.w	r3, r3, #2
 8007c48:	6313      	str	r3, [r2, #48]	; 0x30
 8007c4a:	4b49      	ldr	r3, [pc, #292]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	617b      	str	r3, [r7, #20]
 8007c54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c56:	2300      	movs	r3, #0
 8007c58:	613b      	str	r3, [r7, #16]
 8007c5a:	4b45      	ldr	r3, [pc, #276]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5e:	4a44      	ldr	r2, [pc, #272]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c60:	f043 0304 	orr.w	r3, r3, #4
 8007c64:	6313      	str	r3, [r2, #48]	; 0x30
 8007c66:	4b42      	ldr	r3, [pc, #264]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6a:	f003 0304 	and.w	r3, r3, #4
 8007c6e:	613b      	str	r3, [r7, #16]
 8007c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
 8007c76:	4b3e      	ldr	r3, [pc, #248]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7a:	4a3d      	ldr	r2, [pc, #244]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c7c:	f043 0308 	orr.w	r3, r3, #8
 8007c80:	6313      	str	r3, [r2, #48]	; 0x30
 8007c82:	4b3b      	ldr	r3, [pc, #236]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c86:	f003 0308 	and.w	r3, r3, #8
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60bb      	str	r3, [r7, #8]
 8007c92:	4b37      	ldr	r3, [pc, #220]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c96:	4a36      	ldr	r2, [pc, #216]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007c98:	f043 0320 	orr.w	r3, r3, #32
 8007c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c9e:	4b34      	ldr	r3, [pc, #208]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca2:	f003 0320 	and.w	r3, r3, #32
 8007ca6:	60bb      	str	r3, [r7, #8]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007caa:	2300      	movs	r3, #0
 8007cac:	607b      	str	r3, [r7, #4]
 8007cae:	4b30      	ldr	r3, [pc, #192]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb2:	4a2f      	ldr	r2, [pc, #188]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8007cba:	4b2d      	ldr	r3, [pc, #180]	; (8007d70 <BSP_LCD_MspInit+0x190>)
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc2:	607b      	str	r3, [r7, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8007cc6:	f641 0358 	movw	r3, #6232	; 0x1858
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8007ccc:	2302      	movs	r3, #2
 8007cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8007cd8:	230e      	movs	r3, #14
 8007cda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8007cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4824      	ldr	r0, [pc, #144]	; (8007d74 <BSP_LCD_MspInit+0x194>)
 8007ce4:	f7fb f8a0 	bl	8002e28 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8007ce8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4820      	ldr	r0, [pc, #128]	; (8007d78 <BSP_LCD_MspInit+0x198>)
 8007cf6:	f7fb f897 	bl	8002e28 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8007cfa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8007cfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8007d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d04:	4619      	mov	r1, r3
 8007d06:	481d      	ldr	r0, [pc, #116]	; (8007d7c <BSP_LCD_MspInit+0x19c>)
 8007d08:	f7fb f88e 	bl	8002e28 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8007d0c:	2348      	movs	r3, #72	; 0x48
 8007d0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8007d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d14:	4619      	mov	r1, r3
 8007d16:	481a      	ldr	r0, [pc, #104]	; (8007d80 <BSP_LCD_MspInit+0x1a0>)
 8007d18:	f7fb f886 	bl	8002e28 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8007d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8007d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d26:	4619      	mov	r1, r3
 8007d28:	4816      	ldr	r0, [pc, #88]	; (8007d84 <BSP_LCD_MspInit+0x1a4>)
 8007d2a:	f7fb f87d 	bl	8002e28 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8007d2e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8007d32:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8007d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4813      	ldr	r0, [pc, #76]	; (8007d88 <BSP_LCD_MspInit+0x1a8>)
 8007d3c:	f7fb f874 	bl	8002e28 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8007d40:	2303      	movs	r3, #3
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8007d44:	2309      	movs	r3, #9
 8007d46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	480a      	ldr	r0, [pc, #40]	; (8007d78 <BSP_LCD_MspInit+0x198>)
 8007d50:	f7fb f86a 	bl	8002e28 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8007d54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8007d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4809      	ldr	r0, [pc, #36]	; (8007d88 <BSP_LCD_MspInit+0x1a8>)
 8007d62:	f7fb f861 	bl	8002e28 <HAL_GPIO_Init>
}
 8007d66:	bf00      	nop
 8007d68:	3738      	adds	r7, #56	; 0x38
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	40023800 	.word	0x40023800
 8007d74:	40020000 	.word	0x40020000
 8007d78:	40020400 	.word	0x40020400
 8007d7c:	40020800 	.word	0x40020800
 8007d80:	40020c00 	.word	0x40020c00
 8007d84:	40021400 	.word	0x40021400
 8007d88:	40021800 	.word	0x40021800

08007d8c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8007d8c:	b5b0      	push	{r4, r5, r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	603a      	str	r2, [r7, #0]
 8007d96:	80fb      	strh	r3, [r7, #6]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8007d9c:	4b0c      	ldr	r3, [pc, #48]	; (8007dd0 <BSP_LCD_DrawPixel+0x44>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a0c      	ldr	r2, [pc, #48]	; (8007dd4 <BSP_LCD_DrawPixel+0x48>)
 8007da2:	2134      	movs	r1, #52	; 0x34
 8007da4:	fb01 f303 	mul.w	r3, r1, r3
 8007da8:	4413      	add	r3, r2
 8007daa:	335c      	adds	r3, #92	; 0x5c
 8007dac:	681c      	ldr	r4, [r3, #0]
 8007dae:	88bd      	ldrh	r5, [r7, #4]
 8007db0:	f7ff fbca 	bl	8007548 <BSP_LCD_GetXSize>
 8007db4:	4603      	mov	r3, r0
 8007db6:	fb03 f205 	mul.w	r2, r3, r5
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4423      	add	r3, r4
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	6013      	str	r3, [r2, #0]
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bdb0      	pop	{r4, r5, r7, pc}
 8007dd0:	20000744 	.word	0x20000744
 8007dd4:	2000062c 	.word	0x2000062c

08007dd8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	603a      	str	r2, [r7, #0]
 8007de2:	80fb      	strh	r3, [r7, #6]
 8007de4:	460b      	mov	r3, r1
 8007de6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	61fb      	str	r3, [r7, #28]
 8007dec:	2300      	movs	r3, #0
 8007dee:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8007df0:	2300      	movs	r3, #0
 8007df2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8007df4:	4b53      	ldr	r3, [pc, #332]	; (8007f44 <DrawChar+0x16c>)
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	4953      	ldr	r1, [pc, #332]	; (8007f48 <DrawChar+0x170>)
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	440b      	add	r3, r1
 8007e04:	3308      	adds	r3, #8
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	88db      	ldrh	r3, [r3, #6]
 8007e0a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8007e0c:	4b4d      	ldr	r3, [pc, #308]	; (8007f44 <DrawChar+0x16c>)
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	494d      	ldr	r1, [pc, #308]	; (8007f48 <DrawChar+0x170>)
 8007e12:	4613      	mov	r3, r2
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	4413      	add	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	440b      	add	r3, r1
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	889b      	ldrh	r3, [r3, #4]
 8007e22:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8007e24:	8a3b      	ldrh	r3, [r7, #16]
 8007e26:	3307      	adds	r3, #7
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	da00      	bge.n	8007e2e <DrawChar+0x56>
 8007e2c:	3307      	adds	r3, #7
 8007e2e:	10db      	asrs	r3, r3, #3
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	8a3b      	ldrh	r3, [r7, #16]
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	e076      	b.n	8007f32 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8007e44:	8a3b      	ldrh	r3, [r7, #16]
 8007e46:	3307      	adds	r3, #7
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	da00      	bge.n	8007e4e <DrawChar+0x76>
 8007e4c:	3307      	adds	r3, #7
 8007e4e:	10db      	asrs	r3, r3, #3
 8007e50:	461a      	mov	r2, r3
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	fb02 f303 	mul.w	r3, r2, r3
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8007e5e:	8a3b      	ldrh	r3, [r7, #16]
 8007e60:	3307      	adds	r3, #7
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	da00      	bge.n	8007e68 <DrawChar+0x90>
 8007e66:	3307      	adds	r3, #7
 8007e68:	10db      	asrs	r3, r3, #3
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d002      	beq.n	8007e74 <DrawChar+0x9c>
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d004      	beq.n	8007e7c <DrawChar+0xa4>
 8007e72:	e00c      	b.n	8007e8e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	617b      	str	r3, [r7, #20]
      break;
 8007e7a:	e016      	b.n	8007eaa <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	021b      	lsls	r3, r3, #8
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	3201      	adds	r2, #1
 8007e86:	7812      	ldrb	r2, [r2, #0]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	617b      	str	r3, [r7, #20]
      break;
 8007e8c:	e00d      	b.n	8007eaa <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	041a      	lsls	r2, r3, #16
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	3301      	adds	r3, #1
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	021b      	lsls	r3, r3, #8
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	3202      	adds	r2, #2
 8007ea2:	7812      	ldrb	r2, [r2, #0]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	617b      	str	r3, [r7, #20]
      break;
 8007ea8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61bb      	str	r3, [r7, #24]
 8007eae:	e036      	b.n	8007f1e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8007eb0:	8a3a      	ldrh	r2, [r7, #16]
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	1ad2      	subs	r2, r2, r3
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	4413      	add	r3, r2
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d012      	beq.n	8007ef2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	88fb      	ldrh	r3, [r7, #6]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	b298      	uxth	r0, r3
 8007ed6:	4b1b      	ldr	r3, [pc, #108]	; (8007f44 <DrawChar+0x16c>)
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	491b      	ldr	r1, [pc, #108]	; (8007f48 <DrawChar+0x170>)
 8007edc:	4613      	mov	r3, r2
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	4413      	add	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	440b      	add	r3, r1
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	88bb      	ldrh	r3, [r7, #4]
 8007eea:	4619      	mov	r1, r3
 8007eec:	f7ff ff4e 	bl	8007d8c <BSP_LCD_DrawPixel>
 8007ef0:	e012      	b.n	8007f18 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	88fb      	ldrh	r3, [r7, #6]
 8007ef8:	4413      	add	r3, r2
 8007efa:	b298      	uxth	r0, r3
 8007efc:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <DrawChar+0x16c>)
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	4911      	ldr	r1, [pc, #68]	; (8007f48 <DrawChar+0x170>)
 8007f02:	4613      	mov	r3, r2
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	4413      	add	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	440b      	add	r3, r1
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	88bb      	ldrh	r3, [r7, #4]
 8007f12:	4619      	mov	r1, r3
 8007f14:	f7ff ff3a 	bl	8007d8c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	61bb      	str	r3, [r7, #24]
 8007f1e:	8a3b      	ldrh	r3, [r7, #16]
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d3c4      	bcc.n	8007eb0 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8007f26:	88bb      	ldrh	r3, [r7, #4]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	61fb      	str	r3, [r7, #28]
 8007f32:	8a7b      	ldrh	r3, [r7, #18]
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d384      	bcc.n	8007e44 <DrawChar+0x6c>
  }
}
 8007f3a:	bf00      	nop
 8007f3c:	bf00      	nop
 8007f3e:	3720      	adds	r7, #32
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20000744 	.word	0x20000744
 8007f48:	20000748 	.word	0x20000748

08007f4c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8007f5a:	4b16      	ldr	r3, [pc, #88]	; (8007fb4 <FillBuffer+0x68>)
 8007f5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007f60:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8007f62:	4b14      	ldr	r3, [pc, #80]	; (8007fb4 <FillBuffer+0x68>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8007f68:	4a12      	ldr	r2, [pc, #72]	; (8007fb4 <FillBuffer+0x68>)
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8007f6e:	4b11      	ldr	r3, [pc, #68]	; (8007fb4 <FillBuffer+0x68>)
 8007f70:	4a11      	ldr	r2, [pc, #68]	; (8007fb8 <FillBuffer+0x6c>)
 8007f72:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8007f74:	480f      	ldr	r0, [pc, #60]	; (8007fb4 <FillBuffer+0x68>)
 8007f76:	f7fa fccb 	bl	8002910 <HAL_DMA2D_Init>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d115      	bne.n	8007fac <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8007f80:	68f9      	ldr	r1, [r7, #12]
 8007f82:	480c      	ldr	r0, [pc, #48]	; (8007fb4 <FillBuffer+0x68>)
 8007f84:	f7fa fe22 	bl	8002bcc <HAL_DMA2D_ConfigLayer>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10e      	bne.n	8007fac <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	69f9      	ldr	r1, [r7, #28]
 8007f98:	4806      	ldr	r0, [pc, #24]	; (8007fb4 <FillBuffer+0x68>)
 8007f9a:	f7fa fd02 	bl	80029a2 <HAL_DMA2D_Start>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d103      	bne.n	8007fac <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8007fa4:	210a      	movs	r1, #10
 8007fa6:	4803      	ldr	r0, [pc, #12]	; (8007fb4 <FillBuffer+0x68>)
 8007fa8:	f7fa fd26 	bl	80029f8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8007fac:	bf00      	nop
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	200006d4 	.word	0x200006d4
 8007fb8:	4002b000 	.word	0x4002b000

08007fbc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8007fc0:	4b29      	ldr	r3, [pc, #164]	; (8008068 <BSP_SDRAM_Init+0xac>)
 8007fc2:	4a2a      	ldr	r2, [pc, #168]	; (800806c <BSP_SDRAM_Init+0xb0>)
 8007fc4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8007fc6:	4b2a      	ldr	r3, [pc, #168]	; (8008070 <BSP_SDRAM_Init+0xb4>)
 8007fc8:	2202      	movs	r2, #2
 8007fca:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8007fcc:	4b28      	ldr	r3, [pc, #160]	; (8008070 <BSP_SDRAM_Init+0xb4>)
 8007fce:	2207      	movs	r2, #7
 8007fd0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8007fd2:	4b27      	ldr	r3, [pc, #156]	; (8008070 <BSP_SDRAM_Init+0xb4>)
 8007fd4:	2204      	movs	r2, #4
 8007fd6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8007fd8:	4b25      	ldr	r3, [pc, #148]	; (8008070 <BSP_SDRAM_Init+0xb4>)
 8007fda:	2207      	movs	r2, #7
 8007fdc:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8007fde:	4b24      	ldr	r3, [pc, #144]	; (8008070 <BSP_SDRAM_Init+0xb4>)
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8007fe4:	4b22      	ldr	r3, [pc, #136]	; (8008070 <BSP_SDRAM_Init+0xb4>)
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8007fea:	4b21      	ldr	r3, [pc, #132]	; (8008070 <BSP_SDRAM_Init+0xb4>)
 8007fec:	2202      	movs	r2, #2
 8007fee:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8007ff0:	4b1d      	ldr	r3, [pc, #116]	; (8008068 <BSP_SDRAM_Init+0xac>)
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8007ff6:	4b1c      	ldr	r3, [pc, #112]	; (8008068 <BSP_SDRAM_Init+0xac>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8007ffc:	4b1a      	ldr	r3, [pc, #104]	; (8008068 <BSP_SDRAM_Init+0xac>)
 8007ffe:	2204      	movs	r2, #4
 8008000:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8008002:	4b19      	ldr	r3, [pc, #100]	; (8008068 <BSP_SDRAM_Init+0xac>)
 8008004:	2210      	movs	r2, #16
 8008006:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008008:	4b17      	ldr	r3, [pc, #92]	; (8008068 <BSP_SDRAM_Init+0xac>)
 800800a:	2240      	movs	r2, #64	; 0x40
 800800c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800800e:	4b16      	ldr	r3, [pc, #88]	; (8008068 <BSP_SDRAM_Init+0xac>)
 8008010:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8008014:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008016:	4b14      	ldr	r3, [pc, #80]	; (8008068 <BSP_SDRAM_Init+0xac>)
 8008018:	2200      	movs	r2, #0
 800801a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800801c:	4b12      	ldr	r3, [pc, #72]	; (8008068 <BSP_SDRAM_Init+0xac>)
 800801e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008022:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8008024:	4b10      	ldr	r3, [pc, #64]	; (8008068 <BSP_SDRAM_Init+0xac>)
 8008026:	2200      	movs	r2, #0
 8008028:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800802a:	4b0f      	ldr	r3, [pc, #60]	; (8008068 <BSP_SDRAM_Init+0xac>)
 800802c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008030:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8008032:	2100      	movs	r1, #0
 8008034:	480c      	ldr	r0, [pc, #48]	; (8008068 <BSP_SDRAM_Init+0xac>)
 8008036:	f000 f87f 	bl	8008138 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800803a:	490d      	ldr	r1, [pc, #52]	; (8008070 <BSP_SDRAM_Init+0xb4>)
 800803c:	480a      	ldr	r0, [pc, #40]	; (8008068 <BSP_SDRAM_Init+0xac>)
 800803e:	f7fd f8fd 	bl	800523c <HAL_SDRAM_Init>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d003      	beq.n	8008050 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8008048:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <BSP_SDRAM_Init+0xb8>)
 800804a:	2201      	movs	r2, #1
 800804c:	701a      	strb	r2, [r3, #0]
 800804e:	e002      	b.n	8008056 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8008050:	4b08      	ldr	r3, [pc, #32]	; (8008074 <BSP_SDRAM_Init+0xb8>)
 8008052:	2200      	movs	r2, #0
 8008054:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8008056:	f240 506a 	movw	r0, #1386	; 0x56a
 800805a:	f000 f80d 	bl	8008078 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800805e:	4b05      	ldr	r3, [pc, #20]	; (8008074 <BSP_SDRAM_Init+0xb8>)
 8008060:	781b      	ldrb	r3, [r3, #0]
}
 8008062:	4618      	mov	r0, r3
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	20000764 	.word	0x20000764
 800806c:	a0000140 	.word	0xa0000140
 8008070:	20000798 	.word	0x20000798
 8008074:	200000a4 	.word	0x200000a4

08008078 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8008080:	2300      	movs	r3, #0
 8008082:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8008084:	4b2a      	ldr	r3, [pc, #168]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008086:	2201      	movs	r2, #1
 8008088:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800808a:	4b29      	ldr	r3, [pc, #164]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800808c:	2208      	movs	r2, #8
 800808e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8008090:	4b27      	ldr	r3, [pc, #156]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008092:	2201      	movs	r2, #1
 8008094:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8008096:	4b26      	ldr	r3, [pc, #152]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008098:	2200      	movs	r2, #0
 800809a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800809c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080a0:	4923      	ldr	r1, [pc, #140]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080a2:	4824      	ldr	r0, [pc, #144]	; (8008134 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80080a4:	f7fd f8fe 	bl	80052a4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80080a8:	2001      	movs	r0, #1
 80080aa:	f7fa f93d 	bl	8002328 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80080ae:	4b20      	ldr	r3, [pc, #128]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080b0:	2202      	movs	r2, #2
 80080b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80080b4:	4b1e      	ldr	r3, [pc, #120]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080b6:	2208      	movs	r2, #8
 80080b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80080ba:	4b1d      	ldr	r3, [pc, #116]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080bc:	2201      	movs	r2, #1
 80080be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80080c0:	4b1b      	ldr	r3, [pc, #108]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80080c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080ca:	4919      	ldr	r1, [pc, #100]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080cc:	4819      	ldr	r0, [pc, #100]	; (8008134 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80080ce:	f7fd f8e9 	bl	80052a4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80080d2:	4b17      	ldr	r3, [pc, #92]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080d4:	2203      	movs	r2, #3
 80080d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80080d8:	4b15      	ldr	r3, [pc, #84]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080da:	2208      	movs	r2, #8
 80080dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80080de:	4b14      	ldr	r3, [pc, #80]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080e0:	2204      	movs	r2, #4
 80080e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80080e4:	4b12      	ldr	r3, [pc, #72]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80080ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080ee:	4910      	ldr	r1, [pc, #64]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080f0:	4810      	ldr	r0, [pc, #64]	; (8008134 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80080f2:	f7fd f8d7 	bl	80052a4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80080f6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80080fa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80080fc:	4b0c      	ldr	r3, [pc, #48]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080fe:	2204      	movs	r2, #4
 8008100:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8008102:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008104:	2208      	movs	r2, #8
 8008106:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8008108:	4b09      	ldr	r3, [pc, #36]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800810a:	2201      	movs	r2, #1
 800810c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4a07      	ldr	r2, [pc, #28]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008112:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8008114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008118:	4905      	ldr	r1, [pc, #20]	; (8008130 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800811a:	4806      	ldr	r0, [pc, #24]	; (8008134 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800811c:	f7fd f8c2 	bl	80052a4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	4804      	ldr	r0, [pc, #16]	; (8008134 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8008124:	f7fd f8f3 	bl	800530e <HAL_SDRAM_ProgramRefreshRate>
}
 8008128:	bf00      	nop
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	200007b4 	.word	0x200007b4
 8008134:	20000764 	.word	0x20000764

08008138 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b090      	sub	sp, #64	; 0x40
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 80ec 	beq.w	8008322 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800814a:	2300      	movs	r3, #0
 800814c:	62bb      	str	r3, [r7, #40]	; 0x28
 800814e:	4b77      	ldr	r3, [pc, #476]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 8008150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008152:	4a76      	ldr	r2, [pc, #472]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 8008154:	f043 0301 	orr.w	r3, r3, #1
 8008158:	6393      	str	r3, [r2, #56]	; 0x38
 800815a:	4b74      	ldr	r3, [pc, #464]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 800815c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	62bb      	str	r3, [r7, #40]	; 0x28
 8008164:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8008166:	2300      	movs	r3, #0
 8008168:	627b      	str	r3, [r7, #36]	; 0x24
 800816a:	4b70      	ldr	r3, [pc, #448]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 800816c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816e:	4a6f      	ldr	r2, [pc, #444]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 8008170:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008174:	6313      	str	r3, [r2, #48]	; 0x30
 8008176:	4b6d      	ldr	r3, [pc, #436]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 8008178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800817e:	627b      	str	r3, [r7, #36]	; 0x24
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008182:	2300      	movs	r3, #0
 8008184:	623b      	str	r3, [r7, #32]
 8008186:	4b69      	ldr	r3, [pc, #420]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 8008188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818a:	4a68      	ldr	r2, [pc, #416]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 800818c:	f043 0302 	orr.w	r3, r3, #2
 8008190:	6313      	str	r3, [r2, #48]	; 0x30
 8008192:	4b66      	ldr	r3, [pc, #408]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 8008194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008196:	f003 0302 	and.w	r3, r3, #2
 800819a:	623b      	str	r3, [r7, #32]
 800819c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800819e:	2300      	movs	r3, #0
 80081a0:	61fb      	str	r3, [r7, #28]
 80081a2:	4b62      	ldr	r3, [pc, #392]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 80081a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a6:	4a61      	ldr	r2, [pc, #388]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 80081a8:	f043 0304 	orr.w	r3, r3, #4
 80081ac:	6313      	str	r3, [r2, #48]	; 0x30
 80081ae:	4b5f      	ldr	r3, [pc, #380]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 80081b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b2:	f003 0304 	and.w	r3, r3, #4
 80081b6:	61fb      	str	r3, [r7, #28]
 80081b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80081ba:	2300      	movs	r3, #0
 80081bc:	61bb      	str	r3, [r7, #24]
 80081be:	4b5b      	ldr	r3, [pc, #364]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 80081c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c2:	4a5a      	ldr	r2, [pc, #360]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 80081c4:	f043 0308 	orr.w	r3, r3, #8
 80081c8:	6313      	str	r3, [r2, #48]	; 0x30
 80081ca:	4b58      	ldr	r3, [pc, #352]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 80081cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ce:	f003 0308 	and.w	r3, r3, #8
 80081d2:	61bb      	str	r3, [r7, #24]
 80081d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80081d6:	2300      	movs	r3, #0
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	4b54      	ldr	r3, [pc, #336]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 80081dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081de:	4a53      	ldr	r2, [pc, #332]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 80081e0:	f043 0310 	orr.w	r3, r3, #16
 80081e4:	6313      	str	r3, [r2, #48]	; 0x30
 80081e6:	4b51      	ldr	r3, [pc, #324]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 80081e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ea:	f003 0310 	and.w	r3, r3, #16
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80081f2:	2300      	movs	r3, #0
 80081f4:	613b      	str	r3, [r7, #16]
 80081f6:	4b4d      	ldr	r3, [pc, #308]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 80081f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fa:	4a4c      	ldr	r2, [pc, #304]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 80081fc:	f043 0320 	orr.w	r3, r3, #32
 8008200:	6313      	str	r3, [r2, #48]	; 0x30
 8008202:	4b4a      	ldr	r3, [pc, #296]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 8008204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008206:	f003 0320 	and.w	r3, r3, #32
 800820a:	613b      	str	r3, [r7, #16]
 800820c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800820e:	2300      	movs	r3, #0
 8008210:	60fb      	str	r3, [r7, #12]
 8008212:	4b46      	ldr	r3, [pc, #280]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 8008214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008216:	4a45      	ldr	r2, [pc, #276]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 8008218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800821c:	6313      	str	r3, [r2, #48]	; 0x30
 800821e:	4b43      	ldr	r3, [pc, #268]	; (800832c <BSP_SDRAM_MspInit+0x1f4>)
 8008220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008226:	60fb      	str	r3, [r7, #12]
 8008228:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800822a:	2302      	movs	r3, #2
 800822c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800822e:	2302      	movs	r3, #2
 8008230:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8008232:	2300      	movs	r3, #0
 8008234:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8008236:	230c      	movs	r3, #12
 8008238:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800823a:	2360      	movs	r3, #96	; 0x60
 800823c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800823e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008242:	4619      	mov	r1, r3
 8008244:	483a      	ldr	r0, [pc, #232]	; (8008330 <BSP_SDRAM_MspInit+0x1f8>)
 8008246:	f7fa fdef 	bl	8002e28 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800824a:	2301      	movs	r3, #1
 800824c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800824e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008252:	4619      	mov	r1, r3
 8008254:	4837      	ldr	r0, [pc, #220]	; (8008334 <BSP_SDRAM_MspInit+0x1fc>)
 8008256:	f7fa fde7 	bl	8002e28 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800825a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800825e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8008260:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008264:	4619      	mov	r1, r3
 8008266:	4834      	ldr	r0, [pc, #208]	; (8008338 <BSP_SDRAM_MspInit+0x200>)
 8008268:	f7fa fdde 	bl	8002e28 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800826c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8008270:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8008272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008276:	4619      	mov	r1, r3
 8008278:	4830      	ldr	r0, [pc, #192]	; (800833c <BSP_SDRAM_MspInit+0x204>)
 800827a:	f7fa fdd5 	bl	8002e28 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800827e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8008282:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8008284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008288:	4619      	mov	r1, r3
 800828a:	482d      	ldr	r0, [pc, #180]	; (8008340 <BSP_SDRAM_MspInit+0x208>)
 800828c:	f7fa fdcc 	bl	8002e28 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8008290:	f248 1333 	movw	r3, #33075	; 0x8133
 8008294:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8008296:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800829a:	4619      	mov	r1, r3
 800829c:	4829      	ldr	r0, [pc, #164]	; (8008344 <BSP_SDRAM_MspInit+0x20c>)
 800829e:	f7fa fdc3 	bl	8002e28 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80082a2:	4b29      	ldr	r3, [pc, #164]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80082a8:	4b27      	ldr	r3, [pc, #156]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 80082aa:	2280      	movs	r2, #128	; 0x80
 80082ac:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80082ae:	4b26      	ldr	r3, [pc, #152]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 80082b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082b4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80082b6:	4b24      	ldr	r3, [pc, #144]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 80082b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082bc:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80082be:	4b22      	ldr	r3, [pc, #136]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 80082c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80082c4:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80082c6:	4b20      	ldr	r3, [pc, #128]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 80082c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80082cc:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80082ce:	4b1e      	ldr	r3, [pc, #120]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80082d4:	4b1c      	ldr	r3, [pc, #112]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 80082d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80082da:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80082dc:	4b1a      	ldr	r3, [pc, #104]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 80082de:	2200      	movs	r2, #0
 80082e0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80082e2:	4b19      	ldr	r3, [pc, #100]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 80082e4:	2203      	movs	r2, #3
 80082e6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80082e8:	4b17      	ldr	r3, [pc, #92]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80082ee:	4b16      	ldr	r3, [pc, #88]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80082f4:	4b14      	ldr	r3, [pc, #80]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 80082f6:	4a15      	ldr	r2, [pc, #84]	; (800834c <BSP_SDRAM_MspInit+0x214>)
 80082f8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a12      	ldr	r2, [pc, #72]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 80082fe:	631a      	str	r2, [r3, #48]	; 0x30
 8008300:	4a11      	ldr	r2, [pc, #68]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8008306:	4810      	ldr	r0, [pc, #64]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 8008308:	f7fa f9f2 	bl	80026f0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800830c:	480e      	ldr	r0, [pc, #56]	; (8008348 <BSP_SDRAM_MspInit+0x210>)
 800830e:	f7fa f941 	bl	8002594 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8008312:	2200      	movs	r2, #0
 8008314:	210f      	movs	r1, #15
 8008316:	2038      	movs	r0, #56	; 0x38
 8008318:	f7fa f905 	bl	8002526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800831c:	2038      	movs	r0, #56	; 0x38
 800831e:	f7fa f91e 	bl	800255e <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8008322:	bf00      	nop
 8008324:	3740      	adds	r7, #64	; 0x40
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	40023800 	.word	0x40023800
 8008330:	40020400 	.word	0x40020400
 8008334:	40020800 	.word	0x40020800
 8008338:	40020c00 	.word	0x40020c00
 800833c:	40021000 	.word	0x40021000
 8008340:	40021400 	.word	0x40021400
 8008344:	40021800 	.word	0x40021800
 8008348:	200007c4 	.word	0x200007c4
 800834c:	40026410 	.word	0x40026410

08008350 <__errno>:
 8008350:	4b01      	ldr	r3, [pc, #4]	; (8008358 <__errno+0x8>)
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	200000a8 	.word	0x200000a8

0800835c <__libc_init_array>:
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	4d0d      	ldr	r5, [pc, #52]	; (8008394 <__libc_init_array+0x38>)
 8008360:	4c0d      	ldr	r4, [pc, #52]	; (8008398 <__libc_init_array+0x3c>)
 8008362:	1b64      	subs	r4, r4, r5
 8008364:	10a4      	asrs	r4, r4, #2
 8008366:	2600      	movs	r6, #0
 8008368:	42a6      	cmp	r6, r4
 800836a:	d109      	bne.n	8008380 <__libc_init_array+0x24>
 800836c:	4d0b      	ldr	r5, [pc, #44]	; (800839c <__libc_init_array+0x40>)
 800836e:	4c0c      	ldr	r4, [pc, #48]	; (80083a0 <__libc_init_array+0x44>)
 8008370:	f000 fc8e 	bl	8008c90 <_init>
 8008374:	1b64      	subs	r4, r4, r5
 8008376:	10a4      	asrs	r4, r4, #2
 8008378:	2600      	movs	r6, #0
 800837a:	42a6      	cmp	r6, r4
 800837c:	d105      	bne.n	800838a <__libc_init_array+0x2e>
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	f855 3b04 	ldr.w	r3, [r5], #4
 8008384:	4798      	blx	r3
 8008386:	3601      	adds	r6, #1
 8008388:	e7ee      	b.n	8008368 <__libc_init_array+0xc>
 800838a:	f855 3b04 	ldr.w	r3, [r5], #4
 800838e:	4798      	blx	r3
 8008390:	3601      	adds	r6, #1
 8008392:	e7f2      	b.n	800837a <__libc_init_array+0x1e>
 8008394:	080576bc 	.word	0x080576bc
 8008398:	080576bc 	.word	0x080576bc
 800839c:	080576bc 	.word	0x080576bc
 80083a0:	080576c0 	.word	0x080576c0

080083a4 <memset>:
 80083a4:	4402      	add	r2, r0
 80083a6:	4603      	mov	r3, r0
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d100      	bne.n	80083ae <memset+0xa>
 80083ac:	4770      	bx	lr
 80083ae:	f803 1b01 	strb.w	r1, [r3], #1
 80083b2:	e7f9      	b.n	80083a8 <memset+0x4>

080083b4 <siprintf>:
 80083b4:	b40e      	push	{r1, r2, r3}
 80083b6:	b500      	push	{lr}
 80083b8:	b09c      	sub	sp, #112	; 0x70
 80083ba:	ab1d      	add	r3, sp, #116	; 0x74
 80083bc:	9002      	str	r0, [sp, #8]
 80083be:	9006      	str	r0, [sp, #24]
 80083c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083c4:	4809      	ldr	r0, [pc, #36]	; (80083ec <siprintf+0x38>)
 80083c6:	9107      	str	r1, [sp, #28]
 80083c8:	9104      	str	r1, [sp, #16]
 80083ca:	4909      	ldr	r1, [pc, #36]	; (80083f0 <siprintf+0x3c>)
 80083cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d0:	9105      	str	r1, [sp, #20]
 80083d2:	6800      	ldr	r0, [r0, #0]
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	a902      	add	r1, sp, #8
 80083d8:	f000 f868 	bl	80084ac <_svfiprintf_r>
 80083dc:	9b02      	ldr	r3, [sp, #8]
 80083de:	2200      	movs	r2, #0
 80083e0:	701a      	strb	r2, [r3, #0]
 80083e2:	b01c      	add	sp, #112	; 0x70
 80083e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083e8:	b003      	add	sp, #12
 80083ea:	4770      	bx	lr
 80083ec:	200000a8 	.word	0x200000a8
 80083f0:	ffff0208 	.word	0xffff0208

080083f4 <__ssputs_r>:
 80083f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f8:	688e      	ldr	r6, [r1, #8]
 80083fa:	429e      	cmp	r6, r3
 80083fc:	4682      	mov	sl, r0
 80083fe:	460c      	mov	r4, r1
 8008400:	4690      	mov	r8, r2
 8008402:	461f      	mov	r7, r3
 8008404:	d838      	bhi.n	8008478 <__ssputs_r+0x84>
 8008406:	898a      	ldrh	r2, [r1, #12]
 8008408:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800840c:	d032      	beq.n	8008474 <__ssputs_r+0x80>
 800840e:	6825      	ldr	r5, [r4, #0]
 8008410:	6909      	ldr	r1, [r1, #16]
 8008412:	eba5 0901 	sub.w	r9, r5, r1
 8008416:	6965      	ldr	r5, [r4, #20]
 8008418:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800841c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008420:	3301      	adds	r3, #1
 8008422:	444b      	add	r3, r9
 8008424:	106d      	asrs	r5, r5, #1
 8008426:	429d      	cmp	r5, r3
 8008428:	bf38      	it	cc
 800842a:	461d      	movcc	r5, r3
 800842c:	0553      	lsls	r3, r2, #21
 800842e:	d531      	bpl.n	8008494 <__ssputs_r+0xa0>
 8008430:	4629      	mov	r1, r5
 8008432:	f000 fb63 	bl	8008afc <_malloc_r>
 8008436:	4606      	mov	r6, r0
 8008438:	b950      	cbnz	r0, 8008450 <__ssputs_r+0x5c>
 800843a:	230c      	movs	r3, #12
 800843c:	f8ca 3000 	str.w	r3, [sl]
 8008440:	89a3      	ldrh	r3, [r4, #12]
 8008442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008446:	81a3      	strh	r3, [r4, #12]
 8008448:	f04f 30ff 	mov.w	r0, #4294967295
 800844c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008450:	6921      	ldr	r1, [r4, #16]
 8008452:	464a      	mov	r2, r9
 8008454:	f000 fabe 	bl	80089d4 <memcpy>
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800845e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008462:	81a3      	strh	r3, [r4, #12]
 8008464:	6126      	str	r6, [r4, #16]
 8008466:	6165      	str	r5, [r4, #20]
 8008468:	444e      	add	r6, r9
 800846a:	eba5 0509 	sub.w	r5, r5, r9
 800846e:	6026      	str	r6, [r4, #0]
 8008470:	60a5      	str	r5, [r4, #8]
 8008472:	463e      	mov	r6, r7
 8008474:	42be      	cmp	r6, r7
 8008476:	d900      	bls.n	800847a <__ssputs_r+0x86>
 8008478:	463e      	mov	r6, r7
 800847a:	6820      	ldr	r0, [r4, #0]
 800847c:	4632      	mov	r2, r6
 800847e:	4641      	mov	r1, r8
 8008480:	f000 fab6 	bl	80089f0 <memmove>
 8008484:	68a3      	ldr	r3, [r4, #8]
 8008486:	1b9b      	subs	r3, r3, r6
 8008488:	60a3      	str	r3, [r4, #8]
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	4433      	add	r3, r6
 800848e:	6023      	str	r3, [r4, #0]
 8008490:	2000      	movs	r0, #0
 8008492:	e7db      	b.n	800844c <__ssputs_r+0x58>
 8008494:	462a      	mov	r2, r5
 8008496:	f000 fba5 	bl	8008be4 <_realloc_r>
 800849a:	4606      	mov	r6, r0
 800849c:	2800      	cmp	r0, #0
 800849e:	d1e1      	bne.n	8008464 <__ssputs_r+0x70>
 80084a0:	6921      	ldr	r1, [r4, #16]
 80084a2:	4650      	mov	r0, sl
 80084a4:	f000 fabe 	bl	8008a24 <_free_r>
 80084a8:	e7c7      	b.n	800843a <__ssputs_r+0x46>
	...

080084ac <_svfiprintf_r>:
 80084ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b0:	4698      	mov	r8, r3
 80084b2:	898b      	ldrh	r3, [r1, #12]
 80084b4:	061b      	lsls	r3, r3, #24
 80084b6:	b09d      	sub	sp, #116	; 0x74
 80084b8:	4607      	mov	r7, r0
 80084ba:	460d      	mov	r5, r1
 80084bc:	4614      	mov	r4, r2
 80084be:	d50e      	bpl.n	80084de <_svfiprintf_r+0x32>
 80084c0:	690b      	ldr	r3, [r1, #16]
 80084c2:	b963      	cbnz	r3, 80084de <_svfiprintf_r+0x32>
 80084c4:	2140      	movs	r1, #64	; 0x40
 80084c6:	f000 fb19 	bl	8008afc <_malloc_r>
 80084ca:	6028      	str	r0, [r5, #0]
 80084cc:	6128      	str	r0, [r5, #16]
 80084ce:	b920      	cbnz	r0, 80084da <_svfiprintf_r+0x2e>
 80084d0:	230c      	movs	r3, #12
 80084d2:	603b      	str	r3, [r7, #0]
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	e0d1      	b.n	800867e <_svfiprintf_r+0x1d2>
 80084da:	2340      	movs	r3, #64	; 0x40
 80084dc:	616b      	str	r3, [r5, #20]
 80084de:	2300      	movs	r3, #0
 80084e0:	9309      	str	r3, [sp, #36]	; 0x24
 80084e2:	2320      	movs	r3, #32
 80084e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80084ec:	2330      	movs	r3, #48	; 0x30
 80084ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008698 <_svfiprintf_r+0x1ec>
 80084f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084f6:	f04f 0901 	mov.w	r9, #1
 80084fa:	4623      	mov	r3, r4
 80084fc:	469a      	mov	sl, r3
 80084fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008502:	b10a      	cbz	r2, 8008508 <_svfiprintf_r+0x5c>
 8008504:	2a25      	cmp	r2, #37	; 0x25
 8008506:	d1f9      	bne.n	80084fc <_svfiprintf_r+0x50>
 8008508:	ebba 0b04 	subs.w	fp, sl, r4
 800850c:	d00b      	beq.n	8008526 <_svfiprintf_r+0x7a>
 800850e:	465b      	mov	r3, fp
 8008510:	4622      	mov	r2, r4
 8008512:	4629      	mov	r1, r5
 8008514:	4638      	mov	r0, r7
 8008516:	f7ff ff6d 	bl	80083f4 <__ssputs_r>
 800851a:	3001      	adds	r0, #1
 800851c:	f000 80aa 	beq.w	8008674 <_svfiprintf_r+0x1c8>
 8008520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008522:	445a      	add	r2, fp
 8008524:	9209      	str	r2, [sp, #36]	; 0x24
 8008526:	f89a 3000 	ldrb.w	r3, [sl]
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 80a2 	beq.w	8008674 <_svfiprintf_r+0x1c8>
 8008530:	2300      	movs	r3, #0
 8008532:	f04f 32ff 	mov.w	r2, #4294967295
 8008536:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800853a:	f10a 0a01 	add.w	sl, sl, #1
 800853e:	9304      	str	r3, [sp, #16]
 8008540:	9307      	str	r3, [sp, #28]
 8008542:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008546:	931a      	str	r3, [sp, #104]	; 0x68
 8008548:	4654      	mov	r4, sl
 800854a:	2205      	movs	r2, #5
 800854c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008550:	4851      	ldr	r0, [pc, #324]	; (8008698 <_svfiprintf_r+0x1ec>)
 8008552:	f7f7 fe55 	bl	8000200 <memchr>
 8008556:	9a04      	ldr	r2, [sp, #16]
 8008558:	b9d8      	cbnz	r0, 8008592 <_svfiprintf_r+0xe6>
 800855a:	06d0      	lsls	r0, r2, #27
 800855c:	bf44      	itt	mi
 800855e:	2320      	movmi	r3, #32
 8008560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008564:	0711      	lsls	r1, r2, #28
 8008566:	bf44      	itt	mi
 8008568:	232b      	movmi	r3, #43	; 0x2b
 800856a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800856e:	f89a 3000 	ldrb.w	r3, [sl]
 8008572:	2b2a      	cmp	r3, #42	; 0x2a
 8008574:	d015      	beq.n	80085a2 <_svfiprintf_r+0xf6>
 8008576:	9a07      	ldr	r2, [sp, #28]
 8008578:	4654      	mov	r4, sl
 800857a:	2000      	movs	r0, #0
 800857c:	f04f 0c0a 	mov.w	ip, #10
 8008580:	4621      	mov	r1, r4
 8008582:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008586:	3b30      	subs	r3, #48	; 0x30
 8008588:	2b09      	cmp	r3, #9
 800858a:	d94e      	bls.n	800862a <_svfiprintf_r+0x17e>
 800858c:	b1b0      	cbz	r0, 80085bc <_svfiprintf_r+0x110>
 800858e:	9207      	str	r2, [sp, #28]
 8008590:	e014      	b.n	80085bc <_svfiprintf_r+0x110>
 8008592:	eba0 0308 	sub.w	r3, r0, r8
 8008596:	fa09 f303 	lsl.w	r3, r9, r3
 800859a:	4313      	orrs	r3, r2
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	46a2      	mov	sl, r4
 80085a0:	e7d2      	b.n	8008548 <_svfiprintf_r+0x9c>
 80085a2:	9b03      	ldr	r3, [sp, #12]
 80085a4:	1d19      	adds	r1, r3, #4
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	9103      	str	r1, [sp, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	bfbb      	ittet	lt
 80085ae:	425b      	neglt	r3, r3
 80085b0:	f042 0202 	orrlt.w	r2, r2, #2
 80085b4:	9307      	strge	r3, [sp, #28]
 80085b6:	9307      	strlt	r3, [sp, #28]
 80085b8:	bfb8      	it	lt
 80085ba:	9204      	strlt	r2, [sp, #16]
 80085bc:	7823      	ldrb	r3, [r4, #0]
 80085be:	2b2e      	cmp	r3, #46	; 0x2e
 80085c0:	d10c      	bne.n	80085dc <_svfiprintf_r+0x130>
 80085c2:	7863      	ldrb	r3, [r4, #1]
 80085c4:	2b2a      	cmp	r3, #42	; 0x2a
 80085c6:	d135      	bne.n	8008634 <_svfiprintf_r+0x188>
 80085c8:	9b03      	ldr	r3, [sp, #12]
 80085ca:	1d1a      	adds	r2, r3, #4
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	9203      	str	r2, [sp, #12]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	bfb8      	it	lt
 80085d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80085d8:	3402      	adds	r4, #2
 80085da:	9305      	str	r3, [sp, #20]
 80085dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086a8 <_svfiprintf_r+0x1fc>
 80085e0:	7821      	ldrb	r1, [r4, #0]
 80085e2:	2203      	movs	r2, #3
 80085e4:	4650      	mov	r0, sl
 80085e6:	f7f7 fe0b 	bl	8000200 <memchr>
 80085ea:	b140      	cbz	r0, 80085fe <_svfiprintf_r+0x152>
 80085ec:	2340      	movs	r3, #64	; 0x40
 80085ee:	eba0 000a 	sub.w	r0, r0, sl
 80085f2:	fa03 f000 	lsl.w	r0, r3, r0
 80085f6:	9b04      	ldr	r3, [sp, #16]
 80085f8:	4303      	orrs	r3, r0
 80085fa:	3401      	adds	r4, #1
 80085fc:	9304      	str	r3, [sp, #16]
 80085fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008602:	4826      	ldr	r0, [pc, #152]	; (800869c <_svfiprintf_r+0x1f0>)
 8008604:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008608:	2206      	movs	r2, #6
 800860a:	f7f7 fdf9 	bl	8000200 <memchr>
 800860e:	2800      	cmp	r0, #0
 8008610:	d038      	beq.n	8008684 <_svfiprintf_r+0x1d8>
 8008612:	4b23      	ldr	r3, [pc, #140]	; (80086a0 <_svfiprintf_r+0x1f4>)
 8008614:	bb1b      	cbnz	r3, 800865e <_svfiprintf_r+0x1b2>
 8008616:	9b03      	ldr	r3, [sp, #12]
 8008618:	3307      	adds	r3, #7
 800861a:	f023 0307 	bic.w	r3, r3, #7
 800861e:	3308      	adds	r3, #8
 8008620:	9303      	str	r3, [sp, #12]
 8008622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008624:	4433      	add	r3, r6
 8008626:	9309      	str	r3, [sp, #36]	; 0x24
 8008628:	e767      	b.n	80084fa <_svfiprintf_r+0x4e>
 800862a:	fb0c 3202 	mla	r2, ip, r2, r3
 800862e:	460c      	mov	r4, r1
 8008630:	2001      	movs	r0, #1
 8008632:	e7a5      	b.n	8008580 <_svfiprintf_r+0xd4>
 8008634:	2300      	movs	r3, #0
 8008636:	3401      	adds	r4, #1
 8008638:	9305      	str	r3, [sp, #20]
 800863a:	4619      	mov	r1, r3
 800863c:	f04f 0c0a 	mov.w	ip, #10
 8008640:	4620      	mov	r0, r4
 8008642:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008646:	3a30      	subs	r2, #48	; 0x30
 8008648:	2a09      	cmp	r2, #9
 800864a:	d903      	bls.n	8008654 <_svfiprintf_r+0x1a8>
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0c5      	beq.n	80085dc <_svfiprintf_r+0x130>
 8008650:	9105      	str	r1, [sp, #20]
 8008652:	e7c3      	b.n	80085dc <_svfiprintf_r+0x130>
 8008654:	fb0c 2101 	mla	r1, ip, r1, r2
 8008658:	4604      	mov	r4, r0
 800865a:	2301      	movs	r3, #1
 800865c:	e7f0      	b.n	8008640 <_svfiprintf_r+0x194>
 800865e:	ab03      	add	r3, sp, #12
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	462a      	mov	r2, r5
 8008664:	4b0f      	ldr	r3, [pc, #60]	; (80086a4 <_svfiprintf_r+0x1f8>)
 8008666:	a904      	add	r1, sp, #16
 8008668:	4638      	mov	r0, r7
 800866a:	f3af 8000 	nop.w
 800866e:	1c42      	adds	r2, r0, #1
 8008670:	4606      	mov	r6, r0
 8008672:	d1d6      	bne.n	8008622 <_svfiprintf_r+0x176>
 8008674:	89ab      	ldrh	r3, [r5, #12]
 8008676:	065b      	lsls	r3, r3, #25
 8008678:	f53f af2c 	bmi.w	80084d4 <_svfiprintf_r+0x28>
 800867c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800867e:	b01d      	add	sp, #116	; 0x74
 8008680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008684:	ab03      	add	r3, sp, #12
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	462a      	mov	r2, r5
 800868a:	4b06      	ldr	r3, [pc, #24]	; (80086a4 <_svfiprintf_r+0x1f8>)
 800868c:	a904      	add	r1, sp, #16
 800868e:	4638      	mov	r0, r7
 8008690:	f000 f87a 	bl	8008788 <_printf_i>
 8008694:	e7eb      	b.n	800866e <_svfiprintf_r+0x1c2>
 8008696:	bf00      	nop
 8008698:	08057680 	.word	0x08057680
 800869c:	0805768a 	.word	0x0805768a
 80086a0:	00000000 	.word	0x00000000
 80086a4:	080083f5 	.word	0x080083f5
 80086a8:	08057686 	.word	0x08057686

080086ac <_printf_common>:
 80086ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b0:	4616      	mov	r6, r2
 80086b2:	4699      	mov	r9, r3
 80086b4:	688a      	ldr	r2, [r1, #8]
 80086b6:	690b      	ldr	r3, [r1, #16]
 80086b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086bc:	4293      	cmp	r3, r2
 80086be:	bfb8      	it	lt
 80086c0:	4613      	movlt	r3, r2
 80086c2:	6033      	str	r3, [r6, #0]
 80086c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086c8:	4607      	mov	r7, r0
 80086ca:	460c      	mov	r4, r1
 80086cc:	b10a      	cbz	r2, 80086d2 <_printf_common+0x26>
 80086ce:	3301      	adds	r3, #1
 80086d0:	6033      	str	r3, [r6, #0]
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	0699      	lsls	r1, r3, #26
 80086d6:	bf42      	ittt	mi
 80086d8:	6833      	ldrmi	r3, [r6, #0]
 80086da:	3302      	addmi	r3, #2
 80086dc:	6033      	strmi	r3, [r6, #0]
 80086de:	6825      	ldr	r5, [r4, #0]
 80086e0:	f015 0506 	ands.w	r5, r5, #6
 80086e4:	d106      	bne.n	80086f4 <_printf_common+0x48>
 80086e6:	f104 0a19 	add.w	sl, r4, #25
 80086ea:	68e3      	ldr	r3, [r4, #12]
 80086ec:	6832      	ldr	r2, [r6, #0]
 80086ee:	1a9b      	subs	r3, r3, r2
 80086f0:	42ab      	cmp	r3, r5
 80086f2:	dc26      	bgt.n	8008742 <_printf_common+0x96>
 80086f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086f8:	1e13      	subs	r3, r2, #0
 80086fa:	6822      	ldr	r2, [r4, #0]
 80086fc:	bf18      	it	ne
 80086fe:	2301      	movne	r3, #1
 8008700:	0692      	lsls	r2, r2, #26
 8008702:	d42b      	bmi.n	800875c <_printf_common+0xb0>
 8008704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008708:	4649      	mov	r1, r9
 800870a:	4638      	mov	r0, r7
 800870c:	47c0      	blx	r8
 800870e:	3001      	adds	r0, #1
 8008710:	d01e      	beq.n	8008750 <_printf_common+0xa4>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	68e5      	ldr	r5, [r4, #12]
 8008716:	6832      	ldr	r2, [r6, #0]
 8008718:	f003 0306 	and.w	r3, r3, #6
 800871c:	2b04      	cmp	r3, #4
 800871e:	bf08      	it	eq
 8008720:	1aad      	subeq	r5, r5, r2
 8008722:	68a3      	ldr	r3, [r4, #8]
 8008724:	6922      	ldr	r2, [r4, #16]
 8008726:	bf0c      	ite	eq
 8008728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800872c:	2500      	movne	r5, #0
 800872e:	4293      	cmp	r3, r2
 8008730:	bfc4      	itt	gt
 8008732:	1a9b      	subgt	r3, r3, r2
 8008734:	18ed      	addgt	r5, r5, r3
 8008736:	2600      	movs	r6, #0
 8008738:	341a      	adds	r4, #26
 800873a:	42b5      	cmp	r5, r6
 800873c:	d11a      	bne.n	8008774 <_printf_common+0xc8>
 800873e:	2000      	movs	r0, #0
 8008740:	e008      	b.n	8008754 <_printf_common+0xa8>
 8008742:	2301      	movs	r3, #1
 8008744:	4652      	mov	r2, sl
 8008746:	4649      	mov	r1, r9
 8008748:	4638      	mov	r0, r7
 800874a:	47c0      	blx	r8
 800874c:	3001      	adds	r0, #1
 800874e:	d103      	bne.n	8008758 <_printf_common+0xac>
 8008750:	f04f 30ff 	mov.w	r0, #4294967295
 8008754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008758:	3501      	adds	r5, #1
 800875a:	e7c6      	b.n	80086ea <_printf_common+0x3e>
 800875c:	18e1      	adds	r1, r4, r3
 800875e:	1c5a      	adds	r2, r3, #1
 8008760:	2030      	movs	r0, #48	; 0x30
 8008762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008766:	4422      	add	r2, r4
 8008768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800876c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008770:	3302      	adds	r3, #2
 8008772:	e7c7      	b.n	8008704 <_printf_common+0x58>
 8008774:	2301      	movs	r3, #1
 8008776:	4622      	mov	r2, r4
 8008778:	4649      	mov	r1, r9
 800877a:	4638      	mov	r0, r7
 800877c:	47c0      	blx	r8
 800877e:	3001      	adds	r0, #1
 8008780:	d0e6      	beq.n	8008750 <_printf_common+0xa4>
 8008782:	3601      	adds	r6, #1
 8008784:	e7d9      	b.n	800873a <_printf_common+0x8e>
	...

08008788 <_printf_i>:
 8008788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800878c:	7e0f      	ldrb	r7, [r1, #24]
 800878e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008790:	2f78      	cmp	r7, #120	; 0x78
 8008792:	4691      	mov	r9, r2
 8008794:	4680      	mov	r8, r0
 8008796:	460c      	mov	r4, r1
 8008798:	469a      	mov	sl, r3
 800879a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800879e:	d807      	bhi.n	80087b0 <_printf_i+0x28>
 80087a0:	2f62      	cmp	r7, #98	; 0x62
 80087a2:	d80a      	bhi.n	80087ba <_printf_i+0x32>
 80087a4:	2f00      	cmp	r7, #0
 80087a6:	f000 80d8 	beq.w	800895a <_printf_i+0x1d2>
 80087aa:	2f58      	cmp	r7, #88	; 0x58
 80087ac:	f000 80a3 	beq.w	80088f6 <_printf_i+0x16e>
 80087b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087b8:	e03a      	b.n	8008830 <_printf_i+0xa8>
 80087ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087be:	2b15      	cmp	r3, #21
 80087c0:	d8f6      	bhi.n	80087b0 <_printf_i+0x28>
 80087c2:	a101      	add	r1, pc, #4	; (adr r1, 80087c8 <_printf_i+0x40>)
 80087c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087c8:	08008821 	.word	0x08008821
 80087cc:	08008835 	.word	0x08008835
 80087d0:	080087b1 	.word	0x080087b1
 80087d4:	080087b1 	.word	0x080087b1
 80087d8:	080087b1 	.word	0x080087b1
 80087dc:	080087b1 	.word	0x080087b1
 80087e0:	08008835 	.word	0x08008835
 80087e4:	080087b1 	.word	0x080087b1
 80087e8:	080087b1 	.word	0x080087b1
 80087ec:	080087b1 	.word	0x080087b1
 80087f0:	080087b1 	.word	0x080087b1
 80087f4:	08008941 	.word	0x08008941
 80087f8:	08008865 	.word	0x08008865
 80087fc:	08008923 	.word	0x08008923
 8008800:	080087b1 	.word	0x080087b1
 8008804:	080087b1 	.word	0x080087b1
 8008808:	08008963 	.word	0x08008963
 800880c:	080087b1 	.word	0x080087b1
 8008810:	08008865 	.word	0x08008865
 8008814:	080087b1 	.word	0x080087b1
 8008818:	080087b1 	.word	0x080087b1
 800881c:	0800892b 	.word	0x0800892b
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	1d1a      	adds	r2, r3, #4
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	602a      	str	r2, [r5, #0]
 8008828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800882c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008830:	2301      	movs	r3, #1
 8008832:	e0a3      	b.n	800897c <_printf_i+0x1f4>
 8008834:	6820      	ldr	r0, [r4, #0]
 8008836:	6829      	ldr	r1, [r5, #0]
 8008838:	0606      	lsls	r6, r0, #24
 800883a:	f101 0304 	add.w	r3, r1, #4
 800883e:	d50a      	bpl.n	8008856 <_printf_i+0xce>
 8008840:	680e      	ldr	r6, [r1, #0]
 8008842:	602b      	str	r3, [r5, #0]
 8008844:	2e00      	cmp	r6, #0
 8008846:	da03      	bge.n	8008850 <_printf_i+0xc8>
 8008848:	232d      	movs	r3, #45	; 0x2d
 800884a:	4276      	negs	r6, r6
 800884c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008850:	485e      	ldr	r0, [pc, #376]	; (80089cc <_printf_i+0x244>)
 8008852:	230a      	movs	r3, #10
 8008854:	e019      	b.n	800888a <_printf_i+0x102>
 8008856:	680e      	ldr	r6, [r1, #0]
 8008858:	602b      	str	r3, [r5, #0]
 800885a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800885e:	bf18      	it	ne
 8008860:	b236      	sxthne	r6, r6
 8008862:	e7ef      	b.n	8008844 <_printf_i+0xbc>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	6820      	ldr	r0, [r4, #0]
 8008868:	1d19      	adds	r1, r3, #4
 800886a:	6029      	str	r1, [r5, #0]
 800886c:	0601      	lsls	r1, r0, #24
 800886e:	d501      	bpl.n	8008874 <_printf_i+0xec>
 8008870:	681e      	ldr	r6, [r3, #0]
 8008872:	e002      	b.n	800887a <_printf_i+0xf2>
 8008874:	0646      	lsls	r6, r0, #25
 8008876:	d5fb      	bpl.n	8008870 <_printf_i+0xe8>
 8008878:	881e      	ldrh	r6, [r3, #0]
 800887a:	4854      	ldr	r0, [pc, #336]	; (80089cc <_printf_i+0x244>)
 800887c:	2f6f      	cmp	r7, #111	; 0x6f
 800887e:	bf0c      	ite	eq
 8008880:	2308      	moveq	r3, #8
 8008882:	230a      	movne	r3, #10
 8008884:	2100      	movs	r1, #0
 8008886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800888a:	6865      	ldr	r5, [r4, #4]
 800888c:	60a5      	str	r5, [r4, #8]
 800888e:	2d00      	cmp	r5, #0
 8008890:	bfa2      	ittt	ge
 8008892:	6821      	ldrge	r1, [r4, #0]
 8008894:	f021 0104 	bicge.w	r1, r1, #4
 8008898:	6021      	strge	r1, [r4, #0]
 800889a:	b90e      	cbnz	r6, 80088a0 <_printf_i+0x118>
 800889c:	2d00      	cmp	r5, #0
 800889e:	d04d      	beq.n	800893c <_printf_i+0x1b4>
 80088a0:	4615      	mov	r5, r2
 80088a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80088a6:	fb03 6711 	mls	r7, r3, r1, r6
 80088aa:	5dc7      	ldrb	r7, [r0, r7]
 80088ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088b0:	4637      	mov	r7, r6
 80088b2:	42bb      	cmp	r3, r7
 80088b4:	460e      	mov	r6, r1
 80088b6:	d9f4      	bls.n	80088a2 <_printf_i+0x11a>
 80088b8:	2b08      	cmp	r3, #8
 80088ba:	d10b      	bne.n	80088d4 <_printf_i+0x14c>
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	07de      	lsls	r6, r3, #31
 80088c0:	d508      	bpl.n	80088d4 <_printf_i+0x14c>
 80088c2:	6923      	ldr	r3, [r4, #16]
 80088c4:	6861      	ldr	r1, [r4, #4]
 80088c6:	4299      	cmp	r1, r3
 80088c8:	bfde      	ittt	le
 80088ca:	2330      	movle	r3, #48	; 0x30
 80088cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088d4:	1b52      	subs	r2, r2, r5
 80088d6:	6122      	str	r2, [r4, #16]
 80088d8:	f8cd a000 	str.w	sl, [sp]
 80088dc:	464b      	mov	r3, r9
 80088de:	aa03      	add	r2, sp, #12
 80088e0:	4621      	mov	r1, r4
 80088e2:	4640      	mov	r0, r8
 80088e4:	f7ff fee2 	bl	80086ac <_printf_common>
 80088e8:	3001      	adds	r0, #1
 80088ea:	d14c      	bne.n	8008986 <_printf_i+0x1fe>
 80088ec:	f04f 30ff 	mov.w	r0, #4294967295
 80088f0:	b004      	add	sp, #16
 80088f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f6:	4835      	ldr	r0, [pc, #212]	; (80089cc <_printf_i+0x244>)
 80088f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088fc:	6829      	ldr	r1, [r5, #0]
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	f851 6b04 	ldr.w	r6, [r1], #4
 8008904:	6029      	str	r1, [r5, #0]
 8008906:	061d      	lsls	r5, r3, #24
 8008908:	d514      	bpl.n	8008934 <_printf_i+0x1ac>
 800890a:	07df      	lsls	r7, r3, #31
 800890c:	bf44      	itt	mi
 800890e:	f043 0320 	orrmi.w	r3, r3, #32
 8008912:	6023      	strmi	r3, [r4, #0]
 8008914:	b91e      	cbnz	r6, 800891e <_printf_i+0x196>
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	f023 0320 	bic.w	r3, r3, #32
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	2310      	movs	r3, #16
 8008920:	e7b0      	b.n	8008884 <_printf_i+0xfc>
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	f043 0320 	orr.w	r3, r3, #32
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	2378      	movs	r3, #120	; 0x78
 800892c:	4828      	ldr	r0, [pc, #160]	; (80089d0 <_printf_i+0x248>)
 800892e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008932:	e7e3      	b.n	80088fc <_printf_i+0x174>
 8008934:	0659      	lsls	r1, r3, #25
 8008936:	bf48      	it	mi
 8008938:	b2b6      	uxthmi	r6, r6
 800893a:	e7e6      	b.n	800890a <_printf_i+0x182>
 800893c:	4615      	mov	r5, r2
 800893e:	e7bb      	b.n	80088b8 <_printf_i+0x130>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	6826      	ldr	r6, [r4, #0]
 8008944:	6961      	ldr	r1, [r4, #20]
 8008946:	1d18      	adds	r0, r3, #4
 8008948:	6028      	str	r0, [r5, #0]
 800894a:	0635      	lsls	r5, r6, #24
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	d501      	bpl.n	8008954 <_printf_i+0x1cc>
 8008950:	6019      	str	r1, [r3, #0]
 8008952:	e002      	b.n	800895a <_printf_i+0x1d2>
 8008954:	0670      	lsls	r0, r6, #25
 8008956:	d5fb      	bpl.n	8008950 <_printf_i+0x1c8>
 8008958:	8019      	strh	r1, [r3, #0]
 800895a:	2300      	movs	r3, #0
 800895c:	6123      	str	r3, [r4, #16]
 800895e:	4615      	mov	r5, r2
 8008960:	e7ba      	b.n	80088d8 <_printf_i+0x150>
 8008962:	682b      	ldr	r3, [r5, #0]
 8008964:	1d1a      	adds	r2, r3, #4
 8008966:	602a      	str	r2, [r5, #0]
 8008968:	681d      	ldr	r5, [r3, #0]
 800896a:	6862      	ldr	r2, [r4, #4]
 800896c:	2100      	movs	r1, #0
 800896e:	4628      	mov	r0, r5
 8008970:	f7f7 fc46 	bl	8000200 <memchr>
 8008974:	b108      	cbz	r0, 800897a <_printf_i+0x1f2>
 8008976:	1b40      	subs	r0, r0, r5
 8008978:	6060      	str	r0, [r4, #4]
 800897a:	6863      	ldr	r3, [r4, #4]
 800897c:	6123      	str	r3, [r4, #16]
 800897e:	2300      	movs	r3, #0
 8008980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008984:	e7a8      	b.n	80088d8 <_printf_i+0x150>
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	462a      	mov	r2, r5
 800898a:	4649      	mov	r1, r9
 800898c:	4640      	mov	r0, r8
 800898e:	47d0      	blx	sl
 8008990:	3001      	adds	r0, #1
 8008992:	d0ab      	beq.n	80088ec <_printf_i+0x164>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	079b      	lsls	r3, r3, #30
 8008998:	d413      	bmi.n	80089c2 <_printf_i+0x23a>
 800899a:	68e0      	ldr	r0, [r4, #12]
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	4298      	cmp	r0, r3
 80089a0:	bfb8      	it	lt
 80089a2:	4618      	movlt	r0, r3
 80089a4:	e7a4      	b.n	80088f0 <_printf_i+0x168>
 80089a6:	2301      	movs	r3, #1
 80089a8:	4632      	mov	r2, r6
 80089aa:	4649      	mov	r1, r9
 80089ac:	4640      	mov	r0, r8
 80089ae:	47d0      	blx	sl
 80089b0:	3001      	adds	r0, #1
 80089b2:	d09b      	beq.n	80088ec <_printf_i+0x164>
 80089b4:	3501      	adds	r5, #1
 80089b6:	68e3      	ldr	r3, [r4, #12]
 80089b8:	9903      	ldr	r1, [sp, #12]
 80089ba:	1a5b      	subs	r3, r3, r1
 80089bc:	42ab      	cmp	r3, r5
 80089be:	dcf2      	bgt.n	80089a6 <_printf_i+0x21e>
 80089c0:	e7eb      	b.n	800899a <_printf_i+0x212>
 80089c2:	2500      	movs	r5, #0
 80089c4:	f104 0619 	add.w	r6, r4, #25
 80089c8:	e7f5      	b.n	80089b6 <_printf_i+0x22e>
 80089ca:	bf00      	nop
 80089cc:	08057691 	.word	0x08057691
 80089d0:	080576a2 	.word	0x080576a2

080089d4 <memcpy>:
 80089d4:	440a      	add	r2, r1
 80089d6:	4291      	cmp	r1, r2
 80089d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80089dc:	d100      	bne.n	80089e0 <memcpy+0xc>
 80089de:	4770      	bx	lr
 80089e0:	b510      	push	{r4, lr}
 80089e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ea:	4291      	cmp	r1, r2
 80089ec:	d1f9      	bne.n	80089e2 <memcpy+0xe>
 80089ee:	bd10      	pop	{r4, pc}

080089f0 <memmove>:
 80089f0:	4288      	cmp	r0, r1
 80089f2:	b510      	push	{r4, lr}
 80089f4:	eb01 0402 	add.w	r4, r1, r2
 80089f8:	d902      	bls.n	8008a00 <memmove+0x10>
 80089fa:	4284      	cmp	r4, r0
 80089fc:	4623      	mov	r3, r4
 80089fe:	d807      	bhi.n	8008a10 <memmove+0x20>
 8008a00:	1e43      	subs	r3, r0, #1
 8008a02:	42a1      	cmp	r1, r4
 8008a04:	d008      	beq.n	8008a18 <memmove+0x28>
 8008a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a0e:	e7f8      	b.n	8008a02 <memmove+0x12>
 8008a10:	4402      	add	r2, r0
 8008a12:	4601      	mov	r1, r0
 8008a14:	428a      	cmp	r2, r1
 8008a16:	d100      	bne.n	8008a1a <memmove+0x2a>
 8008a18:	bd10      	pop	{r4, pc}
 8008a1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a22:	e7f7      	b.n	8008a14 <memmove+0x24>

08008a24 <_free_r>:
 8008a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a26:	2900      	cmp	r1, #0
 8008a28:	d044      	beq.n	8008ab4 <_free_r+0x90>
 8008a2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a2e:	9001      	str	r0, [sp, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f1a1 0404 	sub.w	r4, r1, #4
 8008a36:	bfb8      	it	lt
 8008a38:	18e4      	addlt	r4, r4, r3
 8008a3a:	f000 f913 	bl	8008c64 <__malloc_lock>
 8008a3e:	4a1e      	ldr	r2, [pc, #120]	; (8008ab8 <_free_r+0x94>)
 8008a40:	9801      	ldr	r0, [sp, #4]
 8008a42:	6813      	ldr	r3, [r2, #0]
 8008a44:	b933      	cbnz	r3, 8008a54 <_free_r+0x30>
 8008a46:	6063      	str	r3, [r4, #4]
 8008a48:	6014      	str	r4, [r2, #0]
 8008a4a:	b003      	add	sp, #12
 8008a4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a50:	f000 b90e 	b.w	8008c70 <__malloc_unlock>
 8008a54:	42a3      	cmp	r3, r4
 8008a56:	d908      	bls.n	8008a6a <_free_r+0x46>
 8008a58:	6825      	ldr	r5, [r4, #0]
 8008a5a:	1961      	adds	r1, r4, r5
 8008a5c:	428b      	cmp	r3, r1
 8008a5e:	bf01      	itttt	eq
 8008a60:	6819      	ldreq	r1, [r3, #0]
 8008a62:	685b      	ldreq	r3, [r3, #4]
 8008a64:	1949      	addeq	r1, r1, r5
 8008a66:	6021      	streq	r1, [r4, #0]
 8008a68:	e7ed      	b.n	8008a46 <_free_r+0x22>
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	b10b      	cbz	r3, 8008a74 <_free_r+0x50>
 8008a70:	42a3      	cmp	r3, r4
 8008a72:	d9fa      	bls.n	8008a6a <_free_r+0x46>
 8008a74:	6811      	ldr	r1, [r2, #0]
 8008a76:	1855      	adds	r5, r2, r1
 8008a78:	42a5      	cmp	r5, r4
 8008a7a:	d10b      	bne.n	8008a94 <_free_r+0x70>
 8008a7c:	6824      	ldr	r4, [r4, #0]
 8008a7e:	4421      	add	r1, r4
 8008a80:	1854      	adds	r4, r2, r1
 8008a82:	42a3      	cmp	r3, r4
 8008a84:	6011      	str	r1, [r2, #0]
 8008a86:	d1e0      	bne.n	8008a4a <_free_r+0x26>
 8008a88:	681c      	ldr	r4, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	6053      	str	r3, [r2, #4]
 8008a8e:	4421      	add	r1, r4
 8008a90:	6011      	str	r1, [r2, #0]
 8008a92:	e7da      	b.n	8008a4a <_free_r+0x26>
 8008a94:	d902      	bls.n	8008a9c <_free_r+0x78>
 8008a96:	230c      	movs	r3, #12
 8008a98:	6003      	str	r3, [r0, #0]
 8008a9a:	e7d6      	b.n	8008a4a <_free_r+0x26>
 8008a9c:	6825      	ldr	r5, [r4, #0]
 8008a9e:	1961      	adds	r1, r4, r5
 8008aa0:	428b      	cmp	r3, r1
 8008aa2:	bf04      	itt	eq
 8008aa4:	6819      	ldreq	r1, [r3, #0]
 8008aa6:	685b      	ldreq	r3, [r3, #4]
 8008aa8:	6063      	str	r3, [r4, #4]
 8008aaa:	bf04      	itt	eq
 8008aac:	1949      	addeq	r1, r1, r5
 8008aae:	6021      	streq	r1, [r4, #0]
 8008ab0:	6054      	str	r4, [r2, #4]
 8008ab2:	e7ca      	b.n	8008a4a <_free_r+0x26>
 8008ab4:	b003      	add	sp, #12
 8008ab6:	bd30      	pop	{r4, r5, pc}
 8008ab8:	20000824 	.word	0x20000824

08008abc <sbrk_aligned>:
 8008abc:	b570      	push	{r4, r5, r6, lr}
 8008abe:	4e0e      	ldr	r6, [pc, #56]	; (8008af8 <sbrk_aligned+0x3c>)
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	6831      	ldr	r1, [r6, #0]
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	b911      	cbnz	r1, 8008ace <sbrk_aligned+0x12>
 8008ac8:	f000 f8bc 	bl	8008c44 <_sbrk_r>
 8008acc:	6030      	str	r0, [r6, #0]
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f000 f8b7 	bl	8008c44 <_sbrk_r>
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	d00a      	beq.n	8008af0 <sbrk_aligned+0x34>
 8008ada:	1cc4      	adds	r4, r0, #3
 8008adc:	f024 0403 	bic.w	r4, r4, #3
 8008ae0:	42a0      	cmp	r0, r4
 8008ae2:	d007      	beq.n	8008af4 <sbrk_aligned+0x38>
 8008ae4:	1a21      	subs	r1, r4, r0
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f000 f8ac 	bl	8008c44 <_sbrk_r>
 8008aec:	3001      	adds	r0, #1
 8008aee:	d101      	bne.n	8008af4 <sbrk_aligned+0x38>
 8008af0:	f04f 34ff 	mov.w	r4, #4294967295
 8008af4:	4620      	mov	r0, r4
 8008af6:	bd70      	pop	{r4, r5, r6, pc}
 8008af8:	20000828 	.word	0x20000828

08008afc <_malloc_r>:
 8008afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b00:	1ccd      	adds	r5, r1, #3
 8008b02:	f025 0503 	bic.w	r5, r5, #3
 8008b06:	3508      	adds	r5, #8
 8008b08:	2d0c      	cmp	r5, #12
 8008b0a:	bf38      	it	cc
 8008b0c:	250c      	movcc	r5, #12
 8008b0e:	2d00      	cmp	r5, #0
 8008b10:	4607      	mov	r7, r0
 8008b12:	db01      	blt.n	8008b18 <_malloc_r+0x1c>
 8008b14:	42a9      	cmp	r1, r5
 8008b16:	d905      	bls.n	8008b24 <_malloc_r+0x28>
 8008b18:	230c      	movs	r3, #12
 8008b1a:	603b      	str	r3, [r7, #0]
 8008b1c:	2600      	movs	r6, #0
 8008b1e:	4630      	mov	r0, r6
 8008b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b24:	4e2e      	ldr	r6, [pc, #184]	; (8008be0 <_malloc_r+0xe4>)
 8008b26:	f000 f89d 	bl	8008c64 <__malloc_lock>
 8008b2a:	6833      	ldr	r3, [r6, #0]
 8008b2c:	461c      	mov	r4, r3
 8008b2e:	bb34      	cbnz	r4, 8008b7e <_malloc_r+0x82>
 8008b30:	4629      	mov	r1, r5
 8008b32:	4638      	mov	r0, r7
 8008b34:	f7ff ffc2 	bl	8008abc <sbrk_aligned>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	d14d      	bne.n	8008bda <_malloc_r+0xde>
 8008b3e:	6834      	ldr	r4, [r6, #0]
 8008b40:	4626      	mov	r6, r4
 8008b42:	2e00      	cmp	r6, #0
 8008b44:	d140      	bne.n	8008bc8 <_malloc_r+0xcc>
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	4631      	mov	r1, r6
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	eb04 0803 	add.w	r8, r4, r3
 8008b50:	f000 f878 	bl	8008c44 <_sbrk_r>
 8008b54:	4580      	cmp	r8, r0
 8008b56:	d13a      	bne.n	8008bce <_malloc_r+0xd2>
 8008b58:	6821      	ldr	r1, [r4, #0]
 8008b5a:	3503      	adds	r5, #3
 8008b5c:	1a6d      	subs	r5, r5, r1
 8008b5e:	f025 0503 	bic.w	r5, r5, #3
 8008b62:	3508      	adds	r5, #8
 8008b64:	2d0c      	cmp	r5, #12
 8008b66:	bf38      	it	cc
 8008b68:	250c      	movcc	r5, #12
 8008b6a:	4629      	mov	r1, r5
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	f7ff ffa5 	bl	8008abc <sbrk_aligned>
 8008b72:	3001      	adds	r0, #1
 8008b74:	d02b      	beq.n	8008bce <_malloc_r+0xd2>
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	442b      	add	r3, r5
 8008b7a:	6023      	str	r3, [r4, #0]
 8008b7c:	e00e      	b.n	8008b9c <_malloc_r+0xa0>
 8008b7e:	6822      	ldr	r2, [r4, #0]
 8008b80:	1b52      	subs	r2, r2, r5
 8008b82:	d41e      	bmi.n	8008bc2 <_malloc_r+0xc6>
 8008b84:	2a0b      	cmp	r2, #11
 8008b86:	d916      	bls.n	8008bb6 <_malloc_r+0xba>
 8008b88:	1961      	adds	r1, r4, r5
 8008b8a:	42a3      	cmp	r3, r4
 8008b8c:	6025      	str	r5, [r4, #0]
 8008b8e:	bf18      	it	ne
 8008b90:	6059      	strne	r1, [r3, #4]
 8008b92:	6863      	ldr	r3, [r4, #4]
 8008b94:	bf08      	it	eq
 8008b96:	6031      	streq	r1, [r6, #0]
 8008b98:	5162      	str	r2, [r4, r5]
 8008b9a:	604b      	str	r3, [r1, #4]
 8008b9c:	4638      	mov	r0, r7
 8008b9e:	f104 060b 	add.w	r6, r4, #11
 8008ba2:	f000 f865 	bl	8008c70 <__malloc_unlock>
 8008ba6:	f026 0607 	bic.w	r6, r6, #7
 8008baa:	1d23      	adds	r3, r4, #4
 8008bac:	1af2      	subs	r2, r6, r3
 8008bae:	d0b6      	beq.n	8008b1e <_malloc_r+0x22>
 8008bb0:	1b9b      	subs	r3, r3, r6
 8008bb2:	50a3      	str	r3, [r4, r2]
 8008bb4:	e7b3      	b.n	8008b1e <_malloc_r+0x22>
 8008bb6:	6862      	ldr	r2, [r4, #4]
 8008bb8:	42a3      	cmp	r3, r4
 8008bba:	bf0c      	ite	eq
 8008bbc:	6032      	streq	r2, [r6, #0]
 8008bbe:	605a      	strne	r2, [r3, #4]
 8008bc0:	e7ec      	b.n	8008b9c <_malloc_r+0xa0>
 8008bc2:	4623      	mov	r3, r4
 8008bc4:	6864      	ldr	r4, [r4, #4]
 8008bc6:	e7b2      	b.n	8008b2e <_malloc_r+0x32>
 8008bc8:	4634      	mov	r4, r6
 8008bca:	6876      	ldr	r6, [r6, #4]
 8008bcc:	e7b9      	b.n	8008b42 <_malloc_r+0x46>
 8008bce:	230c      	movs	r3, #12
 8008bd0:	603b      	str	r3, [r7, #0]
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	f000 f84c 	bl	8008c70 <__malloc_unlock>
 8008bd8:	e7a1      	b.n	8008b1e <_malloc_r+0x22>
 8008bda:	6025      	str	r5, [r4, #0]
 8008bdc:	e7de      	b.n	8008b9c <_malloc_r+0xa0>
 8008bde:	bf00      	nop
 8008be0:	20000824 	.word	0x20000824

08008be4 <_realloc_r>:
 8008be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be8:	4680      	mov	r8, r0
 8008bea:	4614      	mov	r4, r2
 8008bec:	460e      	mov	r6, r1
 8008bee:	b921      	cbnz	r1, 8008bfa <_realloc_r+0x16>
 8008bf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	f7ff bf81 	b.w	8008afc <_malloc_r>
 8008bfa:	b92a      	cbnz	r2, 8008c08 <_realloc_r+0x24>
 8008bfc:	f7ff ff12 	bl	8008a24 <_free_r>
 8008c00:	4625      	mov	r5, r4
 8008c02:	4628      	mov	r0, r5
 8008c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c08:	f000 f838 	bl	8008c7c <_malloc_usable_size_r>
 8008c0c:	4284      	cmp	r4, r0
 8008c0e:	4607      	mov	r7, r0
 8008c10:	d802      	bhi.n	8008c18 <_realloc_r+0x34>
 8008c12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c16:	d812      	bhi.n	8008c3e <_realloc_r+0x5a>
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4640      	mov	r0, r8
 8008c1c:	f7ff ff6e 	bl	8008afc <_malloc_r>
 8008c20:	4605      	mov	r5, r0
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d0ed      	beq.n	8008c02 <_realloc_r+0x1e>
 8008c26:	42bc      	cmp	r4, r7
 8008c28:	4622      	mov	r2, r4
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	bf28      	it	cs
 8008c2e:	463a      	movcs	r2, r7
 8008c30:	f7ff fed0 	bl	80089d4 <memcpy>
 8008c34:	4631      	mov	r1, r6
 8008c36:	4640      	mov	r0, r8
 8008c38:	f7ff fef4 	bl	8008a24 <_free_r>
 8008c3c:	e7e1      	b.n	8008c02 <_realloc_r+0x1e>
 8008c3e:	4635      	mov	r5, r6
 8008c40:	e7df      	b.n	8008c02 <_realloc_r+0x1e>
	...

08008c44 <_sbrk_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4d06      	ldr	r5, [pc, #24]	; (8008c60 <_sbrk_r+0x1c>)
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	4608      	mov	r0, r1
 8008c4e:	602b      	str	r3, [r5, #0]
 8008c50:	f7f9 f9bc 	bl	8001fcc <_sbrk>
 8008c54:	1c43      	adds	r3, r0, #1
 8008c56:	d102      	bne.n	8008c5e <_sbrk_r+0x1a>
 8008c58:	682b      	ldr	r3, [r5, #0]
 8008c5a:	b103      	cbz	r3, 8008c5e <_sbrk_r+0x1a>
 8008c5c:	6023      	str	r3, [r4, #0]
 8008c5e:	bd38      	pop	{r3, r4, r5, pc}
 8008c60:	2000082c 	.word	0x2000082c

08008c64 <__malloc_lock>:
 8008c64:	4801      	ldr	r0, [pc, #4]	; (8008c6c <__malloc_lock+0x8>)
 8008c66:	f000 b811 	b.w	8008c8c <__retarget_lock_acquire_recursive>
 8008c6a:	bf00      	nop
 8008c6c:	20000830 	.word	0x20000830

08008c70 <__malloc_unlock>:
 8008c70:	4801      	ldr	r0, [pc, #4]	; (8008c78 <__malloc_unlock+0x8>)
 8008c72:	f000 b80c 	b.w	8008c8e <__retarget_lock_release_recursive>
 8008c76:	bf00      	nop
 8008c78:	20000830 	.word	0x20000830

08008c7c <_malloc_usable_size_r>:
 8008c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c80:	1f18      	subs	r0, r3, #4
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	bfbc      	itt	lt
 8008c86:	580b      	ldrlt	r3, [r1, r0]
 8008c88:	18c0      	addlt	r0, r0, r3
 8008c8a:	4770      	bx	lr

08008c8c <__retarget_lock_acquire_recursive>:
 8008c8c:	4770      	bx	lr

08008c8e <__retarget_lock_release_recursive>:
 8008c8e:	4770      	bx	lr

08008c90 <_init>:
 8008c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c92:	bf00      	nop
 8008c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c96:	bc08      	pop	{r3}
 8008c98:	469e      	mov	lr, r3
 8008c9a:	4770      	bx	lr

08008c9c <_fini>:
 8008c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9e:	bf00      	nop
 8008ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca2:	bc08      	pop	{r3}
 8008ca4:	469e      	mov	lr, r3
 8008ca6:	4770      	bx	lr
