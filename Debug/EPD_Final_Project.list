
EPD_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004ea0c  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080576a0  080576a0  0007010c  2**0
                  CONTENTS
  4 .ARM          00000008  080576a0  080576a0  000676a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080576a8  080576a8  0007010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080576a8  080576a8  000676a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080576ac  080576ac  000676ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  080576b0  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0007010c  2**0
                  CONTENTS
 10 .bss          00000728  2000010c  2000010c  0007010c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000834  20000834  0007010c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0007010c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021944  00000000  00000000  0007013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bf1  00000000  00000000  00091a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c68  00000000  00000000  00096678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a08  00000000  00000000  000982e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296e6  00000000  00000000  00099ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000245c8  00000000  00000000  000c33ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef462  00000000  00000000  000e7996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d6df8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007908  00000000  00000000  001d6e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008c7c 	.word	0x08008c7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000110 	.word	0x20000110
 80001ec:	08008c7c 	.word	0x08008c7c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005aa:	4a16      	ldr	r2, [pc, #88]	; (8000604 <MX_DMA2D_Init+0x60>)
 80005ac:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005c8:	2202      	movs	r2, #2
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005da:	f002 f98f 	bl	80028fc <HAL_DMA2D_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80005e4:	f001 fb64 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005e8:	2101      	movs	r1, #1
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_DMA2D_Init+0x5c>)
 80005ec:	f002 fae4 	bl	8002bb8 <HAL_DMA2D_ConfigLayer>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005f6:	f001 fb5b 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000128 	.word	0x20000128
 8000604:	4002b000 	.word	0x4002b000

08000608 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <HAL_DMA2D_MspInit+0x3c>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d10d      	bne.n	8000636 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_DMA2D_MspInit+0x40>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <HAL_DMA2D_MspInit+0x40>)
 8000624:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <HAL_DMA2D_MspInit+0x40>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	4002b000 	.word	0x4002b000
 8000648:	40023800 	.word	0x40023800

0800064c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
 8000660:	615a      	str	r2, [r3, #20]
 8000662:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_FMC_Init+0x94>)
 8000666:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <MX_FMC_Init+0x98>)
 8000668:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_FMC_Init+0x94>)
 800066c:	2201      	movs	r2, #1
 800066e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_FMC_Init+0x94>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_FMC_Init+0x94>)
 8000678:	2204      	movs	r2, #4
 800067a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_FMC_Init+0x94>)
 800067e:	2210      	movs	r2, #16
 8000680:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_FMC_Init+0x94>)
 8000684:	2240      	movs	r2, #64	; 0x40
 8000686:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_FMC_Init+0x94>)
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_FMC_Init+0x94>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_FMC_Init+0x94>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_FMC_Init+0x94>)
 800069c:	2200      	movs	r2, #0
 800069e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_FMC_Init+0x94>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80006a6:	2310      	movs	r3, #16
 80006a8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80006aa:	2310      	movs	r3, #16
 80006ac:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80006ae:	2310      	movs	r3, #16
 80006b0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80006b2:	2310      	movs	r3, #16
 80006b4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80006b6:	2310      	movs	r3, #16
 80006b8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80006ba:	2310      	movs	r3, #16
 80006bc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80006be:	2310      	movs	r3, #16
 80006c0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <MX_FMC_Init+0x94>)
 80006c8:	f004 fdae 	bl	8005228 <HAL_SDRAM_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80006d2:	f001 faed 	bl	8001cb0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80006d6:	bf00      	nop
 80006d8:	3720      	adds	r7, #32
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000168 	.word	0x20000168
 80006e4:	a0000140 	.word	0xa0000140

080006e8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006fc:	4b3b      	ldr	r3, [pc, #236]	; (80007ec <HAL_FMC_MspInit+0x104>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d16f      	bne.n	80007e4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000704:	4b39      	ldr	r3, [pc, #228]	; (80007ec <HAL_FMC_MspInit+0x104>)
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b38      	ldr	r3, [pc, #224]	; (80007f0 <HAL_FMC_MspInit+0x108>)
 8000710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000712:	4a37      	ldr	r2, [pc, #220]	; (80007f0 <HAL_FMC_MspInit+0x108>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6393      	str	r3, [r2, #56]	; 0x38
 800071a:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <HAL_FMC_MspInit+0x108>)
 800071c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000726:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800072a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000738:	230c      	movs	r3, #12
 800073a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4619      	mov	r1, r3
 8000740:	482c      	ldr	r0, [pc, #176]	; (80007f4 <HAL_FMC_MspInit+0x10c>)
 8000742:	f002 fb67 	bl	8002e14 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000752:	2303      	movs	r3, #3
 8000754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000756:	230c      	movs	r3, #12
 8000758:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4619      	mov	r1, r3
 800075e:	4826      	ldr	r0, [pc, #152]	; (80007f8 <HAL_FMC_MspInit+0x110>)
 8000760:	f002 fb58 	bl	8002e14 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000764:	f248 1333 	movw	r3, #33075	; 0x8133
 8000768:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000776:	230c      	movs	r3, #12
 8000778:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	481f      	ldr	r0, [pc, #124]	; (80007fc <HAL_FMC_MspInit+0x114>)
 8000780:	f002 fb48 	bl	8002e14 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000784:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000788:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000796:	230c      	movs	r3, #12
 8000798:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	4619      	mov	r1, r3
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <HAL_FMC_MspInit+0x118>)
 80007a0:	f002 fb38 	bl	8002e14 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80007a4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80007a8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007b6:	230c      	movs	r3, #12
 80007b8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	4811      	ldr	r0, [pc, #68]	; (8000804 <HAL_FMC_MspInit+0x11c>)
 80007c0:	f002 fb28 	bl	8002e14 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80007c4:	2360      	movs	r3, #96	; 0x60
 80007c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007d4:	230c      	movs	r3, #12
 80007d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	480a      	ldr	r0, [pc, #40]	; (8000808 <HAL_FMC_MspInit+0x120>)
 80007de:	f002 fb19 	bl	8002e14 <HAL_GPIO_Init>
 80007e2:	e000      	b.n	80007e6 <HAL_FMC_MspInit+0xfe>
    return;
 80007e4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000019c 	.word	0x2000019c
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40021400 	.word	0x40021400
 80007f8:	40020800 	.word	0x40020800
 80007fc:	40021800 	.word	0x40021800
 8000800:	40021000 	.word	0x40021000
 8000804:	40020c00 	.word	0x40020c00
 8000808:	40020400 	.word	0x40020400

0800080c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000814:	f7ff ff68 	bl	80006e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08e      	sub	sp, #56	; 0x38
 8000824:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
 800083a:	4b79      	ldr	r3, [pc, #484]	; (8000a20 <MX_GPIO_Init+0x200>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a78      	ldr	r2, [pc, #480]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000840:	f043 0310 	orr.w	r3, r3, #16
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b76      	ldr	r3, [pc, #472]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	623b      	str	r3, [r7, #32]
 8000850:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
 8000856:	4b72      	ldr	r3, [pc, #456]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a71      	ldr	r2, [pc, #452]	; (8000a20 <MX_GPIO_Init+0x200>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b6f      	ldr	r3, [pc, #444]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
 8000872:	4b6b      	ldr	r3, [pc, #428]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a6a      	ldr	r2, [pc, #424]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000878:	f043 0320 	orr.w	r3, r3, #32
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b68      	ldr	r3, [pc, #416]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0320 	and.w	r3, r3, #32
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	4b64      	ldr	r3, [pc, #400]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a63      	ldr	r2, [pc, #396]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b61      	ldr	r3, [pc, #388]	; (8000a20 <MX_GPIO_Init+0x200>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b5d      	ldr	r3, [pc, #372]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a5c      	ldr	r2, [pc, #368]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b5a      	ldr	r3, [pc, #360]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b56      	ldr	r3, [pc, #344]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a55      	ldr	r2, [pc, #340]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b53      	ldr	r3, [pc, #332]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b4f      	ldr	r3, [pc, #316]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a4e      	ldr	r2, [pc, #312]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b4c      	ldr	r3, [pc, #304]	; (8000a20 <MX_GPIO_Init+0x200>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b48      	ldr	r3, [pc, #288]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a47      	ldr	r2, [pc, #284]	; (8000a20 <MX_GPIO_Init+0x200>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b45      	ldr	r3, [pc, #276]	; (8000a20 <MX_GPIO_Init+0x200>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2108      	movs	r1, #8
 800091a:	4842      	ldr	r0, [pc, #264]	; (8000a24 <MX_GPIO_Init+0x204>)
 800091c:	f002 fd4a 	bl	80033b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(reset_ESP01_GPIO_Port, reset_ESP01_Pin, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000926:	483f      	ldr	r0, [pc, #252]	; (8000a24 <MX_GPIO_Init+0x204>)
 8000928:	f002 fd44 	bl	80033b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800092c:	237c      	movs	r3, #124	; 0x7c
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000930:	2303      	movs	r3, #3
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	483a      	ldr	r0, [pc, #232]	; (8000a28 <MX_GPIO_Init+0x208>)
 8000940:	f002 fa68 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC2 PC4 PC5 PC8
                           PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8000944:	f64e 5336 	movw	r3, #60726	; 0xed36
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	4832      	ldr	r0, [pc, #200]	; (8000a24 <MX_GPIO_Init+0x204>)
 800095a:	f002 fa5b 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800095e:	2340      	movs	r3, #64	; 0x40
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000962:	2303      	movs	r3, #3
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	4619      	mov	r1, r3
 8000970:	482e      	ldr	r0, [pc, #184]	; (8000a2c <MX_GPIO_Init+0x20c>)
 8000972:	f002 fa4f 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8000976:	2308      	movs	r3, #8
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098a:	4619      	mov	r1, r3
 800098c:	4825      	ldr	r0, [pc, #148]	; (8000a24 <MX_GPIO_Init+0x204>)
 800098e:	f002 fa41 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA5
                           PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5
 8000992:	f248 03a7 	movw	r3, #32935	; 0x80a7
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000998:	2303      	movs	r3, #3
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	4822      	ldr	r0, [pc, #136]	; (8000a30 <MX_GPIO_Init+0x210>)
 80009a8:	f002 fa34 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB3 PB4 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80009ac:	f24f 039c 	movw	r3, #61596	; 0xf09c
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b2:	2303      	movs	r3, #3
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	4619      	mov	r1, r3
 80009c0:	481c      	ldr	r0, [pc, #112]	; (8000a34 <MX_GPIO_Init+0x214>)
 80009c2:	f002 fa27 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD2
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_2
 80009c6:	f643 03f4 	movw	r3, #14580	; 0x38f4
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009cc:	2303      	movs	r3, #3
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d8:	4619      	mov	r1, r3
 80009da:	4817      	ldr	r0, [pc, #92]	; (8000a38 <MX_GPIO_Init+0x218>)
 80009dc:	f002 fa1a 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG9 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_13
 80009e0:	f246 230c 	movw	r3, #25100	; 0x620c
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e6:	2303      	movs	r3, #3
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4811      	ldr	r0, [pc, #68]	; (8000a3c <MX_GPIO_Init+0x21c>)
 80009f6:	f002 fa0d 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = reset_ESP01_Pin;
 80009fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(reset_ESP01_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_GPIO_Init+0x204>)
 8000a14:	f002 f9fe 	bl	8002e14 <HAL_GPIO_Init>

}
 8000a18:	bf00      	nop
 8000a1a:	3738      	adds	r7, #56	; 0x38
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40021400 	.word	0x40021400
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40020400 	.word	0x40020400
 8000a38:	40020c00 	.word	0x40020c00
 8000a3c:	40021800 	.word	0x40021800

08000a40 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	; (8000ab8 <MX_I2C3_Init+0x78>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <MX_I2C3_Init+0x7c>)
 8000a4e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a62:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a7e:	f002 fcb3 	bl	80033e8 <HAL_I2C_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a88:	f001 f912 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000a90:	f002 fdee 	bl	8003670 <HAL_I2CEx_ConfigAnalogFilter>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000a9a:	f001 f909 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_I2C3_Init+0x74>)
 8000aa2:	f002 fe21 	bl	80036e8 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000aac:	f001 f900 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200001a0 	.word	0x200001a0
 8000ab8:	40005c00 	.word	0x40005c00
 8000abc:	000186a0 	.word	0x000186a0

08000ac0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a29      	ldr	r2, [pc, #164]	; (8000b84 <HAL_I2C_MspInit+0xc4>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d14b      	bne.n	8000b7a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a27      	ldr	r2, [pc, #156]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b20:	2312      	movs	r3, #18
 8000b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4815      	ldr	r0, [pc, #84]	; (8000b8c <HAL_I2C_MspInit+0xcc>)
 8000b38:	f002 f96c 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b42:	2312      	movs	r3, #18
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <HAL_I2C_MspInit+0xd0>)
 8000b5a:	f002 f95b 	bl	8002e14 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000b68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40005c00 	.word	0x40005c00
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020000 	.word	0x40020000

08000b94 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
	ili9341_Init();
 8000b9a:	f006 f907 	bl	8006dac <ili9341_Init>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2234      	movs	r2, #52	; 0x34
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f007 fbf3 	bl	8008390 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000baa:	4b74      	ldr	r3, [pc, #464]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bac:	4a74      	ldr	r2, [pc, #464]	; (8000d80 <MX_LTDC_Init+0x1ec>)
 8000bae:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000bb0:	4b72      	ldr	r3, [pc, #456]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bb6:	4b71      	ldr	r3, [pc, #452]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bbc:	4b6f      	ldr	r3, [pc, #444]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bc2:	4b6e      	ldr	r3, [pc, #440]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000bc8:	4b6c      	ldr	r3, [pc, #432]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bca:	2209      	movs	r2, #9
 8000bcc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000bce:	4b6b      	ldr	r3, [pc, #428]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000bd4:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bd6:	221d      	movs	r2, #29
 8000bd8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000bda:	4b68      	ldr	r3, [pc, #416]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bdc:	2203      	movs	r2, #3
 8000bde:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000be0:	4b66      	ldr	r3, [pc, #408]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000be2:	f240 120d 	movw	r2, #269	; 0x10d
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000be8:	4b64      	ldr	r3, [pc, #400]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bea:	f240 1243 	movw	r2, #323	; 0x143
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000bf0:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bf2:	f240 1217 	movw	r2, #279	; 0x117
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000bf8:	4b60      	ldr	r3, [pc, #384]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000bfa:	f240 1247 	movw	r2, #327	; 0x147
 8000bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c00:	4b5e      	ldr	r3, [pc, #376]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c08:	4b5c      	ldr	r3, [pc, #368]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c10:	4b5a      	ldr	r3, [pc, #360]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c18:	4858      	ldr	r0, [pc, #352]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c1a:	f002 fda5 	bl	8003768 <HAL_LTDC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8000c24:	f001 f844 	bl	8001cb0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000c2c:	23f0      	movs	r3, #240	; 0xf0
 8000c2e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000c34:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c38:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c3e:	23ff      	movs	r3, #255	; 0xff
 8000c40:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c4a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  //pLayerCfg.FBStartAdress = 0;

  pLayerCfg.FBStartAdress = (uint32_t) &image_data_display_1;
 8000c50:	4b4c      	ldr	r3, [pc, #304]	; (8000d84 <MX_LTDC_Init+0x1f0>)
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28


  pLayerCfg.ImageWidth = 240;
 8000c54:	23f0      	movs	r3, #240	; 0xf0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000c58:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	4619      	mov	r1, r3
 8000c76:	4841      	ldr	r0, [pc, #260]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c78:	f002 ff08 	bl	8003a8c <HAL_LTDC_ConfigLayer>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000c82:	f001 f815 	bl	8001cb0 <Error_Handler>
  }

  /* USER CODE BEGIN LTDC_Init 2 */
  HAL_Delay(2000);
 8000c86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c8a:	f001 fb43 	bl	8002314 <HAL_Delay>

  hltdc.Instance = LTDC;
 8000c8e:	4b3b      	ldr	r3, [pc, #236]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c90:	4a3b      	ldr	r2, [pc, #236]	; (8000d80 <MX_LTDC_Init+0x1ec>)
 8000c92:	601a      	str	r2, [r3, #0]
   hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c94:	4b39      	ldr	r3, [pc, #228]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	605a      	str	r2, [r3, #4]
   hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c9a:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
   hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ca0:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
   hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ca6:	4b35      	ldr	r3, [pc, #212]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
   hltdc.Init.HorizontalSync = 9;
 8000cac:	4b33      	ldr	r3, [pc, #204]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cae:	2209      	movs	r2, #9
 8000cb0:	615a      	str	r2, [r3, #20]
   hltdc.Init.VerticalSync = 1;
 8000cb2:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	619a      	str	r2, [r3, #24]
   hltdc.Init.AccumulatedHBP = 29;
 8000cb8:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cba:	221d      	movs	r2, #29
 8000cbc:	61da      	str	r2, [r3, #28]
   hltdc.Init.AccumulatedVBP = 3;
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	621a      	str	r2, [r3, #32]
   hltdc.Init.AccumulatedActiveW = 269;
 8000cc4:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cc6:	f240 120d 	movw	r2, #269	; 0x10d
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
   hltdc.Init.AccumulatedActiveH = 323;
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cce:	f240 1243 	movw	r2, #323	; 0x143
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
   hltdc.Init.TotalWidth = 279;
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cd6:	f240 1217 	movw	r2, #279	; 0x117
 8000cda:	62da      	str	r2, [r3, #44]	; 0x2c
   hltdc.Init.TotalHeigh = 327;
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cde:	f240 1247 	movw	r2, #327	; 0x147
 8000ce2:	631a      	str	r2, [r3, #48]	; 0x30
   hltdc.Init.Backcolor.Blue = 0;
 8000ce4:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   hltdc.Init.Backcolor.Green = 0;
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   hltdc.Init.Backcolor.Red = 0;
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
   if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cfc:	481f      	ldr	r0, [pc, #124]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000cfe:	f002 fd33 	bl	8003768 <HAL_LTDC_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_LTDC_Init+0x178>
   {
     Error_Handler();
 8000d08:	f000 ffd2 	bl	8001cb0 <Error_Handler>
   }
   pLayerCfg.WindowX0 = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
   pLayerCfg.WindowX1 = 240;
 8000d10:	23f0      	movs	r3, #240	; 0xf0
 8000d12:	60bb      	str	r3, [r7, #8]
   pLayerCfg.WindowY0 = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
   pLayerCfg.WindowY1 = 320;
 8000d18:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d1c:	613b      	str	r3, [r7, #16]
   pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	617b      	str	r3, [r7, #20]
   pLayerCfg.Alpha = 255;
 8000d22:	23ff      	movs	r3, #255	; 0xff
 8000d24:	61bb      	str	r3, [r7, #24]
   pLayerCfg.Alpha0 = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
   pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000d2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d2e:	623b      	str	r3, [r7, #32]
   pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d30:	2307      	movs	r3, #7
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
   //pLayerCfg.FBStartAdress = 0;

   pLayerCfg.FBStartAdress = (uint32_t) &image_data_display_2;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_LTDC_Init+0x1f4>)
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28


   pLayerCfg.ImageWidth = 240;
 8000d38:	23f0      	movs	r3, #240	; 0xf0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   pLayerCfg.ImageHeight = 320;
 8000d3c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
   pLayerCfg.Backcolor.Blue = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
   pLayerCfg.Backcolor.Green = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
   pLayerCfg.Backcolor.Red = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
   if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4808      	ldr	r0, [pc, #32]	; (8000d7c <MX_LTDC_Init+0x1e8>)
 8000d5c:	f002 fe96 	bl	8003a8c <HAL_LTDC_ConfigLayer>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_LTDC_Init+0x1d6>
   {
     Error_Handler();
 8000d66:	f000 ffa3 	bl	8001cb0 <Error_Handler>
   }
   HAL_Delay(2000);
 8000d6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d6e:	f001 fad1 	bl	8002314 <HAL_Delay>

  /* USER CODE END LTDC_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3738      	adds	r7, #56	; 0x38
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200001f4 	.word	0x200001f4
 8000d80:	40016800 	.word	0x40016800
 8000d84:	08008de4 	.word	0x08008de4
 8000d88:	0802e5e4 	.word	0x0802e5e4

08000d8c <HAL_LTDC_MspInit>:


void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b09a      	sub	sp, #104	; 0x68
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	2230      	movs	r2, #48	; 0x30
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f007 faef 	bl	8008390 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a84      	ldr	r2, [pc, #528]	; (8000fc8 <HAL_LTDC_MspInit+0x23c>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	f040 8101 	bne.w	8000fc0 <HAL_LTDC_MspInit+0x234>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000dc2:	2332      	movs	r3, #50	; 0x32
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 fd6a 	bl	80048ac <HAL_RCCEx_PeriphCLKConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000dde:	f000 ff67 	bl	8001cb0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
 8000de6:	4b79      	ldr	r3, [pc, #484]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a78      	ldr	r2, [pc, #480]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000dec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b76      	ldr	r3, [pc, #472]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dfa:	623b      	str	r3, [r7, #32]
 8000dfc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	4b72      	ldr	r3, [pc, #456]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a71      	ldr	r2, [pc, #452]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e08:	f043 0320 	orr.w	r3, r3, #32
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b6f      	ldr	r3, [pc, #444]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0320 	and.w	r3, r3, #32
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	4b6b      	ldr	r3, [pc, #428]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a6a      	ldr	r2, [pc, #424]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b68      	ldr	r3, [pc, #416]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	4b64      	ldr	r3, [pc, #400]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a63      	ldr	r2, [pc, #396]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b61      	ldr	r3, [pc, #388]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a5c      	ldr	r2, [pc, #368]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b5a      	ldr	r3, [pc, #360]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b56      	ldr	r3, [pc, #344]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a55      	ldr	r2, [pc, #340]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b53      	ldr	r3, [pc, #332]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b4f      	ldr	r3, [pc, #316]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a4e      	ldr	r2, [pc, #312]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b4c      	ldr	r3, [pc, #304]	; (8000fcc <HAL_LTDC_MspInit+0x240>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eaa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eb8:	230e      	movs	r3, #14
 8000eba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ebc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4843      	ldr	r0, [pc, #268]	; (8000fd0 <HAL_LTDC_MspInit+0x244>)
 8000ec4:	f001 ffa6 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8000ec8:	f641 0358 	movw	r3, #6232	; 0x1858
 8000ecc:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eda:	230e      	movs	r3, #14
 8000edc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	483b      	ldr	r0, [pc, #236]	; (8000fd4 <HAL_LTDC_MspInit+0x248>)
 8000ee6:	f001 ff95 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eea:	2303      	movs	r3, #3
 8000eec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000efa:	2309      	movs	r3, #9
 8000efc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f02:	4619      	mov	r1, r3
 8000f04:	4834      	ldr	r0, [pc, #208]	; (8000fd8 <HAL_LTDC_MspInit+0x24c>)
 8000f06:	f001 ff85 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000f0a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f0e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f1c:	230e      	movs	r3, #14
 8000f1e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f24:	4619      	mov	r1, r3
 8000f26:	482c      	ldr	r0, [pc, #176]	; (8000fd8 <HAL_LTDC_MspInit+0x24c>)
 8000f28:	f001 ff74 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000f2c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000f30:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f3e:	230e      	movs	r3, #14
 8000f40:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f46:	4619      	mov	r1, r3
 8000f48:	4824      	ldr	r0, [pc, #144]	; (8000fdc <HAL_LTDC_MspInit+0x250>)
 8000f4a:	f001 ff63 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f4e:	23c0      	movs	r3, #192	; 0xc0
 8000f50:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f5e:	230e      	movs	r3, #14
 8000f60:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f66:	4619      	mov	r1, r3
 8000f68:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <HAL_LTDC_MspInit+0x254>)
 8000f6a:	f001 ff53 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f6e:	2308      	movs	r3, #8
 8000f70:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f7e:	230e      	movs	r3, #14
 8000f80:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f86:	4619      	mov	r1, r3
 8000f88:	4816      	ldr	r0, [pc, #88]	; (8000fe4 <HAL_LTDC_MspInit+0x258>)
 8000f8a:	f001 ff43 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000f8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f92:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fa0:	2309      	movs	r3, #9
 8000fa2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480c      	ldr	r0, [pc, #48]	; (8000fdc <HAL_LTDC_MspInit+0x250>)
 8000fac:	f001 ff32 	bl	8002e14 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 1, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2058      	movs	r0, #88	; 0x58
 8000fb6:	f001 faac 	bl	8002512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000fba:	2058      	movs	r0, #88	; 0x58
 8000fbc:	f001 fac5 	bl	800254a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3768      	adds	r7, #104	; 0x68
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40016800 	.word	0x40016800
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40021400 	.word	0x40021400
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40021800 	.word	0x40021800
 8000fe0:	40020800 	.word	0x40020800
 8000fe4:	40020c00 	.word	0x40020c00

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     HAL_Init();
 8000fee:	f001 f91f 	bl	8002230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 fa5f 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f7ff fc13 	bl	8000820 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000ffa:	f7ff fad3 	bl	80005a4 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8000ffe:	f7ff fdc9 	bl	8000b94 <MX_LTDC_Init>
  MX_FMC_Init();
 8001002:	f7ff fb23 	bl	800064c <MX_FMC_Init>
  MX_I2C3_Init();
 8001006:	f7ff fd1b 	bl	8000a40 <MX_I2C3_Init>
  MX_SPI5_Init();
 800100a:	f000 fedb 	bl	8001dc4 <MX_SPI5_Init>
  MX_TIM6_Init();
 800100e:	f001 f81b 	bl	8002048 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001012:	f001 f871 	bl	80020f8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001016:	f000 fe51 	bl	8001cbc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 800101a:	f006 fa21 	bl	8007460 <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 800101e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001022:	2000      	movs	r0, #0
 8001024:	f006 fa9e 	bl	8007564 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8001028:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800102c:	2001      	movs	r0, #1
 800102e:	f006 fa99 	bl	8007564 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 fafa 	bl	800762c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8001038:	f006 fdb8 	bl	8007bac <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_GRAY);
 800103c:	488e      	ldr	r0, [pc, #568]	; (8001278 <main+0x290>)
 800103e:	f006 fb67 	bl	8007710 <BSP_LCD_Clear>
  HAL_TIM_Base_Start(&htim6);
 8001042:	488e      	ldr	r0, [pc, #568]	; (800127c <main+0x294>)
 8001044:	f004 ffb0 	bl	8005fa8 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001048:	2200      	movs	r2, #0
 800104a:	498d      	ldr	r1, [pc, #564]	; (8001280 <main+0x298>)
 800104c:	488d      	ldr	r0, [pc, #564]	; (8001284 <main+0x29c>)
 800104e:	f003 fefd 	bl	8004e4c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001052:	2200      	movs	r2, #0
 8001054:	498c      	ldr	r1, [pc, #560]	; (8001288 <main+0x2a0>)
 8001056:	488b      	ldr	r0, [pc, #556]	; (8001284 <main+0x29c>)
 8001058:	f003 ffda 	bl	8005010 <HAL_RTC_GetDate>

	  sprintf ((char*)stimebuf,"%02u:%02u",sTime.Hours, sTime.Minutes);
 800105c:	4b88      	ldr	r3, [pc, #544]	; (8001280 <main+0x298>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b87      	ldr	r3, [pc, #540]	; (8001280 <main+0x298>)
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	4989      	ldr	r1, [pc, #548]	; (800128c <main+0x2a4>)
 8001068:	4889      	ldr	r0, [pc, #548]	; (8001290 <main+0x2a8>)
 800106a:	f007 f999 	bl	80083a0 <siprintf>
	  BSP_LCD_DrawRect(0,0,240,18);
 800106e:	2312      	movs	r3, #18
 8001070:	22f0      	movs	r2, #240	; 0xf0
 8001072:	2100      	movs	r1, #0
 8001074:	2000      	movs	r0, #0
 8001076:	f006 fd0d 	bl	8007a94 <BSP_LCD_DrawRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 800107a:	4886      	ldr	r0, [pc, #536]	; (8001294 <main+0x2ac>)
 800107c:	f006 fae6 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(0,0,240,18);
 8001080:	2312      	movs	r3, #18
 8001082:	22f0      	movs	r2, #240	; 0xf0
 8001084:	2100      	movs	r1, #0
 8001086:	2000      	movs	r0, #0
 8001088:	f006 fd36 	bl	8007af8 <BSP_LCD_FillRect>
	  BSP_LCD_SetFont(&Font16);
 800108c:	4882      	ldr	r0, [pc, #520]	; (8001298 <main+0x2b0>)
 800108e:	f006 fb0f 	bl	80076b0 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	f006 fad9 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 800109a:	487e      	ldr	r0, [pc, #504]	; (8001294 <main+0x2ac>)
 800109c:	f006 faee 	bl	800767c <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 0, stimebuf, RIGHT_MODE);
 80010a0:	2302      	movs	r3, #2
 80010a2:	4a7b      	ldr	r2, [pc, #492]	; (8001290 <main+0x2a8>)
 80010a4:	2100      	movs	r1, #0
 80010a6:	2000      	movs	r0, #0
 80010a8:	f006 fb9e 	bl	80077e8 <BSP_LCD_DisplayStringAt>

	  sprintf ((char*)sdatebuf,"%02u/%02u/%02u",sDate.Year, sDate.Month,sDate.Date);
 80010ac:	4b76      	ldr	r3, [pc, #472]	; (8001288 <main+0x2a0>)
 80010ae:	78db      	ldrb	r3, [r3, #3]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b75      	ldr	r3, [pc, #468]	; (8001288 <main+0x2a0>)
 80010b4:	785b      	ldrb	r3, [r3, #1]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4b73      	ldr	r3, [pc, #460]	; (8001288 <main+0x2a0>)
 80010ba:	789b      	ldrb	r3, [r3, #2]
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	460b      	mov	r3, r1
 80010c0:	4976      	ldr	r1, [pc, #472]	; (800129c <main+0x2b4>)
 80010c2:	4877      	ldr	r0, [pc, #476]	; (80012a0 <main+0x2b8>)
 80010c4:	f007 f96c 	bl	80083a0 <siprintf>
	  BSP_LCD_SetFont(&Font16);
 80010c8:	4873      	ldr	r0, [pc, #460]	; (8001298 <main+0x2b0>)
 80010ca:	f006 faf1 	bl	80076b0 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80010ce:	f04f 30ff 	mov.w	r0, #4294967295
 80010d2:	f006 fabb 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 80010d6:	486f      	ldr	r0, [pc, #444]	; (8001294 <main+0x2ac>)
 80010d8:	f006 fad0 	bl	800767c <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 0, sdatebuf, LEFT_MODE);
 80010dc:	2303      	movs	r3, #3
 80010de:	4a70      	ldr	r2, [pc, #448]	; (80012a0 <main+0x2b8>)
 80010e0:	2100      	movs	r1, #0
 80010e2:	2000      	movs	r0, #0
 80010e4:	f006 fb80 	bl	80077e8 <BSP_LCD_DisplayStringAt>
	  //
	  //
	  BSP_LCD_SetFont(&Font24);
 80010e8:	486e      	ldr	r0, [pc, #440]	; (80012a4 <main+0x2bc>)
 80010ea:	f006 fae1 	bl	80076b0 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	f006 faab 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 80010f6:	4867      	ldr	r0, [pc, #412]	; (8001294 <main+0x2ac>)
 80010f8:	f006 fac0 	bl	800767c <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAtLine(2, (uint8_t*) "Temperature       ");
 80010fc:	496a      	ldr	r1, [pc, #424]	; (80012a8 <main+0x2c0>)
 80010fe:	2002      	movs	r0, #2
 8001100:	f006 fc30 	bl	8007964 <BSP_LCD_DisplayStringAtLine>
	  //
	  BSP_LCD_SetFont(&Font24);
 8001104:	4867      	ldr	r0, [pc, #412]	; (80012a4 <main+0x2bc>)
 8001106:	f006 fad3 	bl	80076b0 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800110a:	f04f 30ff 	mov.w	r0, #4294967295
 800110e:	f006 fa9d 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 8001112:	4860      	ldr	r0, [pc, #384]	; (8001294 <main+0x2ac>)
 8001114:	f006 fab2 	bl	800767c <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Humidity         ");
 8001118:	4964      	ldr	r1, [pc, #400]	; (80012ac <main+0x2c4>)
 800111a:	2005      	movs	r0, #5
 800111c:	f006 fc22 	bl	8007964 <BSP_LCD_DisplayStringAtLine>
	  //
	  BSP_LCD_SetFont(&Font24);
 8001120:	4860      	ldr	r0, [pc, #384]	; (80012a4 <main+0x2bc>)
 8001122:	f006 fac5 	bl	80076b0 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001126:	f04f 30ff 	mov.w	r0, #4294967295
 800112a:	f006 fa8f 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 800112e:	4859      	ldr	r0, [pc, #356]	; (8001294 <main+0x2ac>)
 8001130:	f006 faa4 	bl	800767c <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAtLine(8, (uint8_t*) "State             ");
 8001134:	495e      	ldr	r1, [pc, #376]	; (80012b0 <main+0x2c8>)
 8001136:	2008      	movs	r0, #8
 8001138:	f006 fc14 	bl	8007964 <BSP_LCD_DisplayStringAtLine>
	  //
	  BSP_LCD_DrawRect(95,233,20,20);
 800113c:	2314      	movs	r3, #20
 800113e:	2214      	movs	r2, #20
 8001140:	21e9      	movs	r1, #233	; 0xe9
 8001142:	205f      	movs	r0, #95	; 0x5f
 8001144:	f006 fca6 	bl	8007a94 <BSP_LCD_DrawRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8001148:	485a      	ldr	r0, [pc, #360]	; (80012b4 <main+0x2cc>)
 800114a:	f006 fa7f 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(95,233,20,20);
 800114e:	2314      	movs	r3, #20
 8001150:	2214      	movs	r2, #20
 8001152:	21e9      	movs	r1, #233	; 0xe9
 8001154:	205f      	movs	r0, #95	; 0x5f
 8001156:	f006 fccf 	bl	8007af8 <BSP_LCD_FillRect>
	  BSP_LCD_SetFont(&Font20);
 800115a:	4857      	ldr	r0, [pc, #348]	; (80012b8 <main+0x2d0>)
 800115c:	f006 faa8 	bl	80076b0 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001160:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001164:	f006 fa72 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 8001168:	4843      	ldr	r0, [pc, #268]	; (8001278 <main+0x290>)
 800116a:	f006 fa87 	bl	800767c <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 235, (uint8_t*)"Sensor", LEFT_MODE);
 800116e:	2303      	movs	r3, #3
 8001170:	4a52      	ldr	r2, [pc, #328]	; (80012bc <main+0x2d4>)
 8001172:	21eb      	movs	r1, #235	; 0xeb
 8001174:	2000      	movs	r0, #0
 8001176:	f006 fb37 	bl	80077e8 <BSP_LCD_DisplayStringAt>
	  //
	  BSP_LCD_SetFont(&Font16);
 800117a:	4847      	ldr	r0, [pc, #284]	; (8001298 <main+0x2b0>)
 800117c:	f006 fa98 	bl	80076b0 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001180:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001184:	f006 fa62 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 8001188:	483b      	ldr	r0, [pc, #236]	; (8001278 <main+0x290>)
 800118a:	f006 fa77 	bl	800767c <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 270, (uint8_t*)"    :Done", LEFT_MODE);
 800118e:	2303      	movs	r3, #3
 8001190:	4a4b      	ldr	r2, [pc, #300]	; (80012c0 <main+0x2d8>)
 8001192:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001196:	2000      	movs	r0, #0
 8001198:	f006 fb26 	bl	80077e8 <BSP_LCD_DisplayStringAt>
	  BSP_LCD_DrawRect(27,267,15,15);
 800119c:	230f      	movs	r3, #15
 800119e:	220f      	movs	r2, #15
 80011a0:	f240 110b 	movw	r1, #267	; 0x10b
 80011a4:	201b      	movs	r0, #27
 80011a6:	f006 fc75 	bl	8007a94 <BSP_LCD_DrawRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80011aa:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80011ae:	f006 fa4d 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(27,267,15,15);
 80011b2:	230f      	movs	r3, #15
 80011b4:	220f      	movs	r2, #15
 80011b6:	f240 110b 	movw	r1, #267	; 0x10b
 80011ba:	201b      	movs	r0, #27
 80011bc:	f006 fc9c 	bl	8007af8 <BSP_LCD_FillRect>
	  //
	  BSP_LCD_SetFont(&Font16);
 80011c0:	4835      	ldr	r0, [pc, #212]	; (8001298 <main+0x2b0>)
 80011c2:	f006 fa75 	bl	80076b0 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011c6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011ca:	f006 fa3f 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 80011ce:	482a      	ldr	r0, [pc, #168]	; (8001278 <main+0x290>)
 80011d0:	f006 fa54 	bl	800767c <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 270, (uint8_t*)":Working ", RIGHT_MODE);
 80011d4:	2302      	movs	r3, #2
 80011d6:	4a3b      	ldr	r2, [pc, #236]	; (80012c4 <main+0x2dc>)
 80011d8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80011dc:	2000      	movs	r0, #0
 80011de:	f006 fb03 	bl	80077e8 <BSP_LCD_DisplayStringAt>
	  BSP_LCD_DrawRect(115,267,15,15);
 80011e2:	230f      	movs	r3, #15
 80011e4:	220f      	movs	r2, #15
 80011e6:	f240 110b 	movw	r1, #267	; 0x10b
 80011ea:	2073      	movs	r0, #115	; 0x73
 80011ec:	f006 fc52 	bl	8007a94 <BSP_LCD_DrawRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 80011f0:	4830      	ldr	r0, [pc, #192]	; (80012b4 <main+0x2cc>)
 80011f2:	f006 fa2b 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(115,267,15,15);
 80011f6:	230f      	movs	r3, #15
 80011f8:	220f      	movs	r2, #15
 80011fa:	f240 110b 	movw	r1, #267	; 0x10b
 80011fe:	2073      	movs	r0, #115	; 0x73
 8001200:	f006 fc7a 	bl	8007af8 <BSP_LCD_FillRect>
	  //
	  BSP_LCD_SetFont(&Font16);
 8001204:	4824      	ldr	r0, [pc, #144]	; (8001298 <main+0x2b0>)
 8001206:	f006 fa53 	bl	80076b0 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800120a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800120e:	f006 fa1d 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 8001212:	4819      	ldr	r0, [pc, #100]	; (8001278 <main+0x290>)
 8001214:	f006 fa32 	bl	800767c <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 295, (uint8_t*)"   :Failed", CENTER_MODE);
 8001218:	2301      	movs	r3, #1
 800121a:	4a2b      	ldr	r2, [pc, #172]	; (80012c8 <main+0x2e0>)
 800121c:	f240 1127 	movw	r1, #295	; 0x127
 8001220:	2000      	movs	r0, #0
 8001222:	f006 fae1 	bl	80077e8 <BSP_LCD_DisplayStringAt>
	  BSP_LCD_DrawRect(75,292,15,15);
 8001226:	230f      	movs	r3, #15
 8001228:	220f      	movs	r2, #15
 800122a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800122e:	204b      	movs	r0, #75	; 0x4b
 8001230:	f006 fc30 	bl	8007a94 <BSP_LCD_DrawRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001234:	4825      	ldr	r0, [pc, #148]	; (80012cc <main+0x2e4>)
 8001236:	f006 fa09 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(75,292,15,15);
 800123a:	230f      	movs	r3, #15
 800123c:	220f      	movs	r2, #15
 800123e:	f44f 7192 	mov.w	r1, #292	; 0x124
 8001242:	204b      	movs	r0, #75	; 0x4b
 8001244:	f006 fc58 	bl	8007af8 <BSP_LCD_FillRect>
	  //
	  HAL_Delay(1500);
 8001248:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800124c:	f001 f862 	bl	8002314 <HAL_Delay>
	  DHT22_Start();
 8001250:	f000 fc90 	bl	8001b74 <DHT22_Start>
	  Presence = DHT22_Check_Response();
 8001254:	f000 fcae 	bl	8001bb4 <DHT22_Check_Response>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <main+0x2e8>)
 800125e:	701a      	strb	r2, [r3, #0]
	  if (Presence!=1)
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <main+0x2e8>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d037      	beq.n	80012d8 <main+0x2f0>
	  {
		  HAL_Delay(3000);
 8001268:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800126c:	f001 f852 	bl	8002314 <HAL_Delay>
		  timeout_DHT=0;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <main+0x2ec>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
		  continue;
 8001276:	e0f5      	b.n	8001464 <main+0x47c>
 8001278:	ff808080 	.word	0xff808080
 800127c:	20000540 	.word	0x20000540
 8001280:	200002dc 	.word	0x200002dc
 8001284:	200004c4 	.word	0x200004c4
 8001288:	200002f0 	.word	0x200002f0
 800128c:	08008c94 	.word	0x08008c94
 8001290:	2000029c 	.word	0x2000029c
 8001294:	ff404040 	.word	0xff404040
 8001298:	20000048 	.word	0x20000048
 800129c:	08008ca0 	.word	0x08008ca0
 80012a0:	200002bc 	.word	0x200002bc
 80012a4:	20000058 	.word	0x20000058
 80012a8:	08008cb0 	.word	0x08008cb0
 80012ac:	08008cc4 	.word	0x08008cc4
 80012b0:	08008cd8 	.word	0x08008cd8
 80012b4:	ffffa500 	.word	0xffffa500
 80012b8:	20000050 	.word	0x20000050
 80012bc:	08008cec 	.word	0x08008cec
 80012c0:	08008cf4 	.word	0x08008cf4
 80012c4:	08008d00 	.word	0x08008d00
 80012c8:	08008d0c 	.word	0x08008d0c
 80012cc:	ffff0000 	.word	0xffff0000
 80012d0:	200004a6 	.word	0x200004a6
 80012d4:	200004a8 	.word	0x200004a8
	  }
	  Rh_byte1 = DHT22_Read ();
 80012d8:	f000 fc9a 	bl	8001c10 <DHT22_Read>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	4b61      	ldr	r3, [pc, #388]	; (8001468 <main+0x480>)
 80012e2:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT22_Read ();
 80012e4:	f000 fc94 	bl	8001c10 <DHT22_Read>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b5f      	ldr	r3, [pc, #380]	; (800146c <main+0x484>)
 80012ee:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT22_Read ();
 80012f0:	f000 fc8e 	bl	8001c10 <DHT22_Read>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b5d      	ldr	r3, [pc, #372]	; (8001470 <main+0x488>)
 80012fa:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT22_Read ();
 80012fc:	f000 fc88 	bl	8001c10 <DHT22_Read>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	4b5b      	ldr	r3, [pc, #364]	; (8001474 <main+0x48c>)
 8001306:	701a      	strb	r2, [r3, #0]
	  SUM = DHT22_Read();
 8001308:	f000 fc82 	bl	8001c10 <DHT22_Read>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b59      	ldr	r3, [pc, #356]	; (8001478 <main+0x490>)
 8001312:	801a      	strh	r2, [r3, #0]
	  if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001314:	4b58      	ldr	r3, [pc, #352]	; (8001478 <main+0x490>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	4b53      	ldr	r3, [pc, #332]	; (8001468 <main+0x480>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	4b52      	ldr	r3, [pc, #328]	; (800146c <main+0x484>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4413      	add	r3, r2
 8001326:	4a52      	ldr	r2, [pc, #328]	; (8001470 <main+0x488>)
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a51      	ldr	r2, [pc, #324]	; (8001474 <main+0x48c>)
 800132e:	7812      	ldrb	r2, [r2, #0]
 8001330:	4413      	add	r3, r2
 8001332:	4299      	cmp	r1, r3
 8001334:	d12d      	bne.n	8001392 <main+0x3aa>
	  {
	  Temperature = (Temp_byte1<<8|Temp_byte2)/10;
 8001336:	4b4e      	ldr	r3, [pc, #312]	; (8001470 <main+0x488>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	4a4d      	ldr	r2, [pc, #308]	; (8001474 <main+0x48c>)
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	4313      	orrs	r3, r2
 8001342:	4a4e      	ldr	r2, [pc, #312]	; (800147c <main+0x494>)
 8001344:	fb82 1203 	smull	r1, r2, r2, r3
 8001348:	1092      	asrs	r2, r2, #2
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	b21a      	sxth	r2, r3
 8001350:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <main+0x498>)
 8001352:	801a      	strh	r2, [r3, #0]
	  Humidity = (Rh_byte1<<8|Rh_byte2)/10;
 8001354:	4b44      	ldr	r3, [pc, #272]	; (8001468 <main+0x480>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	4a44      	ldr	r2, [pc, #272]	; (800146c <main+0x484>)
 800135c:	7812      	ldrb	r2, [r2, #0]
 800135e:	4313      	orrs	r3, r2
 8001360:	4a46      	ldr	r2, [pc, #280]	; (800147c <main+0x494>)
 8001362:	fb82 1203 	smull	r1, r2, r2, r3
 8001366:	1092      	asrs	r2, r2, #2
 8001368:	17db      	asrs	r3, r3, #31
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	b21a      	sxth	r2, r3
 800136e:	4b45      	ldr	r3, [pc, #276]	; (8001484 <main+0x49c>)
 8001370:	801a      	strh	r2, [r3, #0]
	  //
	  BSP_LCD_DrawRect(95,233,20,20);
 8001372:	2314      	movs	r3, #20
 8001374:	2214      	movs	r2, #20
 8001376:	21e9      	movs	r1, #233	; 0xe9
 8001378:	205f      	movs	r0, #95	; 0x5f
 800137a:	f006 fb8b 	bl	8007a94 <BSP_LCD_DrawRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800137e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001382:	f006 f963 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(95,233,20,20);
 8001386:	2314      	movs	r3, #20
 8001388:	2214      	movs	r2, #20
 800138a:	21e9      	movs	r1, #233	; 0xe9
 800138c:	205f      	movs	r0, #95	; 0x5f
 800138e:	f006 fbb3 	bl	8007af8 <BSP_LCD_FillRect>
	  }
	  //Temperature++;
	  //Humidity++;
	  //
	  sprintf((char*)TemperatureString, "%d.c", Temperature);
 8001392:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <main+0x498>)
 8001394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001398:	461a      	mov	r2, r3
 800139a:	493b      	ldr	r1, [pc, #236]	; (8001488 <main+0x4a0>)
 800139c:	483b      	ldr	r0, [pc, #236]	; (800148c <main+0x4a4>)
 800139e:	f006 ffff 	bl	80083a0 <siprintf>
	  BSP_LCD_SetFont(&Font24);
 80013a2:	483b      	ldr	r0, [pc, #236]	; (8001490 <main+0x4a8>)
 80013a4:	f006 f984 	bl	80076b0 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013a8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013ac:	f006 f94e 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 80013b0:	4838      	ldr	r0, [pc, #224]	; (8001494 <main+0x4ac>)
 80013b2:	f006 f963 	bl	800767c <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 90, TemperatureString, CENTER_MODE);
 80013b6:	2301      	movs	r3, #1
 80013b8:	4a34      	ldr	r2, [pc, #208]	; (800148c <main+0x4a4>)
 80013ba:	215a      	movs	r1, #90	; 0x5a
 80013bc:	2000      	movs	r0, #0
 80013be:	f006 fa13 	bl	80077e8 <BSP_LCD_DisplayStringAt>
	  //
	  sprintf((char*)humidityString, "%d%%", Humidity);
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <main+0x49c>)
 80013c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4933      	ldr	r1, [pc, #204]	; (8001498 <main+0x4b0>)
 80013cc:	4833      	ldr	r0, [pc, #204]	; (800149c <main+0x4b4>)
 80013ce:	f006 ffe7 	bl	80083a0 <siprintf>
	  BSP_LCD_SetFont(&Font24);
 80013d2:	482f      	ldr	r0, [pc, #188]	; (8001490 <main+0x4a8>)
 80013d4:	f006 f96c 	bl	80076b0 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013d8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013dc:	f006 f936 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 80013e0:	482c      	ldr	r0, [pc, #176]	; (8001494 <main+0x4ac>)
 80013e2:	f006 f94b 	bl	800767c <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0,162,humidityString, CENTER_MODE);
 80013e6:	2301      	movs	r3, #1
 80013e8:	4a2c      	ldr	r2, [pc, #176]	; (800149c <main+0x4b4>)
 80013ea:	21a2      	movs	r1, #162	; 0xa2
 80013ec:	2000      	movs	r0, #0
 80013ee:	f006 f9fb 	bl	80077e8 <BSP_LCD_DisplayStringAt>
	  HAL_Delay(1000);
 80013f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f6:	f000 ff8d 	bl	8002314 <HAL_Delay>
	  //
	  BSP_LCD_SetFont(&Font20);
 80013fa:	4829      	ldr	r0, [pc, #164]	; (80014a0 <main+0x4b8>)
 80013fc:	f006 f958 	bl	80076b0 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001400:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001404:	f006 f922 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 8001408:	4822      	ldr	r0, [pc, #136]	; (8001494 <main+0x4ac>)
 800140a:	f006 f937 	bl	800767c <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, 235, (uint8_t*)"Upload  ", RIGHT_MODE);
 800140e:	2302      	movs	r3, #2
 8001410:	4a24      	ldr	r2, [pc, #144]	; (80014a4 <main+0x4bc>)
 8001412:	21eb      	movs	r1, #235	; 0xeb
 8001414:	2000      	movs	r0, #0
 8001416:	f006 f9e7 	bl	80077e8 <BSP_LCD_DisplayStringAt>
	  BSP_LCD_DrawRect(215,233,20,20);
 800141a:	2314      	movs	r3, #20
 800141c:	2214      	movs	r2, #20
 800141e:	21e9      	movs	r1, #233	; 0xe9
 8001420:	20d7      	movs	r0, #215	; 0xd7
 8001422:	f006 fb37 	bl	8007a94 <BSP_LCD_DrawRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8001426:	4820      	ldr	r0, [pc, #128]	; (80014a8 <main+0x4c0>)
 8001428:	f006 f910 	bl	800764c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(215,233,20,20);
 800142c:	2314      	movs	r3, #20
 800142e:	2214      	movs	r2, #20
 8001430:	21e9      	movs	r1, #233	; 0xe9
 8001432:	20d7      	movs	r0, #215	; 0xd7
 8001434:	f006 fb60 	bl	8007af8 <BSP_LCD_FillRect>
	  //
	  ESP8266_Init();
 8001438:	f000 f8b0 	bl	800159c <ESP8266_Init>
	  ESP8266_SendData(Temperature, Humidity);
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <main+0x498>)
 800143e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <main+0x49c>)
 8001444:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f8e0 	bl	8001610 <ESP8266_SendData>
	  Presence = 0;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <main+0x4c4>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1500);
 8001456:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800145a:	f000 ff5b 	bl	8002314 <HAL_Delay>
	  init_receive_ok=0;
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <main+0x4c8>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001464:	e5f0      	b.n	8001048 <main+0x60>
 8001466:	bf00      	nop
 8001468:	2000049c 	.word	0x2000049c
 800146c:	2000049d 	.word	0x2000049d
 8001470:	2000049e 	.word	0x2000049e
 8001474:	2000049f 	.word	0x2000049f
 8001478:	200004a0 	.word	0x200004a0
 800147c:	66666667 	.word	0x66666667
 8001480:	200004a2 	.word	0x200004a2
 8001484:	200004a4 	.word	0x200004a4
 8001488:	08008d18 	.word	0x08008d18
 800148c:	200004b8 	.word	0x200004b8
 8001490:	20000058 	.word	0x20000058
 8001494:	ff808080 	.word	0xff808080
 8001498:	08008d20 	.word	0x08008d20
 800149c:	200004ac 	.word	0x200004ac
 80014a0:	20000050 	.word	0x20000050
 80014a4:	08008d28 	.word	0x08008d28
 80014a8:	ffffa500 	.word	0xffffa500
 80014ac:	200004a6 	.word	0x200004a6
 80014b0:	20000484 	.word	0x20000484

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b094      	sub	sp, #80	; 0x50
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	2230      	movs	r2, #48	; 0x30
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f006 ff64 	bl	8008390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <SystemClock_Config+0xe0>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	4a2c      	ldr	r2, [pc, #176]	; (8001594 <SystemClock_Config+0xe0>)
 80014e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e6:	6413      	str	r3, [r2, #64]	; 0x40
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <SystemClock_Config+0xe0>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <SystemClock_Config+0xe4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a26      	ldr	r2, [pc, #152]	; (8001598 <SystemClock_Config+0xe4>)
 80014fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <SystemClock_Config+0xe4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001510:	2309      	movs	r3, #9
 8001512:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800151a:	2301      	movs	r3, #1
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151e:	2302      	movs	r3, #2
 8001520:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001522:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001526:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001528:	2304      	movs	r3, #4
 800152a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800152c:	23b4      	movs	r3, #180	; 0xb4
 800152e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001530:	2302      	movs	r3, #2
 8001532:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001534:	2304      	movs	r3, #4
 8001536:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001538:	f107 0320 	add.w	r3, r7, #32
 800153c:	4618      	mov	r0, r3
 800153e:	f002 fcf5 	bl	8003f2c <HAL_RCC_OscConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001548:	f000 fbb2 	bl	8001cb0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800154c:	f002 fc9e 	bl	8003e8c <HAL_PWREx_EnableOverDrive>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001556:	f000 fbab 	bl	8001cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155a:	230f      	movs	r3, #15
 800155c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155e:	2302      	movs	r3, #2
 8001560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001566:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800156a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800156c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001570:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	2105      	movs	r1, #5
 8001578:	4618      	mov	r0, r3
 800157a:	f002 ff4f 	bl	800441c <HAL_RCC_ClockConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001584:	f000 fb94 	bl	8001cb0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001588:	f003 f82e 	bl	80045e8 <HAL_RCC_EnableCSS>
}
 800158c:	bf00      	nop
 800158e:	3750      	adds	r7, #80	; 0x50
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000

0800159c <ESP8266_Init>:

/* USER CODE BEGIN 4 */

/* ESP8266 part(start) */
void ESP8266_Init(){
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
    memset(rx_buffer_init, 0, sizeof(rx_buffer_init));
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	2100      	movs	r1, #0
 80015a4:	4815      	ldr	r0, [pc, #84]	; (80015fc <ESP8266_Init+0x60>)
 80015a6:	f006 fef3 	bl	8008390 <memset>
    init_receive_ok=0;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <ESP8266_Init+0x64>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

    while(init_receive_ok!=1){
 80015b0:	e01d      	b.n	80015ee <ESP8266_Init+0x52>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b8:	4812      	ldr	r0, [pc, #72]	; (8001604 <ESP8266_Init+0x68>)
 80015ba:	f001 fefb 	bl	80033b4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80015be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015c2:	f000 fea7 	bl	8002314 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <ESP8266_Init+0x68>)
 80015ce:	f001 fef1 	bl	80033b4 <HAL_GPIO_WritePin>
	HAL_UART_Receive(&huart1, rx_buffer_init, sizeof(rx_buffer_init)-1, 1000);
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	227f      	movs	r2, #127	; 0x7f
 80015d8:	4908      	ldr	r1, [pc, #32]	; (80015fc <ESP8266_Init+0x60>)
 80015da:	480b      	ldr	r0, [pc, #44]	; (8001608 <ESP8266_Init+0x6c>)
 80015dc:	f004 ff47 	bl	800646e <HAL_UART_Receive>
	init_receive_ok=checkBufferCharacters(rx_buffer_init, "SystemReady");
 80015e0:	490a      	ldr	r1, [pc, #40]	; (800160c <ESP8266_Init+0x70>)
 80015e2:	4806      	ldr	r0, [pc, #24]	; (80015fc <ESP8266_Init+0x60>)
 80015e4:	f000 fa3a 	bl	8001a5c <checkBufferCharacters>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <ESP8266_Init+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]
    while(init_receive_ok!=1){
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <ESP8266_Init+0x64>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d1dd      	bne.n	80015b2 <ESP8266_Init+0x16>
	}
}
 80015f6:	bf00      	nop
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000304 	.word	0x20000304
 8001600:	20000484 	.word	0x20000484
 8001604:	40020800 	.word	0x40020800
 8001608:	20000588 	.word	0x20000588
 800160c:	08008d34 	.word	0x08008d34

08001610 <ESP8266_SendData>:

void ESP8266_SendData(int16_t sensor1_data,int16_t sensor2_data) {
 8001610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001614:	b098      	sub	sp, #96	; 0x60
 8001616:	af02      	add	r7, sp, #8
 8001618:	4603      	mov	r3, r0
 800161a:	460a      	mov	r2, r1
 800161c:	80fb      	strh	r3, [r7, #6]
 800161e:	4613      	mov	r3, r2
 8001620:	80bb      	strh	r3, [r7, #4]

    inst1_receive_ok=0;
 8001622:	4bbb      	ldr	r3, [pc, #748]	; (8001910 <ESP8266_SendData+0x300>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
    inst2_receive_ok=0;
 8001628:	4bba      	ldr	r3, [pc, #744]	; (8001914 <ESP8266_SendData+0x304>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
    inst3_receive_ok=0;
 800162e:	4bba      	ldr	r3, [pc, #744]	; (8001918 <ESP8266_SendData+0x308>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
    inst4_receive_ok=0;
 8001634:	4bb9      	ldr	r3, [pc, #740]	; (800191c <ESP8266_SendData+0x30c>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
    HAL_Delay(5000);
 800163a:	f241 3088 	movw	r0, #5000	; 0x1388
 800163e:	f000 fe69 	bl	8002314 <HAL_Delay>


    timeout=0;
 8001642:	4bb7      	ldr	r3, [pc, #732]	; (8001920 <ESP8266_SendData+0x310>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
    while(inst1_receive_ok==0 && timeout<=5){
 8001648:	e029      	b.n	800169e <ESP8266_SendData+0x8e>
	HAL_UART_Transmit(&huart1, at_inst1, sizeof(at_inst1) - 1, 1000);
 800164a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164e:	2228      	movs	r2, #40	; 0x28
 8001650:	49b4      	ldr	r1, [pc, #720]	; (8001924 <ESP8266_SendData+0x314>)
 8001652:	48b5      	ldr	r0, [pc, #724]	; (8001928 <ESP8266_SendData+0x318>)
 8001654:	f004 fe79 	bl	800634a <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rx_buffer1, sizeof(rx_buffer1)-1, 1000);
 8001658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165c:	223f      	movs	r2, #63	; 0x3f
 800165e:	49b3      	ldr	r1, [pc, #716]	; (800192c <ESP8266_SendData+0x31c>)
 8001660:	48b1      	ldr	r0, [pc, #708]	; (8001928 <ESP8266_SendData+0x318>)
 8001662:	f004 ff04 	bl	800646e <HAL_UART_Receive>
	inst1_receive_ok = checkBufferCharacters(rx_buffer1, "Linked")||checkBufferCharacters(rx_buffer1, "CONNECT");
 8001666:	49b2      	ldr	r1, [pc, #712]	; (8001930 <ESP8266_SendData+0x320>)
 8001668:	48b0      	ldr	r0, [pc, #704]	; (800192c <ESP8266_SendData+0x31c>)
 800166a:	f000 f9f7 	bl	8001a5c <checkBufferCharacters>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d106      	bne.n	8001682 <ESP8266_SendData+0x72>
 8001674:	49af      	ldr	r1, [pc, #700]	; (8001934 <ESP8266_SendData+0x324>)
 8001676:	48ad      	ldr	r0, [pc, #692]	; (800192c <ESP8266_SendData+0x31c>)
 8001678:	f000 f9f0 	bl	8001a5c <checkBufferCharacters>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <ESP8266_SendData+0x76>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <ESP8266_SendData+0x78>
 8001686:	2300      	movs	r3, #0
 8001688:	4aa1      	ldr	r2, [pc, #644]	; (8001910 <ESP8266_SendData+0x300>)
 800168a:	6013      	str	r3, [r2, #0]
	HAL_Delay(3000);
 800168c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001690:	f000 fe40 	bl	8002314 <HAL_Delay>
	timeout++;
 8001694:	4ba2      	ldr	r3, [pc, #648]	; (8001920 <ESP8266_SendData+0x310>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4aa1      	ldr	r2, [pc, #644]	; (8001920 <ESP8266_SendData+0x310>)
 800169c:	6013      	str	r3, [r2, #0]
    while(inst1_receive_ok==0 && timeout<=5){
 800169e:	4b9c      	ldr	r3, [pc, #624]	; (8001910 <ESP8266_SendData+0x300>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d103      	bne.n	80016ae <ESP8266_SendData+0x9e>
 80016a6:	4b9e      	ldr	r3, [pc, #632]	; (8001920 <ESP8266_SendData+0x310>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b05      	cmp	r3, #5
 80016ac:	ddcd      	ble.n	800164a <ESP8266_SendData+0x3a>
    }
    if(inst1_receive_ok!=1){
 80016ae:	4b98      	ldr	r3, [pc, #608]	; (8001910 <ESP8266_SendData+0x300>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d00f      	beq.n	80016d6 <ESP8266_SendData+0xc6>
    	BSP_LCD_DrawRect(215,233,20,20);
 80016b6:	2314      	movs	r3, #20
 80016b8:	2214      	movs	r2, #20
 80016ba:	21e9      	movs	r1, #233	; 0xe9
 80016bc:	20d7      	movs	r0, #215	; 0xd7
 80016be:	f006 f9e9 	bl	8007a94 <BSP_LCD_DrawRect>
    	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80016c2:	489d      	ldr	r0, [pc, #628]	; (8001938 <ESP8266_SendData+0x328>)
 80016c4:	f005 ffc2 	bl	800764c <BSP_LCD_SetTextColor>
    	BSP_LCD_FillRect(215,233,20,20);
 80016c8:	2314      	movs	r3, #20
 80016ca:	2214      	movs	r2, #20
 80016cc:	21e9      	movs	r1, #233	; 0xe9
 80016ce:	20d7      	movs	r0, #215	; 0xd7
 80016d0:	f006 fa12 	bl	8007af8 <BSP_LCD_FillRect>
    	return;
 80016d4:	e1a8      	b.n	8001a28 <ESP8266_SendData+0x418>
    }



    uint8_t sensor1_name[]="&field1=";
 80016d6:	4a99      	ldr	r2, [pc, #612]	; (800193c <ESP8266_SendData+0x32c>)
 80016d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80016de:	c303      	stmia	r3!, {r0, r1}
 80016e0:	701a      	strb	r2, [r3, #0]
    uint8_t sensor2_name[]="&field2=";
 80016e2:	4a97      	ldr	r2, [pc, #604]	; (8001940 <ESP8266_SendData+0x330>)
 80016e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ea:	c303      	stmia	r3!, {r0, r1}
 80016ec:	701a      	strb	r2, [r3, #0]
    uint8_t at_inst3_temp1[]="GET /update?api_key=V8CUO3DJT76JJ3XW";
 80016ee:	4b95      	ldr	r3, [pc, #596]	; (8001944 <ESP8266_SendData+0x334>)
 80016f0:	f107 040c 	add.w	r4, r7, #12
 80016f4:	461d      	mov	r5, r3
 80016f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001702:	6020      	str	r0, [r4, #0]
 8001704:	3404      	adds	r4, #4
 8001706:	7021      	strb	r1, [r4, #0]
    int16_t at_inst3_length=0;
 8001708:	2300      	movs	r3, #0
 800170a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    int16_t inst3_length=0;
 800170e:	2300      	movs	r3, #0
 8001710:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    at_inst3_length=0;
 8001714:	2300      	movs	r3, #0
 8001716:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    inst3_length=0;
 800171a:	2300      	movs	r3, #0
 800171c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    at_inst3_length = strlen((const char*)at_inst3_temp1) + strlen((const char*)sensor1_name) + strlen((const char*)&sensor1_data)+ strlen((const char*)sensor2_name) + strlen((const char*)&sensor2_data)+4;    //計�?�inst3??��?�串總長度�??+4?��\r\n
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fd63 	bl	80001f0 <strlen>
 800172a:	4603      	mov	r3, r0
 800172c:	b29c      	uxth	r4, r3
 800172e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fd5c 	bl	80001f0 <strlen>
 8001738:	4603      	mov	r3, r0
 800173a:	b29b      	uxth	r3, r3
 800173c:	4423      	add	r3, r4
 800173e:	b29c      	uxth	r4, r3
 8001740:	1dbb      	adds	r3, r7, #6
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fd54 	bl	80001f0 <strlen>
 8001748:	4603      	mov	r3, r0
 800174a:	b29b      	uxth	r3, r3
 800174c:	4423      	add	r3, r4
 800174e:	b29c      	uxth	r4, r3
 8001750:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fd4b 	bl	80001f0 <strlen>
 800175a:	4603      	mov	r3, r0
 800175c:	b29b      	uxth	r3, r3
 800175e:	4423      	add	r3, r4
 8001760:	b29c      	uxth	r4, r3
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fd43 	bl	80001f0 <strlen>
 800176a:	4603      	mov	r3, r0
 800176c:	b29b      	uxth	r3, r3
 800176e:	4423      	add	r3, r4
 8001770:	b29b      	uxth	r3, r3
 8001772:	3304      	adds	r3, #4
 8001774:	b29b      	uxth	r3, r3
 8001776:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    uint8_t at_inst3[at_inst3_length];
 800177a:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	; 0x56
 800177e:	466b      	mov	r3, sp
 8001780:	461c      	mov	r4, r3
 8001782:	460b      	mov	r3, r1
 8001784:	3b01      	subs	r3, #1
 8001786:	653b      	str	r3, [r7, #80]	; 0x50
 8001788:	460a      	mov	r2, r1
 800178a:	2300      	movs	r3, #0
 800178c:	4692      	mov	sl, r2
 800178e:	469b      	mov	fp, r3
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800179c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017a4:	460a      	mov	r2, r1
 80017a6:	2300      	movs	r3, #0
 80017a8:	4690      	mov	r8, r2
 80017aa:	4699      	mov	r9, r3
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017c0:	460b      	mov	r3, r1
 80017c2:	3307      	adds	r3, #7
 80017c4:	08db      	lsrs	r3, r3, #3
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	ebad 0d03 	sub.w	sp, sp, r3
 80017cc:	ab02      	add	r3, sp, #8
 80017ce:	3300      	adds	r3, #0
 80017d0:	64fb      	str	r3, [r7, #76]	; 0x4c

    sprintf((char*)at_inst3,"GET /update?api_key=V8CUO3DJT76JJ3XW%s%d%s%d\r\n",(char*)sensor1_name,sensor1_data,(char*)sensor2_name,sensor2_data);    //組�?�inst3
 80017d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d6:	4619      	mov	r1, r3
 80017d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	460b      	mov	r3, r1
 80017ea:	4957      	ldr	r1, [pc, #348]	; (8001948 <ESP8266_SendData+0x338>)
 80017ec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80017ee:	f006 fdd7 	bl	80083a0 <siprintf>



    inst3_length = strlen((char*)at_inst3);
 80017f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80017f4:	f7fe fcfc 	bl	80001f0 <strlen>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    sprintf(at_inst2, "AT+CIPSEND=%d\r\n",inst3_length);
 80017fe:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8001802:	461a      	mov	r2, r3
 8001804:	4951      	ldr	r1, [pc, #324]	; (800194c <ESP8266_SendData+0x33c>)
 8001806:	4852      	ldr	r0, [pc, #328]	; (8001950 <ESP8266_SendData+0x340>)
 8001808:	f006 fdca 	bl	80083a0 <siprintf>



    timeout=0;
 800180c:	4b44      	ldr	r3, [pc, #272]	; (8001920 <ESP8266_SendData+0x310>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
    while(inst2_receive_ok==0 && timeout<=5){
 8001812:	e01d      	b.n	8001850 <ESP8266_SendData+0x240>
    HAL_UART_Transmit(&huart1, (uint8_t*)at_inst2, sizeof(at_inst2) - 1, 1000);
 8001814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001818:	220f      	movs	r2, #15
 800181a:	494d      	ldr	r1, [pc, #308]	; (8001950 <ESP8266_SendData+0x340>)
 800181c:	4842      	ldr	r0, [pc, #264]	; (8001928 <ESP8266_SendData+0x318>)
 800181e:	f004 fd94 	bl	800634a <HAL_UART_Transmit>
    HAL_UART_Receive(&huart1, rx_buffer2, sizeof(rx_buffer2)-1, 1000);
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	223f      	movs	r2, #63	; 0x3f
 8001828:	494a      	ldr	r1, [pc, #296]	; (8001954 <ESP8266_SendData+0x344>)
 800182a:	483f      	ldr	r0, [pc, #252]	; (8001928 <ESP8266_SendData+0x318>)
 800182c:	f004 fe1f 	bl	800646e <HAL_UART_Receive>
    inst2_receive_ok = checkBufferCharacters(rx_buffer2, ">");
 8001830:	4949      	ldr	r1, [pc, #292]	; (8001958 <ESP8266_SendData+0x348>)
 8001832:	4848      	ldr	r0, [pc, #288]	; (8001954 <ESP8266_SendData+0x344>)
 8001834:	f000 f912 	bl	8001a5c <checkBufferCharacters>
 8001838:	4603      	mov	r3, r0
 800183a:	4a36      	ldr	r2, [pc, #216]	; (8001914 <ESP8266_SendData+0x304>)
 800183c:	6013      	str	r3, [r2, #0]
    HAL_Delay(3000);
 800183e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001842:	f000 fd67 	bl	8002314 <HAL_Delay>
    timeout++;
 8001846:	4b36      	ldr	r3, [pc, #216]	; (8001920 <ESP8266_SendData+0x310>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	4a34      	ldr	r2, [pc, #208]	; (8001920 <ESP8266_SendData+0x310>)
 800184e:	6013      	str	r3, [r2, #0]
    while(inst2_receive_ok==0 && timeout<=5){
 8001850:	4b30      	ldr	r3, [pc, #192]	; (8001914 <ESP8266_SendData+0x304>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d103      	bne.n	8001860 <ESP8266_SendData+0x250>
 8001858:	4b31      	ldr	r3, [pc, #196]	; (8001920 <ESP8266_SendData+0x310>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b05      	cmp	r3, #5
 800185e:	ddd9      	ble.n	8001814 <ESP8266_SendData+0x204>
    }
    if(inst2_receive_ok!=1){
 8001860:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <ESP8266_SendData+0x304>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d00f      	beq.n	8001888 <ESP8266_SendData+0x278>
    	BSP_LCD_DrawRect(215,233,20,20);
 8001868:	2314      	movs	r3, #20
 800186a:	2214      	movs	r2, #20
 800186c:	21e9      	movs	r1, #233	; 0xe9
 800186e:	20d7      	movs	r0, #215	; 0xd7
 8001870:	f006 f910 	bl	8007a94 <BSP_LCD_DrawRect>
    	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001874:	4830      	ldr	r0, [pc, #192]	; (8001938 <ESP8266_SendData+0x328>)
 8001876:	f005 fee9 	bl	800764c <BSP_LCD_SetTextColor>
    	BSP_LCD_FillRect(215,233,20,20);
 800187a:	2314      	movs	r3, #20
 800187c:	2214      	movs	r2, #20
 800187e:	21e9      	movs	r1, #233	; 0xe9
 8001880:	20d7      	movs	r0, #215	; 0xd7
 8001882:	f006 f939 	bl	8007af8 <BSP_LCD_FillRect>
    	return;
 8001886:	e0ce      	b.n	8001a26 <ESP8266_SendData+0x416>
    }
    HAL_Delay(1000);
 8001888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800188c:	f000 fd42 	bl	8002314 <HAL_Delay>



    timeout=0;
 8001890:	4b23      	ldr	r3, [pc, #140]	; (8001920 <ESP8266_SendData+0x310>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
    while(inst3_receive_ok==0 && timeout<=5)
 8001896:	e01e      	b.n	80018d6 <ESP8266_SendData+0x2c6>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)at_inst3, inst3_length, 1000);
 8001898:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800189c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80018a2:	4821      	ldr	r0, [pc, #132]	; (8001928 <ESP8266_SendData+0x318>)
 80018a4:	f004 fd51 	bl	800634a <HAL_UART_Transmit>
        HAL_UART_Receive(&huart1, rx_buffer3, sizeof(rx_buffer3)-1, 1000);
 80018a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ac:	223f      	movs	r2, #63	; 0x3f
 80018ae:	492b      	ldr	r1, [pc, #172]	; (800195c <ESP8266_SendData+0x34c>)
 80018b0:	481d      	ldr	r0, [pc, #116]	; (8001928 <ESP8266_SendData+0x318>)
 80018b2:	f004 fddc 	bl	800646e <HAL_UART_Receive>
        inst3_receive_ok = checkBufferCharacters(rx_buffer3, "SENDOKIPD");
 80018b6:	492a      	ldr	r1, [pc, #168]	; (8001960 <ESP8266_SendData+0x350>)
 80018b8:	4828      	ldr	r0, [pc, #160]	; (800195c <ESP8266_SendData+0x34c>)
 80018ba:	f000 f8cf 	bl	8001a5c <checkBufferCharacters>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a15      	ldr	r2, [pc, #84]	; (8001918 <ESP8266_SendData+0x308>)
 80018c2:	6013      	str	r3, [r2, #0]
        HAL_Delay(3000);
 80018c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80018c8:	f000 fd24 	bl	8002314 <HAL_Delay>
        timeout++;
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <ESP8266_SendData+0x310>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3301      	adds	r3, #1
 80018d2:	4a13      	ldr	r2, [pc, #76]	; (8001920 <ESP8266_SendData+0x310>)
 80018d4:	6013      	str	r3, [r2, #0]
    while(inst3_receive_ok==0 && timeout<=5)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <ESP8266_SendData+0x308>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d103      	bne.n	80018e6 <ESP8266_SendData+0x2d6>
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <ESP8266_SendData+0x310>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	ddd8      	ble.n	8001898 <ESP8266_SendData+0x288>
    }
    if(inst3_receive_ok==1)
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <ESP8266_SendData+0x308>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d13a      	bne.n	8001964 <ESP8266_SendData+0x354>
    {
    	BSP_LCD_DrawRect(215,233,20,20);
 80018ee:	2314      	movs	r3, #20
 80018f0:	2214      	movs	r2, #20
 80018f2:	21e9      	movs	r1, #233	; 0xe9
 80018f4:	20d7      	movs	r0, #215	; 0xd7
 80018f6:	f006 f8cd 	bl	8007a94 <BSP_LCD_DrawRect>
    	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80018fa:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80018fe:	f005 fea5 	bl	800764c <BSP_LCD_SetTextColor>
    	BSP_LCD_FillRect(215,233,20,20);
 8001902:	2314      	movs	r3, #20
 8001904:	2214      	movs	r2, #20
 8001906:	21e9      	movs	r1, #233	; 0xe9
 8001908:	20d7      	movs	r0, #215	; 0xd7
 800190a:	f006 f8f5 	bl	8007af8 <BSP_LCD_FillRect>
 800190e:	e03d      	b.n	800198c <ESP8266_SendData+0x37c>
 8001910:	20000488 	.word	0x20000488
 8001914:	2000048c 	.word	0x2000048c
 8001918:	20000490 	.word	0x20000490
 800191c:	20000494 	.word	0x20000494
 8001920:	20000498 	.word	0x20000498
 8001924:	20000000 	.word	0x20000000
 8001928:	20000588 	.word	0x20000588
 800192c:	20000384 	.word	0x20000384
 8001930:	08008d40 	.word	0x08008d40
 8001934:	08008d48 	.word	0x08008d48
 8001938:	ffff0000 	.word	0xffff0000
 800193c:	08008da4 	.word	0x08008da4
 8001940:	08008db0 	.word	0x08008db0
 8001944:	08008dbc 	.word	0x08008dbc
 8001948:	08008d50 	.word	0x08008d50
 800194c:	08008d80 	.word	0x08008d80
 8001950:	200002f4 	.word	0x200002f4
 8001954:	200003c4 	.word	0x200003c4
 8001958:	08008d90 	.word	0x08008d90
 800195c:	20000404 	.word	0x20000404
 8001960:	08008d94 	.word	0x08008d94
    }
    else if(inst3_receive_ok!=1)
 8001964:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <ESP8266_SendData+0x420>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d00f      	beq.n	800198c <ESP8266_SendData+0x37c>
    {
    	BSP_LCD_DrawRect(215,233,20,20);
 800196c:	2314      	movs	r3, #20
 800196e:	2214      	movs	r2, #20
 8001970:	21e9      	movs	r1, #233	; 0xe9
 8001972:	20d7      	movs	r0, #215	; 0xd7
 8001974:	f006 f88e 	bl	8007a94 <BSP_LCD_DrawRect>
    	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001978:	482e      	ldr	r0, [pc, #184]	; (8001a34 <ESP8266_SendData+0x424>)
 800197a:	f005 fe67 	bl	800764c <BSP_LCD_SetTextColor>
    	BSP_LCD_FillRect(215,233,20,20);
 800197e:	2314      	movs	r3, #20
 8001980:	2214      	movs	r2, #20
 8001982:	21e9      	movs	r1, #233	; 0xe9
 8001984:	20d7      	movs	r0, #215	; 0xd7
 8001986:	f006 f8b7 	bl	8007af8 <BSP_LCD_FillRect>
    	return;
 800198a:	e04c      	b.n	8001a26 <ESP8266_SendData+0x416>
    }

    HAL_Delay(1000);
 800198c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001990:	f000 fcc0 	bl	8002314 <HAL_Delay>



    timeout=0;
 8001994:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <ESP8266_SendData+0x428>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
    while(inst4_receive_ok==0 && timeout<=5){
 800199a:	e01d      	b.n	80019d8 <ESP8266_SendData+0x3c8>
	HAL_UART_Transmit(&huart1, (uint8_t*)at_inst4, sizeof(at_inst4) - 1, 1000);
 800199c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a0:	220d      	movs	r2, #13
 80019a2:	4926      	ldr	r1, [pc, #152]	; (8001a3c <ESP8266_SendData+0x42c>)
 80019a4:	4826      	ldr	r0, [pc, #152]	; (8001a40 <ESP8266_SendData+0x430>)
 80019a6:	f004 fcd0 	bl	800634a <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rx_buffer4, sizeof(rx_buffer4)-1, 1000);
 80019aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ae:	223f      	movs	r2, #63	; 0x3f
 80019b0:	4924      	ldr	r1, [pc, #144]	; (8001a44 <ESP8266_SendData+0x434>)
 80019b2:	4823      	ldr	r0, [pc, #140]	; (8001a40 <ESP8266_SendData+0x430>)
 80019b4:	f004 fd5b 	bl	800646e <HAL_UART_Receive>
	inst4_receive_ok = checkBufferCharacters(rx_buffer4, "A");
 80019b8:	4923      	ldr	r1, [pc, #140]	; (8001a48 <ESP8266_SendData+0x438>)
 80019ba:	4822      	ldr	r0, [pc, #136]	; (8001a44 <ESP8266_SendData+0x434>)
 80019bc:	f000 f84e 	bl	8001a5c <checkBufferCharacters>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <ESP8266_SendData+0x43c>)
 80019c4:	6013      	str	r3, [r2, #0]
	HAL_Delay(3000);
 80019c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019ca:	f000 fca3 	bl	8002314 <HAL_Delay>
	timeout++;
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <ESP8266_SendData+0x428>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <ESP8266_SendData+0x428>)
 80019d6:	6013      	str	r3, [r2, #0]
    while(inst4_receive_ok==0 && timeout<=5){
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <ESP8266_SendData+0x43c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d103      	bne.n	80019e8 <ESP8266_SendData+0x3d8>
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <ESP8266_SendData+0x428>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	ddd9      	ble.n	800199c <ESP8266_SendData+0x38c>
    }
    if(inst4_receive_ok!=1){
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <ESP8266_SendData+0x43c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d119      	bne.n	8001a24 <ESP8266_SendData+0x414>
	return;
	}
    HAL_Delay(1000);
 80019f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019f4:	f000 fc8e 	bl	8002314 <HAL_Delay>



    memset(rx_buffer1, 0, sizeof(rx_buffer1));
 80019f8:	2240      	movs	r2, #64	; 0x40
 80019fa:	2100      	movs	r1, #0
 80019fc:	4814      	ldr	r0, [pc, #80]	; (8001a50 <ESP8266_SendData+0x440>)
 80019fe:	f006 fcc7 	bl	8008390 <memset>
    memset(rx_buffer2, 0, sizeof(rx_buffer2));
 8001a02:	2240      	movs	r2, #64	; 0x40
 8001a04:	2100      	movs	r1, #0
 8001a06:	4813      	ldr	r0, [pc, #76]	; (8001a54 <ESP8266_SendData+0x444>)
 8001a08:	f006 fcc2 	bl	8008390 <memset>
    memset(rx_buffer3, 0, sizeof(rx_buffer3));
 8001a0c:	2240      	movs	r2, #64	; 0x40
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4811      	ldr	r0, [pc, #68]	; (8001a58 <ESP8266_SendData+0x448>)
 8001a12:	f006 fcbd 	bl	8008390 <memset>
    memset(rx_buffer4, 0, sizeof(rx_buffer4));
 8001a16:	2240      	movs	r2, #64	; 0x40
 8001a18:	2100      	movs	r1, #0
 8001a1a:	480a      	ldr	r0, [pc, #40]	; (8001a44 <ESP8266_SendData+0x434>)
 8001a1c:	f006 fcb8 	bl	8008390 <memset>
 8001a20:	46a5      	mov	sp, r4
 8001a22:	e001      	b.n	8001a28 <ESP8266_SendData+0x418>
	return;
 8001a24:	bf00      	nop
 8001a26:	46a5      	mov	sp, r4
}
 8001a28:	3758      	adds	r7, #88	; 0x58
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a30:	20000490 	.word	0x20000490
 8001a34:	ffff0000 	.word	0xffff0000
 8001a38:	20000498 	.word	0x20000498
 8001a3c:	2000002c 	.word	0x2000002c
 8001a40:	20000588 	.word	0x20000588
 8001a44:	20000444 	.word	0x20000444
 8001a48:	08008da0 	.word	0x08008da0
 8001a4c:	20000494 	.word	0x20000494
 8001a50:	20000384 	.word	0x20000384
 8001a54:	200003c4 	.word	0x200003c4
 8001a58:	20000404 	.word	0x20000404

08001a5c <checkBufferCharacters>:

int32_t checkBufferCharacters(uint8_t* buffer, const char* targetString){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
    uint32_t targetLen = strlen(targetString);
 8001a66:	6838      	ldr	r0, [r7, #0]
 8001a68:	f7fe fbc2 	bl	80001f0 <strlen>
 8001a6c:	60b8      	str	r0, [r7, #8]

    for (uint32_t i = 0; i < targetLen; i++){
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e01f      	b.n	8001ab4 <checkBufferCharacters+0x58>
        int found = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
        for (uint32_t j = 0; j < BUFFER_SIZE; j++){
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e00f      	b.n	8001a9e <checkBufferCharacters+0x42>
            if (buffer[j] == targetString[i]) {
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	6839      	ldr	r1, [r7, #0]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	440b      	add	r3, r1
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d102      	bne.n	8001a98 <checkBufferCharacters+0x3c>
                found = 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	613b      	str	r3, [r7, #16]
                break;
 8001a96:	e005      	b.n	8001aa4 <checkBufferCharacters+0x48>
        for (uint32_t j = 0; j < BUFFER_SIZE; j++){
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b3f      	cmp	r3, #63	; 0x3f
 8001aa2:	d9ec      	bls.n	8001a7e <checkBufferCharacters+0x22>
            }
        }
        if (!found) {
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <checkBufferCharacters+0x52>
            return 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e007      	b.n	8001abe <checkBufferCharacters+0x62>
    for (uint32_t i = 0; i < targetLen; i++){
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d3db      	bcc.n	8001a74 <checkBufferCharacters+0x18>
        }
    }
    return 1;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <delay>:
/* ESP8266 part(end) */

/* DHT22 part(start) */
void delay (uint16_t time)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <delay+0x30>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8001ada:	bf00      	nop
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <delay+0x30>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d3f9      	bcc.n	8001adc <delay+0x14>
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000540 	.word	0x20000540

08001afc <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b1c:	2311      	movs	r3, #17
 8001b1e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	4619      	mov	r1, r3
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f001 f972 	bl	8002e14 <HAL_GPIO_Init>
}
 8001b30:	bf00      	nop
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
	//GPIO_NOPULL
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	4619      	mov	r1, r3
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f001 f954 	bl	8002e14 <HAL_GPIO_Init>
}
 8001b6c:	bf00      	nop
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <DHT22_Start>:

void DHT22_Start (void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT22_PORT, DHT22_PIN);
 8001b78:	2108      	movs	r1, #8
 8001b7a:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <DHT22_Start+0x3c>)
 8001b7c:	f7ff ffbe 	bl	8001afc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2108      	movs	r1, #8
 8001b84:	480a      	ldr	r0, [pc, #40]	; (8001bb0 <DHT22_Start+0x3c>)
 8001b86:	f001 fc15 	bl	80033b4 <HAL_GPIO_WritePin>
	delay (1200);
 8001b8a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001b8e:	f7ff ff9b 	bl	8001ac8 <delay>
    HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);
 8001b92:	2201      	movs	r2, #1
 8001b94:	2108      	movs	r1, #8
 8001b96:	4806      	ldr	r0, [pc, #24]	; (8001bb0 <DHT22_Start+0x3c>)
 8001b98:	f001 fc0c 	bl	80033b4 <HAL_GPIO_WritePin>
	delay (20);
 8001b9c:	2014      	movs	r0, #20
 8001b9e:	f7ff ff93 	bl	8001ac8 <delay>
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);
 8001ba2:	2108      	movs	r1, #8
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <DHT22_Start+0x3c>)
 8001ba6:	f7ff ffc7 	bl	8001b38 <Set_Pin_Input>
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40020800 	.word	0x40020800

08001bb4 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response (void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	71fb      	strb	r3, [r7, #7]
    timeout_DHT=0;
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <DHT22_Check_Response+0x54>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
    delay (40);
 8001bc4:	2028      	movs	r0, #40	; 0x28
 8001bc6:	f7ff ff7f 	bl	8001ac8 <delay>
	if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))==0){
 8001bca:	2108      	movs	r1, #8
 8001bcc:	480f      	ldr	r0, [pc, #60]	; (8001c0c <DHT22_Check_Response+0x58>)
 8001bce:	f001 fbd9 	bl	8003384 <HAL_GPIO_ReadPin>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d111      	bne.n	8001bfc <DHT22_Check_Response+0x48>

            delay (40);
 8001bd8:	2028      	movs	r0, #40	; 0x28
 8001bda:	f7ff ff75 	bl	8001ac8 <delay>

	    if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))==1){
 8001bde:	2108      	movs	r1, #8
 8001be0:	480a      	ldr	r0, [pc, #40]	; (8001c0c <DHT22_Check_Response+0x58>)
 8001be2:	f001 fbcf 	bl	8003384 <HAL_GPIO_ReadPin>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d105      	bne.n	8001bf8 <DHT22_Check_Response+0x44>
	    	Response = 1;
 8001bec:	2301      	movs	r3, #1
 8001bee:	71fb      	strb	r3, [r7, #7]
	    	delay (80);
 8001bf0:	2050      	movs	r0, #80	; 0x50
 8001bf2:	f7ff ff69 	bl	8001ac8 <delay>
 8001bf6:	e001      	b.n	8001bfc <DHT22_Check_Response+0x48>
	    }
	    else Response = -1; // 255
 8001bf8:	23ff      	movs	r3, #255	; 0xff
 8001bfa:	71fb      	strb	r3, [r7, #7]
	}

    return Response;
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200004a8 	.word	0x200004a8
 8001c0c:	40020800 	.word	0x40020800

08001c10 <DHT22_Read>:

 uint8_t DHT22_Read (void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
    uint8_t i,j;
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));
 8001c16:	bf00      	nop
 8001c18:	2108      	movs	r1, #8
 8001c1a:	4824      	ldr	r0, [pc, #144]	; (8001cac <DHT22_Read+0x9c>)
 8001c1c:	f001 fbb2 	bl	8003384 <HAL_GPIO_ReadPin>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f8      	bne.n	8001c18 <DHT22_Read+0x8>
    for (j=0;j<8;j++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	71bb      	strb	r3, [r7, #6]
 8001c2a:	e037      	b.n	8001c9c <DHT22_Read+0x8c>
    {
	    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));
 8001c2c:	bf00      	nop
 8001c2e:	2108      	movs	r1, #8
 8001c30:	481e      	ldr	r0, [pc, #120]	; (8001cac <DHT22_Read+0x9c>)
 8001c32:	f001 fba7 	bl	8003384 <HAL_GPIO_ReadPin>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f8      	beq.n	8001c2e <DHT22_Read+0x1e>
	    delay (50);
 8001c3c:	2032      	movs	r0, #50	; 0x32
 8001c3e:	f7ff ff43 	bl	8001ac8 <delay>
	    if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))
 8001c42:	2108      	movs	r1, #8
 8001c44:	4819      	ldr	r0, [pc, #100]	; (8001cac <DHT22_Read+0x9c>)
 8001c46:	f001 fb9d 	bl	8003384 <HAL_GPIO_ReadPin>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10e      	bne.n	8001c6e <DHT22_Read+0x5e>
	{
		i&= ~(1<<(7-j));
 8001c50:	79bb      	ldrb	r3, [r7, #6]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2201      	movs	r2, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	b25b      	sxtb	r3, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	b25a      	sxtb	r2, r3
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	4013      	ands	r3, r2
 8001c68:	b25b      	sxtb	r3, r3
 8001c6a:	71fb      	strb	r3, [r7, #7]
 8001c6c:	e00b      	b.n	8001c86 <DHT22_Read+0x76>
	}
	    else i|= (1<<(7-j));
 8001c6e:	79bb      	ldrb	r3, [r7, #6]
 8001c70:	f1c3 0307 	rsb	r3, r3, #7
 8001c74:	2201      	movs	r2, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	b25a      	sxtb	r2, r3
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b25b      	sxtb	r3, r3
 8001c84:	71fb      	strb	r3, [r7, #7]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));
 8001c86:	bf00      	nop
 8001c88:	2108      	movs	r1, #8
 8001c8a:	4808      	ldr	r0, [pc, #32]	; (8001cac <DHT22_Read+0x9c>)
 8001c8c:	f001 fb7a 	bl	8003384 <HAL_GPIO_ReadPin>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f8      	bne.n	8001c88 <DHT22_Read+0x78>
    for (j=0;j<8;j++)
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	71bb      	strb	r3, [r7, #6]
 8001c9c:	79bb      	ldrb	r3, [r7, #6]
 8001c9e:	2b07      	cmp	r3, #7
 8001ca0:	d9c4      	bls.n	8001c2c <DHT22_Read+0x1c>
    }
    return i;
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40020800 	.word	0x40020800

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <Error_Handler+0x8>
	...

08001cbc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <MX_RTC_Init+0xac>)
 8001cd6:	4a25      	ldr	r2, [pc, #148]	; (8001d6c <MX_RTC_Init+0xb0>)
 8001cd8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cda:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <MX_RTC_Init+0xac>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <MX_RTC_Init+0xac>)
 8001ce2:	227f      	movs	r2, #127	; 0x7f
 8001ce4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <MX_RTC_Init+0xac>)
 8001ce8:	22ff      	movs	r2, #255	; 0xff
 8001cea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <MX_RTC_Init+0xac>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <MX_RTC_Init+0xac>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <MX_RTC_Init+0xac>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cfe:	481a      	ldr	r0, [pc, #104]	; (8001d68 <MX_RTC_Init+0xac>)
 8001d00:	f002 ff94 	bl	8004c2c <HAL_RTC_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001d0a:	f7ff ffd1 	bl	8001cb0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 8001d0e:	230a      	movs	r3, #10
 8001d10:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 40;
 8001d12:	2328      	movs	r3, #40	; 0x28
 8001d14:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2200      	movs	r2, #0
 8001d26:	4619      	mov	r1, r3
 8001d28:	480f      	ldr	r0, [pc, #60]	; (8001d68 <MX_RTC_Init+0xac>)
 8001d2a:	f002 fff5 	bl	8004d18 <HAL_RTC_SetTime>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001d34:	f7ff ffbc 	bl	8001cb0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8001d40:	2307      	movs	r3, #7
 8001d42:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 23;
 8001d44:	2317      	movs	r3, #23
 8001d46:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001d48:	463b      	mov	r3, r7
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4806      	ldr	r0, [pc, #24]	; (8001d68 <MX_RTC_Init+0xac>)
 8001d50:	f003 f8da 	bl	8004f08 <HAL_RTC_SetDate>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001d5a:	f7ff ffa9 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200004c4 	.word	0x200004c4
 8001d6c:	40002800 	.word	0x40002800

08001d70 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08e      	sub	sp, #56	; 0x38
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d78:	f107 0308 	add.w	r3, r7, #8
 8001d7c:	2230      	movs	r2, #48	; 0x30
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f006 fb05 	bl	8008390 <memset>
  if(rtcHandle->Instance==RTC)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <HAL_RTC_MspInit+0x4c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d111      	bne.n	8001db4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d90:	2320      	movs	r3, #32
 8001d92:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9a:	f107 0308 	add.w	r3, r7, #8
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 fd84 	bl	80048ac <HAL_RCCEx_PeriphCLKConfig>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001daa:	f7ff ff81 	bl	8001cb0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <HAL_RTC_MspInit+0x50>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001db4:	bf00      	nop
 8001db6:	3738      	adds	r7, #56	; 0x38
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40002800 	.word	0x40002800
 8001dc0:	42470e3c 	.word	0x42470e3c

08001dc4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <MX_SPI5_Init+0x64>)
 8001dca:	4a18      	ldr	r2, [pc, #96]	; (8001e2c <MX_SPI5_Init+0x68>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <MX_SPI5_Init+0x64>)
 8001dd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dd4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <MX_SPI5_Init+0x64>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <MX_SPI5_Init+0x64>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <MX_SPI5_Init+0x64>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <MX_SPI5_Init+0x64>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <MX_SPI5_Init+0x64>)
 8001df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <MX_SPI5_Init+0x64>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <MX_SPI5_Init+0x64>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <MX_SPI5_Init+0x64>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <MX_SPI5_Init+0x64>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <MX_SPI5_Init+0x64>)
 8001e10:	220a      	movs	r2, #10
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e14:	4804      	ldr	r0, [pc, #16]	; (8001e28 <MX_SPI5_Init+0x64>)
 8001e16:	f003 fa98 	bl	800534a <HAL_SPI_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001e20:	f7ff ff46 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	200004e4 	.word	0x200004e4
 8001e2c:	40015000 	.word	0x40015000

08001e30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <HAL_SPI_MspInit+0x84>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d12c      	bne.n	8001eac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_SPI_MspInit+0x88>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a17      	ldr	r2, [pc, #92]	; (8001eb8 <HAL_SPI_MspInit+0x88>)
 8001e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_SPI_MspInit+0x88>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_SPI_MspInit+0x88>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a10      	ldr	r2, [pc, #64]	; (8001eb8 <HAL_SPI_MspInit+0x88>)
 8001e78:	f043 0320 	orr.w	r3, r3, #32
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_SPI_MspInit+0x88>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e8a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e9c:	2305      	movs	r3, #5
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <HAL_SPI_MspInit+0x8c>)
 8001ea8:	f000 ffb4 	bl	8002e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001eac:	bf00      	nop
 8001eae:	3728      	adds	r7, #40	; 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40015000 	.word	0x40015000
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40021400 	.word	0x40021400

08001ec0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_SPI_MspDeInit+0x30>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d10a      	bne.n	8001ee8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HAL_SPI_MspDeInit+0x34>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_SPI_MspDeInit+0x34>)
 8001ed8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001ede:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001ee2:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <HAL_SPI_MspDeInit+0x38>)
 8001ee4:	f001 f942 	bl	800316c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40015000 	.word	0x40015000
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40021400 	.word	0x40021400

08001efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800

08001f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001f50:	f002 fc90 	bl	8004874 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <NMI_Handler+0x8>

08001f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <HardFault_Handler+0x4>

08001f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <MemManage_Handler+0x4>

08001f62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <BusFault_Handler+0x4>

08001f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <UsageFault_Handler+0x4>

08001f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f9c:	f000 f99a 	bl	80022d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <LTDC_IRQHandler+0x10>)
 8001faa:	f001 fcad 	bl	8003908 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200001f4 	.word	0x200001f4

08001fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc0:	4a14      	ldr	r2, [pc, #80]	; (8002014 <_sbrk+0x5c>)
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <_sbrk+0x60>)
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <_sbrk+0x64>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <_sbrk+0x68>)
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <_sbrk+0x64>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d207      	bcs.n	8001ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe8:	f006 f9a8 	bl	800833c <__errno>
 8001fec:	4603      	mov	r3, r0
 8001fee:	220c      	movs	r2, #12
 8001ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	e009      	b.n	800200c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <_sbrk+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <_sbrk+0x64>)
 8002008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20030000 	.word	0x20030000
 8002018:	00000400 	.word	0x00000400
 800201c:	2000053c 	.word	0x2000053c
 8002020:	20000838 	.word	0x20000838

08002024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <SystemInit+0x20>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <SystemInit+0x20>)
 8002030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800204e:	463b      	mov	r3, r7
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <MX_TIM6_Init+0x64>)
 8002058:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <MX_TIM6_Init+0x68>)
 800205a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <MX_TIM6_Init+0x64>)
 800205e:	2259      	movs	r2, #89	; 0x59
 8002060:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <MX_TIM6_Init+0x64>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002068:	4b10      	ldr	r3, [pc, #64]	; (80020ac <MX_TIM6_Init+0x64>)
 800206a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800206e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002070:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <MX_TIM6_Init+0x64>)
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002076:	480d      	ldr	r0, [pc, #52]	; (80020ac <MX_TIM6_Init+0x64>)
 8002078:	f003 ff46 	bl	8005f08 <HAL_TIM_Base_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002082:	f7ff fe15 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800208e:	463b      	mov	r3, r7
 8002090:	4619      	mov	r1, r3
 8002092:	4806      	ldr	r0, [pc, #24]	; (80020ac <MX_TIM6_Init+0x64>)
 8002094:	f004 f890 	bl	80061b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800209e:	f7ff fe07 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000540 	.word	0x20000540
 80020b0:	40001000 	.word	0x40001000

080020b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <HAL_TIM_Base_MspInit+0x3c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d10d      	bne.n	80020e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_TIM_Base_MspInit+0x40>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <HAL_TIM_Base_MspInit+0x40>)
 80020d0:	f043 0310 	orr.w	r3, r3, #16
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_TIM_Base_MspInit+0x40>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40001000 	.word	0x40001000
 80020f4:	40023800 	.word	0x40023800

080020f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <MX_USART1_UART_Init+0x50>)
 8002100:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 8002104:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002108:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 800211e:	220c      	movs	r2, #12
 8002120:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800212e:	4805      	ldr	r0, [pc, #20]	; (8002144 <MX_USART1_UART_Init+0x4c>)
 8002130:	f004 f8be 	bl	80062b0 <HAL_UART_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800213a:	f7ff fdb9 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000588 	.word	0x20000588
 8002148:	40011000 	.word	0x40011000

0800214c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_UART_MspInit+0x84>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d12c      	bne.n	80021c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <HAL_UART_MspInit+0x88>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <HAL_UART_MspInit+0x88>)
 8002178:	f043 0310 	orr.w	r3, r3, #16
 800217c:	6453      	str	r3, [r2, #68]	; 0x44
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_UART_MspInit+0x88>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_UART_MspInit+0x88>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a10      	ldr	r2, [pc, #64]	; (80021d4 <HAL_UART_MspInit+0x88>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <HAL_UART_MspInit+0x88>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021b8:	2307      	movs	r3, #7
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	4619      	mov	r1, r3
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <HAL_UART_MspInit+0x8c>)
 80021c4:	f000 fe26 	bl	8002e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80021c8:	bf00      	nop
 80021ca:	3728      	adds	r7, #40	; 0x28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40011000 	.word	0x40011000
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020000 	.word	0x40020000

080021dc <Reset_Handler>:
 80021dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002214 <LoopFillZerobss+0x12>
 80021e0:	480d      	ldr	r0, [pc, #52]	; (8002218 <LoopFillZerobss+0x16>)
 80021e2:	490e      	ldr	r1, [pc, #56]	; (800221c <LoopFillZerobss+0x1a>)
 80021e4:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <LoopFillZerobss+0x1e>)
 80021e6:	2300      	movs	r3, #0
 80021e8:	e002      	b.n	80021f0 <LoopCopyDataInit>

080021ea <CopyDataInit>:
 80021ea:	58d4      	ldr	r4, [r2, r3]
 80021ec:	50c4      	str	r4, [r0, r3]
 80021ee:	3304      	adds	r3, #4

080021f0 <LoopCopyDataInit>:
 80021f0:	18c4      	adds	r4, r0, r3
 80021f2:	428c      	cmp	r4, r1
 80021f4:	d3f9      	bcc.n	80021ea <CopyDataInit>
 80021f6:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <LoopFillZerobss+0x22>)
 80021f8:	4c0b      	ldr	r4, [pc, #44]	; (8002228 <LoopFillZerobss+0x26>)
 80021fa:	2300      	movs	r3, #0
 80021fc:	e001      	b.n	8002202 <LoopFillZerobss>

080021fe <FillZerobss>:
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	3204      	adds	r2, #4

08002202 <LoopFillZerobss>:
 8002202:	42a2      	cmp	r2, r4
 8002204:	d3fb      	bcc.n	80021fe <FillZerobss>
 8002206:	f7ff ff0d 	bl	8002024 <SystemInit>
 800220a:	f006 f89d 	bl	8008348 <__libc_init_array>
 800220e:	f7fe feeb 	bl	8000fe8 <main>
 8002212:	4770      	bx	lr
 8002214:	20030000 	.word	0x20030000
 8002218:	20000000 	.word	0x20000000
 800221c:	2000010c 	.word	0x2000010c
 8002220:	080576b0 	.word	0x080576b0
 8002224:	2000010c 	.word	0x2000010c
 8002228:	20000834 	.word	0x20000834

0800222c <ADC_IRQHandler>:
 800222c:	e7fe      	b.n	800222c <ADC_IRQHandler>
	...

08002230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002234:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_Init+0x40>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_Init+0x40>)
 800223a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800223e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_Init+0x40>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <HAL_Init+0x40>)
 8002246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_Init+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a07      	ldr	r2, [pc, #28]	; (8002270 <HAL_Init+0x40>)
 8002252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002258:	2003      	movs	r0, #3
 800225a:	f000 f94f 	bl	80024fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225e:	2000      	movs	r0, #0
 8002260:	f000 f808 	bl	8002274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002264:	f7ff fe4a 	bl	8001efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023c00 	.word	0x40023c00

08002274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_InitTick+0x54>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_InitTick+0x58>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228a:	fbb3 f3f1 	udiv	r3, r3, r1
 800228e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f967 	bl	8002566 <HAL_SYSTICK_Config>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e00e      	b.n	80022c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d80a      	bhi.n	80022be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a8:	2200      	movs	r2, #0
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295
 80022b0:	f000 f92f 	bl	8002512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <HAL_InitTick+0x5c>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e000      	b.n	80022c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	2000003c 	.word	0x2000003c
 80022cc:	20000044 	.word	0x20000044
 80022d0:	20000040 	.word	0x20000040

080022d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_IncTick+0x20>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_IncTick+0x24>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <HAL_IncTick+0x24>)
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000044 	.word	0x20000044
 80022f8:	200005cc 	.word	0x200005cc

080022fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_GetTick+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	200005cc 	.word	0x200005cc

08002314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800231c:	f7ff ffee 	bl	80022fc <HAL_GetTick>
 8002320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d005      	beq.n	800233a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_Delay+0x44>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800233a:	bf00      	nop
 800233c:	f7ff ffde 	bl	80022fc <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d8f7      	bhi.n	800233c <HAL_Delay+0x28>
  {
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000044 	.word	0x20000044

0800235c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002378:	4013      	ands	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800238c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238e:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60d3      	str	r3, [r2, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <__NVIC_GetPriorityGrouping+0x18>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	f003 0307 	and.w	r3, r3, #7
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db0b      	blt.n	80023ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	4907      	ldr	r1, [pc, #28]	; (80023f8 <__NVIC_EnableIRQ+0x38>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2001      	movs	r0, #1
 80023e2:	fa00 f202 	lsl.w	r2, r0, r2
 80023e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000e100 	.word	0xe000e100

080023fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	2b00      	cmp	r3, #0
 800240e:	db0a      	blt.n	8002426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	b2da      	uxtb	r2, r3
 8002414:	490c      	ldr	r1, [pc, #48]	; (8002448 <__NVIC_SetPriority+0x4c>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	0112      	lsls	r2, r2, #4
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	440b      	add	r3, r1
 8002420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002424:	e00a      	b.n	800243c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4908      	ldr	r1, [pc, #32]	; (800244c <__NVIC_SetPriority+0x50>)
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	3b04      	subs	r3, #4
 8002434:	0112      	lsls	r2, r2, #4
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	440b      	add	r3, r1
 800243a:	761a      	strb	r2, [r3, #24]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000e100 	.word	0xe000e100
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002450:	b480      	push	{r7}
 8002452:	b089      	sub	sp, #36	; 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f1c3 0307 	rsb	r3, r3, #7
 800246a:	2b04      	cmp	r3, #4
 800246c:	bf28      	it	cs
 800246e:	2304      	movcs	r3, #4
 8002470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3304      	adds	r3, #4
 8002476:	2b06      	cmp	r3, #6
 8002478:	d902      	bls.n	8002480 <NVIC_EncodePriority+0x30>
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3b03      	subs	r3, #3
 800247e:	e000      	b.n	8002482 <NVIC_EncodePriority+0x32>
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	f04f 32ff 	mov.w	r2, #4294967295
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43da      	mvns	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	401a      	ands	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002498:	f04f 31ff 	mov.w	r1, #4294967295
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	43d9      	mvns	r1, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	4313      	orrs	r3, r2
         );
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3724      	adds	r7, #36	; 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c8:	d301      	bcc.n	80024ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ca:	2301      	movs	r3, #1
 80024cc:	e00f      	b.n	80024ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <SysTick_Config+0x40>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d6:	210f      	movs	r1, #15
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295
 80024dc:	f7ff ff8e 	bl	80023fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <SysTick_Config+0x40>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e6:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <SysTick_Config+0x40>)
 80024e8:	2207      	movs	r2, #7
 80024ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	e000e010 	.word	0xe000e010

080024fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ff29 	bl	800235c <__NVIC_SetPriorityGrouping>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002512:	b580      	push	{r7, lr}
 8002514:	b086      	sub	sp, #24
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002524:	f7ff ff3e 	bl	80023a4 <__NVIC_GetPriorityGrouping>
 8002528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	6978      	ldr	r0, [r7, #20]
 8002530:	f7ff ff8e 	bl	8002450 <NVIC_EncodePriority>
 8002534:	4602      	mov	r2, r0
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff5d 	bl	80023fc <__NVIC_SetPriority>
}
 8002542:	bf00      	nop
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff31 	bl	80023c0 <__NVIC_EnableIRQ>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ffa2 	bl	80024b8 <SysTick_Config>
 8002574:	4603      	mov	r3, r0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800258c:	f7ff feb6 	bl	80022fc <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e099      	b.n	80026d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0201 	bic.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025bc:	e00f      	b.n	80025de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025be:	f7ff fe9d 	bl	80022fc <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	d908      	bls.n	80025de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2220      	movs	r2, #32
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2203      	movs	r2, #3
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e078      	b.n	80026d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1e8      	bne.n	80025be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <HAL_DMA_Init+0x158>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800260a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	2b04      	cmp	r3, #4
 8002636:	d107      	bne.n	8002648 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	4313      	orrs	r3, r2
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f023 0307 	bic.w	r3, r3, #7
 800265e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	4313      	orrs	r3, r2
 8002668:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	2b04      	cmp	r3, #4
 8002670:	d117      	bne.n	80026a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00e      	beq.n	80026a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f8bd 	bl	8002804 <DMA_CheckFifoParam>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2240      	movs	r2, #64	; 0x40
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800269e:	2301      	movs	r3, #1
 80026a0:	e016      	b.n	80026d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f874 	bl	8002798 <DMA_CalcBaseAndBitshift>
 80026b0:	4603      	mov	r3, r0
 80026b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b8:	223f      	movs	r2, #63	; 0x3f
 80026ba:	409a      	lsls	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	f010803f 	.word	0xf010803f

080026dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e050      	b.n	8002790 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d101      	bne.n	80026fe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80026fa:	2302      	movs	r3, #2
 80026fc:	e048      	b.n	8002790 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2200      	movs	r2, #0
 800271c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2221      	movs	r2, #33	; 0x21
 800273c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f82a 	bl	8002798 <DMA_CalcBaseAndBitshift>
 8002744:	4603      	mov	r3, r0
 8002746:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	223f      	movs	r2, #63	; 0x3f
 8002772:	409a      	lsls	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	3b10      	subs	r3, #16
 80027a8:	4a14      	ldr	r2, [pc, #80]	; (80027fc <DMA_CalcBaseAndBitshift+0x64>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	091b      	lsrs	r3, r3, #4
 80027b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027b2:	4a13      	ldr	r2, [pc, #76]	; (8002800 <DMA_CalcBaseAndBitshift+0x68>)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d909      	bls.n	80027da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	1d1a      	adds	r2, r3, #4
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	659a      	str	r2, [r3, #88]	; 0x58
 80027d8:	e007      	b.n	80027ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027e2:	f023 0303 	bic.w	r3, r3, #3
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	aaaaaaab 	.word	0xaaaaaaab
 8002800:	08053dfc 	.word	0x08053dfc

08002804 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d11f      	bne.n	800285e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d856      	bhi.n	80028d2 <DMA_CheckFifoParam+0xce>
 8002824:	a201      	add	r2, pc, #4	; (adr r2, 800282c <DMA_CheckFifoParam+0x28>)
 8002826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282a:	bf00      	nop
 800282c:	0800283d 	.word	0x0800283d
 8002830:	0800284f 	.word	0x0800284f
 8002834:	0800283d 	.word	0x0800283d
 8002838:	080028d3 	.word	0x080028d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d046      	beq.n	80028d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284c:	e043      	b.n	80028d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002856:	d140      	bne.n	80028da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800285c:	e03d      	b.n	80028da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002866:	d121      	bne.n	80028ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d837      	bhi.n	80028de <DMA_CheckFifoParam+0xda>
 800286e:	a201      	add	r2, pc, #4	; (adr r2, 8002874 <DMA_CheckFifoParam+0x70>)
 8002870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002874:	08002885 	.word	0x08002885
 8002878:	0800288b 	.word	0x0800288b
 800287c:	08002885 	.word	0x08002885
 8002880:	0800289d 	.word	0x0800289d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
      break;
 8002888:	e030      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d025      	beq.n	80028e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289a:	e022      	b.n	80028e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a4:	d11f      	bne.n	80028e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028aa:	e01c      	b.n	80028e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d903      	bls.n	80028ba <DMA_CheckFifoParam+0xb6>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d003      	beq.n	80028c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028b8:	e018      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
      break;
 80028be:	e015      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00e      	beq.n	80028ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      break;
 80028d0:	e00b      	b.n	80028ea <DMA_CheckFifoParam+0xe6>
      break;
 80028d2:	bf00      	nop
 80028d4:	e00a      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028d6:	bf00      	nop
 80028d8:	e008      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028da:	bf00      	nop
 80028dc:	e006      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028de:	bf00      	nop
 80028e0:	e004      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028e2:	bf00      	nop
 80028e4:	e002      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;   
 80028e6:	bf00      	nop
 80028e8:	e000      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028ea:	bf00      	nop
    }
  } 
  
  return status; 
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop

080028fc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e03b      	b.n	8002986 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fd fe70 	bl	8000608 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294c:	f023 0107 	bic.w	r1, r3, #7
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002966:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68d1      	ldr	r1, [r2, #12]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	430b      	orrs	r3, r1
 8002974:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af02      	add	r7, sp, #8
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_DMA2D_Start+0x1c>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e018      	b.n	80029dc <HAL_DMA2D_Start+0x4e>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2202      	movs	r2, #2
 80029b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f989 	bl	8002cdc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d056      	beq.n	8002aae <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a00:	f7ff fc7c 	bl	80022fc <HAL_GetTick>
 8002a04:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002a06:	e04b      	b.n	8002aa0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d023      	beq.n	8002a62 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	f043 0202 	orr.w	r2, r3, #2
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2221      	movs	r2, #33	; 0x21
 8002a4c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2204      	movs	r2, #4
 8002a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0a5      	b.n	8002bae <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d01a      	beq.n	8002aa0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a6a:	f7ff fc47 	bl	80022fc <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <HAL_DMA2D_PollForTransfer+0x9c>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10f      	bne.n	8002aa0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e086      	b.n	8002bae <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0ac      	beq.n	8002a08 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d061      	beq.n	8002b94 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ad0:	f7ff fc14 	bl	80022fc <HAL_GetTick>
 8002ad4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002ad6:	e056      	b.n	8002b86 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d02e      	beq.n	8002b48 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	f043 0204 	orr.w	r2, r3, #4
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	f043 0202 	orr.w	r2, r3, #2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2229      	movs	r2, #41	; 0x29
 8002b32:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2204      	movs	r2, #4
 8002b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e032      	b.n	8002bae <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4e:	d01a      	beq.n	8002b86 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b50:	f7ff fbd4 	bl	80022fc <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d302      	bcc.n	8002b66 <HAL_DMA2D_PollForTransfer+0x182>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10f      	bne.n	8002b86 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	f043 0220 	orr.w	r2, r3, #32
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2203      	movs	r2, #3
 8002b76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e013      	b.n	8002bae <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0a1      	beq.n	8002ad8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2212      	movs	r2, #18
 8002b9a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_DMA2D_ConfigLayer+0x20>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e079      	b.n	8002ccc <HAL_DMA2D_ConfigLayer+0x114>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	3318      	adds	r3, #24
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	041b      	lsls	r3, r3, #16
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002c02:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <HAL_DMA2D_ConfigLayer+0x120>)
 8002c04:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b0a      	cmp	r3, #10
 8002c0c:	d003      	beq.n	8002c16 <HAL_DMA2D_ConfigLayer+0x5e>
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b09      	cmp	r3, #9
 8002c14:	d107      	bne.n	8002c26 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	e005      	b.n	8002c32 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	061b      	lsls	r3, r3, #24
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d120      	bne.n	8002c7a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	ea02 0103 	and.w	r1, r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b0a      	cmp	r3, #10
 8002c60:	d003      	beq.n	8002c6a <HAL_DMA2D_ConfigLayer+0xb2>
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b09      	cmp	r3, #9
 8002c68:	d127      	bne.n	8002cba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
 8002c78:	e01f      	b.n	8002cba <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	ea02 0103 	and.w	r1, r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b0a      	cmp	r3, #10
 8002ca2:	d003      	beq.n	8002cac <HAL_DMA2D_ConfigLayer+0xf4>
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b09      	cmp	r3, #9
 8002caa:	d106      	bne.n	8002cba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002cb8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	ff03000f 	.word	0xff03000f

08002cdc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b08b      	sub	sp, #44	; 0x2c
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	041a      	lsls	r2, r3, #16
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d14:	d174      	bne.n	8002e00 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002d1c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d24:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002d2c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d108      	bne.n	8002d4e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	431a      	orrs	r2, r3
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4c:	e053      	b.n	8002df6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d106      	bne.n	8002d64 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
 8002d62:	e048      	b.n	8002df6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d111      	bne.n	8002d90 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	0cdb      	lsrs	r3, r3, #19
 8002d70:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	0a9b      	lsrs	r3, r3, #10
 8002d76:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	08db      	lsrs	r3, r3, #3
 8002d7c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	02db      	lsls	r3, r3, #11
 8002d86:	4313      	orrs	r3, r2
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8e:	e032      	b.n	8002df6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d117      	bne.n	8002dc8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	0fdb      	lsrs	r3, r3, #31
 8002d9c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	0cdb      	lsrs	r3, r3, #19
 8002da2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	0adb      	lsrs	r3, r3, #11
 8002da8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	08db      	lsrs	r3, r3, #3
 8002dae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	029b      	lsls	r3, r3, #10
 8002db8:	431a      	orrs	r2, r3
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	03db      	lsls	r3, r3, #15
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc6:	e016      	b.n	8002df6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	0f1b      	lsrs	r3, r3, #28
 8002dcc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	0d1b      	lsrs	r3, r3, #20
 8002dd2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	0b1b      	lsrs	r3, r3, #12
 8002dd8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	011a      	lsls	r2, r3, #4
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	431a      	orrs	r2, r3
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	031b      	lsls	r3, r3, #12
 8002dee:	4313      	orrs	r3, r2
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002dfe:	e003      	b.n	8002e08 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	60da      	str	r2, [r3, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	372c      	adds	r7, #44	; 0x2c
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	e177      	b.n	8003120 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e30:	2201      	movs	r2, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	f040 8166 	bne.w	800311a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d005      	beq.n	8002e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d130      	bne.n	8002ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2203      	movs	r2, #3
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 0201 	and.w	r2, r3, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d017      	beq.n	8002f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2203      	movs	r2, #3
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d123      	bne.n	8002f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	08da      	lsrs	r2, r3, #3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3208      	adds	r2, #8
 8002f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	220f      	movs	r2, #15
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	08da      	lsrs	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3208      	adds	r2, #8
 8002f52:	69b9      	ldr	r1, [r7, #24]
 8002f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	2203      	movs	r2, #3
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0203 	and.w	r2, r3, #3
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80c0 	beq.w	800311a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	4b66      	ldr	r3, [pc, #408]	; (8003138 <HAL_GPIO_Init+0x324>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	4a65      	ldr	r2, [pc, #404]	; (8003138 <HAL_GPIO_Init+0x324>)
 8002fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002faa:	4b63      	ldr	r3, [pc, #396]	; (8003138 <HAL_GPIO_Init+0x324>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fb6:	4a61      	ldr	r2, [pc, #388]	; (800313c <HAL_GPIO_Init+0x328>)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	089b      	lsrs	r3, r3, #2
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	220f      	movs	r2, #15
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a58      	ldr	r2, [pc, #352]	; (8003140 <HAL_GPIO_Init+0x32c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d037      	beq.n	8003052 <HAL_GPIO_Init+0x23e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a57      	ldr	r2, [pc, #348]	; (8003144 <HAL_GPIO_Init+0x330>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d031      	beq.n	800304e <HAL_GPIO_Init+0x23a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a56      	ldr	r2, [pc, #344]	; (8003148 <HAL_GPIO_Init+0x334>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d02b      	beq.n	800304a <HAL_GPIO_Init+0x236>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a55      	ldr	r2, [pc, #340]	; (800314c <HAL_GPIO_Init+0x338>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d025      	beq.n	8003046 <HAL_GPIO_Init+0x232>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a54      	ldr	r2, [pc, #336]	; (8003150 <HAL_GPIO_Init+0x33c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01f      	beq.n	8003042 <HAL_GPIO_Init+0x22e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a53      	ldr	r2, [pc, #332]	; (8003154 <HAL_GPIO_Init+0x340>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d019      	beq.n	800303e <HAL_GPIO_Init+0x22a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a52      	ldr	r2, [pc, #328]	; (8003158 <HAL_GPIO_Init+0x344>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_GPIO_Init+0x226>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a51      	ldr	r2, [pc, #324]	; (800315c <HAL_GPIO_Init+0x348>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00d      	beq.n	8003036 <HAL_GPIO_Init+0x222>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a50      	ldr	r2, [pc, #320]	; (8003160 <HAL_GPIO_Init+0x34c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <HAL_GPIO_Init+0x21e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a4f      	ldr	r2, [pc, #316]	; (8003164 <HAL_GPIO_Init+0x350>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d101      	bne.n	800302e <HAL_GPIO_Init+0x21a>
 800302a:	2309      	movs	r3, #9
 800302c:	e012      	b.n	8003054 <HAL_GPIO_Init+0x240>
 800302e:	230a      	movs	r3, #10
 8003030:	e010      	b.n	8003054 <HAL_GPIO_Init+0x240>
 8003032:	2308      	movs	r3, #8
 8003034:	e00e      	b.n	8003054 <HAL_GPIO_Init+0x240>
 8003036:	2307      	movs	r3, #7
 8003038:	e00c      	b.n	8003054 <HAL_GPIO_Init+0x240>
 800303a:	2306      	movs	r3, #6
 800303c:	e00a      	b.n	8003054 <HAL_GPIO_Init+0x240>
 800303e:	2305      	movs	r3, #5
 8003040:	e008      	b.n	8003054 <HAL_GPIO_Init+0x240>
 8003042:	2304      	movs	r3, #4
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x240>
 8003046:	2303      	movs	r3, #3
 8003048:	e004      	b.n	8003054 <HAL_GPIO_Init+0x240>
 800304a:	2302      	movs	r3, #2
 800304c:	e002      	b.n	8003054 <HAL_GPIO_Init+0x240>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_GPIO_Init+0x240>
 8003052:	2300      	movs	r3, #0
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f002 0203 	and.w	r2, r2, #3
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	4093      	lsls	r3, r2
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003064:	4935      	ldr	r1, [pc, #212]	; (800313c <HAL_GPIO_Init+0x328>)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	3302      	adds	r3, #2
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003072:	4b3d      	ldr	r3, [pc, #244]	; (8003168 <HAL_GPIO_Init+0x354>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003096:	4a34      	ldr	r2, [pc, #208]	; (8003168 <HAL_GPIO_Init+0x354>)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800309c:	4b32      	ldr	r3, [pc, #200]	; (8003168 <HAL_GPIO_Init+0x354>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030c0:	4a29      	ldr	r2, [pc, #164]	; (8003168 <HAL_GPIO_Init+0x354>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030c6:	4b28      	ldr	r3, [pc, #160]	; (8003168 <HAL_GPIO_Init+0x354>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ea:	4a1f      	ldr	r2, [pc, #124]	; (8003168 <HAL_GPIO_Init+0x354>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030f0:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_GPIO_Init+0x354>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003114:	4a14      	ldr	r2, [pc, #80]	; (8003168 <HAL_GPIO_Init+0x354>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3301      	adds	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	f67f ae84 	bls.w	8002e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3724      	adds	r7, #36	; 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40013800 	.word	0x40013800
 8003140:	40020000 	.word	0x40020000
 8003144:	40020400 	.word	0x40020400
 8003148:	40020800 	.word	0x40020800
 800314c:	40020c00 	.word	0x40020c00
 8003150:	40021000 	.word	0x40021000
 8003154:	40021400 	.word	0x40021400
 8003158:	40021800 	.word	0x40021800
 800315c:	40021c00 	.word	0x40021c00
 8003160:	40022000 	.word	0x40022000
 8003164:	40022400 	.word	0x40022400
 8003168:	40013c00 	.word	0x40013c00

0800316c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e0d9      	b.n	800333c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003188:	2201      	movs	r2, #1
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4013      	ands	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	429a      	cmp	r2, r3
 80031a0:	f040 80c9 	bne.w	8003336 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80031a4:	4a6b      	ldr	r2, [pc, #428]	; (8003354 <HAL_GPIO_DeInit+0x1e8>)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	089b      	lsrs	r3, r3, #2
 80031aa:	3302      	adds	r3, #2
 80031ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	220f      	movs	r2, #15
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	4013      	ands	r3, r2
 80031c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a63      	ldr	r2, [pc, #396]	; (8003358 <HAL_GPIO_DeInit+0x1ec>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d037      	beq.n	800323e <HAL_GPIO_DeInit+0xd2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a62      	ldr	r2, [pc, #392]	; (800335c <HAL_GPIO_DeInit+0x1f0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d031      	beq.n	800323a <HAL_GPIO_DeInit+0xce>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a61      	ldr	r2, [pc, #388]	; (8003360 <HAL_GPIO_DeInit+0x1f4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d02b      	beq.n	8003236 <HAL_GPIO_DeInit+0xca>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a60      	ldr	r2, [pc, #384]	; (8003364 <HAL_GPIO_DeInit+0x1f8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d025      	beq.n	8003232 <HAL_GPIO_DeInit+0xc6>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a5f      	ldr	r2, [pc, #380]	; (8003368 <HAL_GPIO_DeInit+0x1fc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01f      	beq.n	800322e <HAL_GPIO_DeInit+0xc2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a5e      	ldr	r2, [pc, #376]	; (800336c <HAL_GPIO_DeInit+0x200>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d019      	beq.n	800322a <HAL_GPIO_DeInit+0xbe>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a5d      	ldr	r2, [pc, #372]	; (8003370 <HAL_GPIO_DeInit+0x204>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_GPIO_DeInit+0xba>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a5c      	ldr	r2, [pc, #368]	; (8003374 <HAL_GPIO_DeInit+0x208>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00d      	beq.n	8003222 <HAL_GPIO_DeInit+0xb6>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a5b      	ldr	r2, [pc, #364]	; (8003378 <HAL_GPIO_DeInit+0x20c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <HAL_GPIO_DeInit+0xb2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a5a      	ldr	r2, [pc, #360]	; (800337c <HAL_GPIO_DeInit+0x210>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_GPIO_DeInit+0xae>
 8003216:	2309      	movs	r3, #9
 8003218:	e012      	b.n	8003240 <HAL_GPIO_DeInit+0xd4>
 800321a:	230a      	movs	r3, #10
 800321c:	e010      	b.n	8003240 <HAL_GPIO_DeInit+0xd4>
 800321e:	2308      	movs	r3, #8
 8003220:	e00e      	b.n	8003240 <HAL_GPIO_DeInit+0xd4>
 8003222:	2307      	movs	r3, #7
 8003224:	e00c      	b.n	8003240 <HAL_GPIO_DeInit+0xd4>
 8003226:	2306      	movs	r3, #6
 8003228:	e00a      	b.n	8003240 <HAL_GPIO_DeInit+0xd4>
 800322a:	2305      	movs	r3, #5
 800322c:	e008      	b.n	8003240 <HAL_GPIO_DeInit+0xd4>
 800322e:	2304      	movs	r3, #4
 8003230:	e006      	b.n	8003240 <HAL_GPIO_DeInit+0xd4>
 8003232:	2303      	movs	r3, #3
 8003234:	e004      	b.n	8003240 <HAL_GPIO_DeInit+0xd4>
 8003236:	2302      	movs	r3, #2
 8003238:	e002      	b.n	8003240 <HAL_GPIO_DeInit+0xd4>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <HAL_GPIO_DeInit+0xd4>
 800323e:	2300      	movs	r3, #0
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	f002 0203 	and.w	r2, r2, #3
 8003246:	0092      	lsls	r2, r2, #2
 8003248:	4093      	lsls	r3, r2
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	429a      	cmp	r2, r3
 800324e:	d132      	bne.n	80032b6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003250:	4b4b      	ldr	r3, [pc, #300]	; (8003380 <HAL_GPIO_DeInit+0x214>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	43db      	mvns	r3, r3
 8003258:	4949      	ldr	r1, [pc, #292]	; (8003380 <HAL_GPIO_DeInit+0x214>)
 800325a:	4013      	ands	r3, r2
 800325c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800325e:	4b48      	ldr	r3, [pc, #288]	; (8003380 <HAL_GPIO_DeInit+0x214>)
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	43db      	mvns	r3, r3
 8003266:	4946      	ldr	r1, [pc, #280]	; (8003380 <HAL_GPIO_DeInit+0x214>)
 8003268:	4013      	ands	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800326c:	4b44      	ldr	r3, [pc, #272]	; (8003380 <HAL_GPIO_DeInit+0x214>)
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	43db      	mvns	r3, r3
 8003274:	4942      	ldr	r1, [pc, #264]	; (8003380 <HAL_GPIO_DeInit+0x214>)
 8003276:	4013      	ands	r3, r2
 8003278:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800327a:	4b41      	ldr	r3, [pc, #260]	; (8003380 <HAL_GPIO_DeInit+0x214>)
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	43db      	mvns	r3, r3
 8003282:	493f      	ldr	r1, [pc, #252]	; (8003380 <HAL_GPIO_DeInit+0x214>)
 8003284:	4013      	ands	r3, r2
 8003286:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	220f      	movs	r2, #15
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003298:	4a2e      	ldr	r2, [pc, #184]	; (8003354 <HAL_GPIO_DeInit+0x1e8>)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	089b      	lsrs	r3, r3, #2
 800329e:	3302      	adds	r3, #2
 80032a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	43da      	mvns	r2, r3
 80032a8:	482a      	ldr	r0, [pc, #168]	; (8003354 <HAL_GPIO_DeInit+0x1e8>)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	400a      	ands	r2, r1
 80032b0:	3302      	adds	r3, #2
 80032b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2103      	movs	r1, #3
 80032c0:	fa01 f303 	lsl.w	r3, r1, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	401a      	ands	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	08da      	lsrs	r2, r3, #3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3208      	adds	r2, #8
 80032d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	220f      	movs	r2, #15
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	08d2      	lsrs	r2, r2, #3
 80032ec:	4019      	ands	r1, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3208      	adds	r2, #8
 80032f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2103      	movs	r1, #3
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	401a      	ands	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	2101      	movs	r1, #1
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	401a      	ands	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	2103      	movs	r1, #3
 800332a:	fa01 f303 	lsl.w	r3, r1, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	401a      	ands	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	3301      	adds	r3, #1
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2b0f      	cmp	r3, #15
 8003340:	f67f af22 	bls.w	8003188 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40013800 	.word	0x40013800
 8003358:	40020000 	.word	0x40020000
 800335c:	40020400 	.word	0x40020400
 8003360:	40020800 	.word	0x40020800
 8003364:	40020c00 	.word	0x40020c00
 8003368:	40021000 	.word	0x40021000
 800336c:	40021400 	.word	0x40021400
 8003370:	40021800 	.word	0x40021800
 8003374:	40021c00 	.word	0x40021c00
 8003378:	40022000 	.word	0x40022000
 800337c:	40022400 	.word	0x40022400
 8003380:	40013c00 	.word	0x40013c00

08003384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	887b      	ldrh	r3, [r7, #2]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
 80033a0:	e001      	b.n	80033a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	807b      	strh	r3, [r7, #2]
 80033c0:	4613      	mov	r3, r2
 80033c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033c4:	787b      	ldrb	r3, [r7, #1]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ca:	887a      	ldrh	r2, [r7, #2]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033d0:	e003      	b.n	80033da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033d2:	887b      	ldrh	r3, [r7, #2]
 80033d4:	041a      	lsls	r2, r3, #16
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	619a      	str	r2, [r3, #24]
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e12b      	b.n	8003652 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fd fb56 	bl	8000ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2224      	movs	r2, #36	; 0x24
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800343a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800344a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800344c:	f001 f9ea 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 8003450:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4a81      	ldr	r2, [pc, #516]	; (800365c <HAL_I2C_Init+0x274>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d807      	bhi.n	800346c <HAL_I2C_Init+0x84>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4a80      	ldr	r2, [pc, #512]	; (8003660 <HAL_I2C_Init+0x278>)
 8003460:	4293      	cmp	r3, r2
 8003462:	bf94      	ite	ls
 8003464:	2301      	movls	r3, #1
 8003466:	2300      	movhi	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e006      	b.n	800347a <HAL_I2C_Init+0x92>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a7d      	ldr	r2, [pc, #500]	; (8003664 <HAL_I2C_Init+0x27c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	bf94      	ite	ls
 8003474:	2301      	movls	r3, #1
 8003476:	2300      	movhi	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0e7      	b.n	8003652 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a78      	ldr	r2, [pc, #480]	; (8003668 <HAL_I2C_Init+0x280>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	0c9b      	lsrs	r3, r3, #18
 800348c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4a6a      	ldr	r2, [pc, #424]	; (800365c <HAL_I2C_Init+0x274>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d802      	bhi.n	80034bc <HAL_I2C_Init+0xd4>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	3301      	adds	r3, #1
 80034ba:	e009      	b.n	80034d0 <HAL_I2C_Init+0xe8>
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
 80034c6:	4a69      	ldr	r2, [pc, #420]	; (800366c <HAL_I2C_Init+0x284>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	099b      	lsrs	r3, r3, #6
 80034ce:	3301      	adds	r3, #1
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	430b      	orrs	r3, r1
 80034d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	495c      	ldr	r1, [pc, #368]	; (800365c <HAL_I2C_Init+0x274>)
 80034ec:	428b      	cmp	r3, r1
 80034ee:	d819      	bhi.n	8003524 <HAL_I2C_Init+0x13c>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1e59      	subs	r1, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80034fe:	1c59      	adds	r1, r3, #1
 8003500:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003504:	400b      	ands	r3, r1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_I2C_Init+0x138>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1e59      	subs	r1, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	fbb1 f3f3 	udiv	r3, r1, r3
 8003518:	3301      	adds	r3, #1
 800351a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351e:	e051      	b.n	80035c4 <HAL_I2C_Init+0x1dc>
 8003520:	2304      	movs	r3, #4
 8003522:	e04f      	b.n	80035c4 <HAL_I2C_Init+0x1dc>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d111      	bne.n	8003550 <HAL_I2C_Init+0x168>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1e58      	subs	r0, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	440b      	add	r3, r1
 800353a:	fbb0 f3f3 	udiv	r3, r0, r3
 800353e:	3301      	adds	r3, #1
 8003540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e012      	b.n	8003576 <HAL_I2C_Init+0x18e>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e58      	subs	r0, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	0099      	lsls	r1, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	fbb0 f3f3 	udiv	r3, r0, r3
 8003566:	3301      	adds	r3, #1
 8003568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Init+0x196>
 800357a:	2301      	movs	r3, #1
 800357c:	e022      	b.n	80035c4 <HAL_I2C_Init+0x1dc>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10e      	bne.n	80035a4 <HAL_I2C_Init+0x1bc>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1e58      	subs	r0, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	460b      	mov	r3, r1
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	440b      	add	r3, r1
 8003594:	fbb0 f3f3 	udiv	r3, r0, r3
 8003598:	3301      	adds	r3, #1
 800359a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a2:	e00f      	b.n	80035c4 <HAL_I2C_Init+0x1dc>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1e58      	subs	r0, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6859      	ldr	r1, [r3, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	0099      	lsls	r1, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	6809      	ldr	r1, [r1, #0]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69da      	ldr	r2, [r3, #28]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6911      	ldr	r1, [r2, #16]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68d2      	ldr	r2, [r2, #12]
 80035fe:	4311      	orrs	r1, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	430b      	orrs	r3, r1
 8003606:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	000186a0 	.word	0x000186a0
 8003660:	001e847f 	.word	0x001e847f
 8003664:	003d08ff 	.word	0x003d08ff
 8003668:	431bde83 	.word	0x431bde83
 800366c:	10624dd3 	.word	0x10624dd3

08003670 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b20      	cmp	r3, #32
 8003684:	d129      	bne.n	80036da <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2224      	movs	r2, #36	; 0x24
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0201 	bic.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0210 	bic.w	r2, r2, #16
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0201 	orr.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e000      	b.n	80036dc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80036da:	2302      	movs	r3, #2
  }
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d12a      	bne.n	8003758 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2224      	movs	r2, #36	; 0x24
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003722:	89fb      	ldrh	r3, [r7, #14]
 8003724:	f023 030f 	bic.w	r3, r3, #15
 8003728:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	b29a      	uxth	r2, r3
 800372e:	89fb      	ldrh	r3, [r7, #14]
 8003730:	4313      	orrs	r3, r2
 8003732:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	89fa      	ldrh	r2, [r7, #14]
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0bf      	b.n	80038fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fd fafc 	bl	8000d8c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80037aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6999      	ldr	r1, [r3, #24]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6899      	ldr	r1, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	4b4a      	ldr	r3, [pc, #296]	; (8003904 <HAL_LTDC_Init+0x19c>)
 80037dc:	400b      	ands	r3, r1
 80037de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	041b      	lsls	r3, r3, #16
 80037e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6899      	ldr	r1, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68d9      	ldr	r1, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b3e      	ldr	r3, [pc, #248]	; (8003904 <HAL_LTDC_Init+0x19c>)
 800380a:	400b      	ands	r3, r1
 800380c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	041b      	lsls	r3, r3, #16
 8003814:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68d9      	ldr	r1, [r3, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1a      	ldr	r2, [r3, #32]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6919      	ldr	r1, [r3, #16]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b33      	ldr	r3, [pc, #204]	; (8003904 <HAL_LTDC_Init+0x19c>)
 8003838:	400b      	ands	r3, r1
 800383a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6919      	ldr	r1, [r3, #16]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6959      	ldr	r1, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b27      	ldr	r3, [pc, #156]	; (8003904 <HAL_LTDC_Init+0x19c>)
 8003866:	400b      	ands	r3, r1
 8003868:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6959      	ldr	r1, [r3, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80038aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0206 	orr.w	r2, r2, #6
 80038d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	f000f800 	.word	0xf000f800

08003908 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d023      	beq.n	8003972 <HAL_LTDC_IRQHandler+0x6a>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01e      	beq.n	8003972 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0204 	bic.w	r2, r2, #4
 8003942:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2204      	movs	r2, #4
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003952:	f043 0201 	orr.w	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2204      	movs	r2, #4
 8003960:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f86f 	bl	8003a50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d023      	beq.n	80039c4 <HAL_LTDC_IRQHandler+0xbc>
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d01e      	beq.n	80039c4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0202 	bic.w	r2, r2, #2
 8003994:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2202      	movs	r2, #2
 800399c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039a4:	f043 0202 	orr.w	r2, r3, #2
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2204      	movs	r2, #4
 80039b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f846 	bl	8003a50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d01b      	beq.n	8003a06 <HAL_LTDC_IRQHandler+0xfe>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d016      	beq.n	8003a06 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2201      	movs	r2, #1
 80039ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f82f 	bl	8003a64 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01b      	beq.n	8003a48 <HAL_LTDC_IRQHandler+0x140>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d016      	beq.n	8003a48 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0208 	bic.w	r2, r2, #8
 8003a28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2208      	movs	r2, #8
 8003a30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f818 	bl	8003a78 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a8c:	b5b0      	push	{r4, r5, r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_LTDC_ConfigLayer+0x1a>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e02c      	b.n	8003b00 <HAL_LTDC_ConfigLayer+0x74>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2134      	movs	r1, #52	; 0x34
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4614      	mov	r4, r2
 8003aca:	461d      	mov	r5, r3
 8003acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f83b 	bl	8003b5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2201      	movs	r2, #1
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bdb0      	pop	{r4, r5, r7, pc}

08003b08 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_LTDC_EnableDither+0x16>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e016      	b.n	8003b4c <HAL_LTDC_EnableDither+0x44>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <HAL_LTDC_EnableDither+0x50>)
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	4a09      	ldr	r2, [pc, #36]	; (8003b58 <HAL_LTDC_EnableDither+0x50>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b38:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40016800 	.word	0x40016800

08003b5c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b089      	sub	sp, #36	; 0x24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	0c1b      	lsrs	r3, r3, #16
 8003b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b78:	4413      	add	r3, r2
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	01db      	lsls	r3, r3, #7
 8003b88:	4413      	add	r3, r2
 8003b8a:	3384      	adds	r3, #132	; 0x84
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	4611      	mov	r1, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	01d2      	lsls	r2, r2, #7
 8003b98:	440a      	add	r2, r1
 8003b9a:	3284      	adds	r2, #132	; 0x84
 8003b9c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003ba0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	0c1b      	lsrs	r3, r3, #16
 8003bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003bb2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003bb4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	01db      	lsls	r3, r3, #7
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3384      	adds	r3, #132	; 0x84
 8003bc4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003bca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bda:	4413      	add	r3, r2
 8003bdc:	041b      	lsls	r3, r3, #16
 8003bde:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	01db      	lsls	r3, r3, #7
 8003bea:	4413      	add	r3, r2
 8003bec:	3384      	adds	r3, #132	; 0x84
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	01d2      	lsls	r2, r2, #7
 8003bfa:	440a      	add	r2, r1
 8003bfc:	3284      	adds	r2, #132	; 0x84
 8003bfe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003c02:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c12:	4413      	add	r3, r2
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	01db      	lsls	r3, r3, #7
 8003c20:	440b      	add	r3, r1
 8003c22:	3384      	adds	r3, #132	; 0x84
 8003c24:	4619      	mov	r1, r3
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	01db      	lsls	r3, r3, #7
 8003c36:	4413      	add	r3, r2
 8003c38:	3384      	adds	r3, #132	; 0x84
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	4611      	mov	r1, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	01d2      	lsls	r2, r2, #7
 8003c46:	440a      	add	r2, r1
 8003c48:	3284      	adds	r2, #132	; 0x84
 8003c4a:	f023 0307 	bic.w	r3, r3, #7
 8003c4e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	01db      	lsls	r3, r3, #7
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3384      	adds	r3, #132	; 0x84
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c76:	041b      	lsls	r3, r3, #16
 8003c78:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	061b      	lsls	r3, r3, #24
 8003c80:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	01db      	lsls	r3, r3, #7
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3384      	adds	r3, #132	; 0x84
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	01db      	lsls	r3, r3, #7
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3384      	adds	r3, #132	; 0x84
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cac:	461a      	mov	r2, r3
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4619      	mov	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	01db      	lsls	r3, r3, #7
 8003cc0:	440b      	add	r3, r1
 8003cc2:	3384      	adds	r3, #132	; 0x84
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	01db      	lsls	r3, r3, #7
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3384      	adds	r3, #132	; 0x84
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	01d2      	lsls	r2, r2, #7
 8003ce6:	440a      	add	r2, r1
 8003ce8:	3284      	adds	r2, #132	; 0x84
 8003cea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	01db      	lsls	r3, r3, #7
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3384      	adds	r3, #132	; 0x84
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	01db      	lsls	r3, r3, #7
 8003d10:	4413      	add	r3, r2
 8003d12:	3384      	adds	r3, #132	; 0x84
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	01d2      	lsls	r2, r2, #7
 8003d20:	440a      	add	r2, r1
 8003d22:	3284      	adds	r2, #132	; 0x84
 8003d24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d28:	f023 0307 	bic.w	r3, r3, #7
 8003d2c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	68f9      	ldr	r1, [r7, #12]
 8003d38:	6809      	ldr	r1, [r1, #0]
 8003d3a:	4608      	mov	r0, r1
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	01c9      	lsls	r1, r1, #7
 8003d40:	4401      	add	r1, r0
 8003d42:	3184      	adds	r1, #132	; 0x84
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	01db      	lsls	r3, r3, #7
 8003d52:	4413      	add	r3, r2
 8003d54:	3384      	adds	r3, #132	; 0x84
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	01db      	lsls	r3, r3, #7
 8003d62:	4413      	add	r3, r2
 8003d64:	3384      	adds	r3, #132	; 0x84
 8003d66:	461a      	mov	r2, r3
 8003d68:	2300      	movs	r3, #0
 8003d6a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	461a      	mov	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	01db      	lsls	r3, r3, #7
 8003d76:	4413      	add	r3, r2
 8003d78:	3384      	adds	r3, #132	; 0x84
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	61fb      	str	r3, [r7, #28]
 8003d8e:	e01b      	b.n	8003dc8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d102      	bne.n	8003d9e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	e014      	b.n	8003dc8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d00b      	beq.n	8003dbe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d007      	beq.n	8003dbe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d003      	beq.n	8003dbe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003dba:	2b07      	cmp	r3, #7
 8003dbc:	d102      	bne.n	8003dc4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	e001      	b.n	8003dc8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	01db      	lsls	r3, r3, #7
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3384      	adds	r3, #132	; 0x84
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	4611      	mov	r1, r2
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	01d2      	lsls	r2, r2, #7
 8003de2:	440a      	add	r2, r1
 8003de4:	3284      	adds	r2, #132	; 0x84
 8003de6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003dea:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	fb02 f303 	mul.w	r3, r2, r3
 8003df6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	6859      	ldr	r1, [r3, #4]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	1acb      	subs	r3, r1, r3
 8003e02:	69f9      	ldr	r1, [r7, #28]
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003e0a:	68f9      	ldr	r1, [r7, #12]
 8003e0c:	6809      	ldr	r1, [r1, #0]
 8003e0e:	4608      	mov	r0, r1
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	01c9      	lsls	r1, r1, #7
 8003e14:	4401      	add	r1, r0
 8003e16:	3184      	adds	r1, #132	; 0x84
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	01db      	lsls	r3, r3, #7
 8003e26:	4413      	add	r3, r2
 8003e28:	3384      	adds	r3, #132	; 0x84
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	4611      	mov	r1, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	01d2      	lsls	r2, r2, #7
 8003e36:	440a      	add	r2, r1
 8003e38:	3284      	adds	r2, #132	; 0x84
 8003e3a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e3e:	f023 0307 	bic.w	r3, r3, #7
 8003e42:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	01db      	lsls	r3, r3, #7
 8003e4e:	4413      	add	r3, r2
 8003e50:	3384      	adds	r3, #132	; 0x84
 8003e52:	461a      	mov	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	01db      	lsls	r3, r3, #7
 8003e64:	4413      	add	r3, r2
 8003e66:	3384      	adds	r3, #132	; 0x84
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	4611      	mov	r1, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	01d2      	lsls	r2, r2, #7
 8003e74:	440a      	add	r2, r1
 8003e76:	3284      	adds	r2, #132	; 0x84
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6013      	str	r3, [r2, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	3724      	adds	r7, #36	; 0x24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	4b20      	ldr	r3, [pc, #128]	; (8003f1c <HAL_PWREx_EnableOverDrive+0x90>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <HAL_PWREx_EnableOverDrive+0x90>)
 8003ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <HAL_PWREx_EnableOverDrive+0x90>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003eb2:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <HAL_PWREx_EnableOverDrive+0x94>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb8:	f7fe fa20 	bl	80022fc <HAL_GetTick>
 8003ebc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ebe:	e009      	b.n	8003ed4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ec0:	f7fe fa1c 	bl	80022fc <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ece:	d901      	bls.n	8003ed4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e01f      	b.n	8003f14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ed4:	4b13      	ldr	r3, [pc, #76]	; (8003f24 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee0:	d1ee      	bne.n	8003ec0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ee2:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ee8:	f7fe fa08 	bl	80022fc <HAL_GetTick>
 8003eec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003eee:	e009      	b.n	8003f04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ef0:	f7fe fa04 	bl	80022fc <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003efe:	d901      	bls.n	8003f04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e007      	b.n	8003f14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f04:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f10:	d1ee      	bne.n	8003ef0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	420e0040 	.word	0x420e0040
 8003f24:	40007000 	.word	0x40007000
 8003f28:	420e0044 	.word	0x420e0044

08003f2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e267      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d075      	beq.n	8004036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f4a:	4b88      	ldr	r3, [pc, #544]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d00c      	beq.n	8003f70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f56:	4b85      	ldr	r3, [pc, #532]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d112      	bne.n	8003f88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f62:	4b82      	ldr	r3, [pc, #520]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f6e:	d10b      	bne.n	8003f88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f70:	4b7e      	ldr	r3, [pc, #504]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d05b      	beq.n	8004034 <HAL_RCC_OscConfig+0x108>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d157      	bne.n	8004034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e242      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f90:	d106      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x74>
 8003f92:	4b76      	ldr	r3, [pc, #472]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a75      	ldr	r2, [pc, #468]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e01d      	b.n	8003fdc <HAL_RCC_OscConfig+0xb0>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x98>
 8003faa:	4b70      	ldr	r3, [pc, #448]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a6f      	ldr	r2, [pc, #444]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	4b6d      	ldr	r3, [pc, #436]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a6c      	ldr	r2, [pc, #432]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e00b      	b.n	8003fdc <HAL_RCC_OscConfig+0xb0>
 8003fc4:	4b69      	ldr	r3, [pc, #420]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a68      	ldr	r2, [pc, #416]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	4b66      	ldr	r3, [pc, #408]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a65      	ldr	r2, [pc, #404]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d013      	beq.n	800400c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fe f98a 	bl	80022fc <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fec:	f7fe f986 	bl	80022fc <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	; 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e207      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	4b5b      	ldr	r3, [pc, #364]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0xc0>
 800400a:	e014      	b.n	8004036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fe f976 	bl	80022fc <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004014:	f7fe f972 	bl	80022fc <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	; 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e1f3      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004026:	4b51      	ldr	r3, [pc, #324]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0xe8>
 8004032:	e000      	b.n	8004036 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d063      	beq.n	800410a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004042:	4b4a      	ldr	r3, [pc, #296]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800404e:	4b47      	ldr	r3, [pc, #284]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004056:	2b08      	cmp	r3, #8
 8004058:	d11c      	bne.n	8004094 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800405a:	4b44      	ldr	r3, [pc, #272]	; (800416c <HAL_RCC_OscConfig+0x240>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d116      	bne.n	8004094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004066:	4b41      	ldr	r3, [pc, #260]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <HAL_RCC_OscConfig+0x152>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d001      	beq.n	800407e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e1c7      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407e:	4b3b      	ldr	r3, [pc, #236]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4937      	ldr	r1, [pc, #220]	; (800416c <HAL_RCC_OscConfig+0x240>)
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004092:	e03a      	b.n	800410a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d020      	beq.n	80040de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800409c:	4b34      	ldr	r3, [pc, #208]	; (8004170 <HAL_RCC_OscConfig+0x244>)
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a2:	f7fe f92b 	bl	80022fc <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040aa:	f7fe f927 	bl	80022fc <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e1a8      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040bc:	4b2b      	ldr	r3, [pc, #172]	; (800416c <HAL_RCC_OscConfig+0x240>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c8:	4b28      	ldr	r3, [pc, #160]	; (800416c <HAL_RCC_OscConfig+0x240>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4925      	ldr	r1, [pc, #148]	; (800416c <HAL_RCC_OscConfig+0x240>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	600b      	str	r3, [r1, #0]
 80040dc:	e015      	b.n	800410a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCC_OscConfig+0x244>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fe f90a 	bl	80022fc <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ec:	f7fe f906 	bl	80022fc <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e187      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fe:	4b1b      	ldr	r3, [pc, #108]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d036      	beq.n	8004184 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d016      	beq.n	800414c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800411e:	4b15      	ldr	r3, [pc, #84]	; (8004174 <HAL_RCC_OscConfig+0x248>)
 8004120:	2201      	movs	r2, #1
 8004122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004124:	f7fe f8ea 	bl	80022fc <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800412c:	f7fe f8e6 	bl	80022fc <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e167      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413e:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0x200>
 800414a:	e01b      	b.n	8004184 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_OscConfig+0x248>)
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004152:	f7fe f8d3 	bl	80022fc <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004158:	e00e      	b.n	8004178 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800415a:	f7fe f8cf 	bl	80022fc <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d907      	bls.n	8004178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e150      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
 800416c:	40023800 	.word	0x40023800
 8004170:	42470000 	.word	0x42470000
 8004174:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004178:	4b88      	ldr	r3, [pc, #544]	; (800439c <HAL_RCC_OscConfig+0x470>)
 800417a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1ea      	bne.n	800415a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8097 	beq.w	80042c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004192:	2300      	movs	r3, #0
 8004194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004196:	4b81      	ldr	r3, [pc, #516]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10f      	bne.n	80041c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	4b7d      	ldr	r3, [pc, #500]	; (800439c <HAL_RCC_OscConfig+0x470>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	4a7c      	ldr	r2, [pc, #496]	; (800439c <HAL_RCC_OscConfig+0x470>)
 80041ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b0:	6413      	str	r3, [r2, #64]	; 0x40
 80041b2:	4b7a      	ldr	r3, [pc, #488]	; (800439c <HAL_RCC_OscConfig+0x470>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ba:	60bb      	str	r3, [r7, #8]
 80041bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041be:	2301      	movs	r3, #1
 80041c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c2:	4b77      	ldr	r3, [pc, #476]	; (80043a0 <HAL_RCC_OscConfig+0x474>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d118      	bne.n	8004200 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ce:	4b74      	ldr	r3, [pc, #464]	; (80043a0 <HAL_RCC_OscConfig+0x474>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a73      	ldr	r2, [pc, #460]	; (80043a0 <HAL_RCC_OscConfig+0x474>)
 80041d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041da:	f7fe f88f 	bl	80022fc <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e2:	f7fe f88b 	bl	80022fc <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e10c      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f4:	4b6a      	ldr	r3, [pc, #424]	; (80043a0 <HAL_RCC_OscConfig+0x474>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0f0      	beq.n	80041e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d106      	bne.n	8004216 <HAL_RCC_OscConfig+0x2ea>
 8004208:	4b64      	ldr	r3, [pc, #400]	; (800439c <HAL_RCC_OscConfig+0x470>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	4a63      	ldr	r2, [pc, #396]	; (800439c <HAL_RCC_OscConfig+0x470>)
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	6713      	str	r3, [r2, #112]	; 0x70
 8004214:	e01c      	b.n	8004250 <HAL_RCC_OscConfig+0x324>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b05      	cmp	r3, #5
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0x30c>
 800421e:	4b5f      	ldr	r3, [pc, #380]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4a5e      	ldr	r2, [pc, #376]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	6713      	str	r3, [r2, #112]	; 0x70
 800422a:	4b5c      	ldr	r3, [pc, #368]	; (800439c <HAL_RCC_OscConfig+0x470>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a5b      	ldr	r2, [pc, #364]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	6713      	str	r3, [r2, #112]	; 0x70
 8004236:	e00b      	b.n	8004250 <HAL_RCC_OscConfig+0x324>
 8004238:	4b58      	ldr	r3, [pc, #352]	; (800439c <HAL_RCC_OscConfig+0x470>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	4a57      	ldr	r2, [pc, #348]	; (800439c <HAL_RCC_OscConfig+0x470>)
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	6713      	str	r3, [r2, #112]	; 0x70
 8004244:	4b55      	ldr	r3, [pc, #340]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	4a54      	ldr	r2, [pc, #336]	; (800439c <HAL_RCC_OscConfig+0x470>)
 800424a:	f023 0304 	bic.w	r3, r3, #4
 800424e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d015      	beq.n	8004284 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004258:	f7fe f850 	bl	80022fc <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425e:	e00a      	b.n	8004276 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004260:	f7fe f84c 	bl	80022fc <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f241 3288 	movw	r2, #5000	; 0x1388
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e0cb      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004276:	4b49      	ldr	r3, [pc, #292]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0ee      	beq.n	8004260 <HAL_RCC_OscConfig+0x334>
 8004282:	e014      	b.n	80042ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004284:	f7fe f83a 	bl	80022fc <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428c:	f7fe f836 	bl	80022fc <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e0b5      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a2:	4b3e      	ldr	r3, [pc, #248]	; (800439c <HAL_RCC_OscConfig+0x470>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1ee      	bne.n	800428c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d105      	bne.n	80042c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b4:	4b39      	ldr	r3, [pc, #228]	; (800439c <HAL_RCC_OscConfig+0x470>)
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	4a38      	ldr	r2, [pc, #224]	; (800439c <HAL_RCC_OscConfig+0x470>)
 80042ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80a1 	beq.w	800440c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ca:	4b34      	ldr	r3, [pc, #208]	; (800439c <HAL_RCC_OscConfig+0x470>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d05c      	beq.n	8004390 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d141      	bne.n	8004362 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042de:	4b31      	ldr	r3, [pc, #196]	; (80043a4 <HAL_RCC_OscConfig+0x478>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e4:	f7fe f80a 	bl	80022fc <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ec:	f7fe f806 	bl	80022fc <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e087      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fe:	4b27      	ldr	r3, [pc, #156]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	019b      	lsls	r3, r3, #6
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	085b      	lsrs	r3, r3, #1
 8004322:	3b01      	subs	r3, #1
 8004324:	041b      	lsls	r3, r3, #16
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	061b      	lsls	r3, r3, #24
 800432e:	491b      	ldr	r1, [pc, #108]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004330:	4313      	orrs	r3, r2
 8004332:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004334:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCC_OscConfig+0x478>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433a:	f7fd ffdf 	bl	80022fc <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004342:	f7fd ffdb 	bl	80022fc <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e05c      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004354:	4b11      	ldr	r3, [pc, #68]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x416>
 8004360:	e054      	b.n	800440c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004362:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <HAL_RCC_OscConfig+0x478>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fd ffc8 	bl	80022fc <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004370:	f7fd ffc4 	bl	80022fc <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e045      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x444>
 800438e:	e03d      	b.n	800440c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d107      	bne.n	80043a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e038      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
 800439c:	40023800 	.word	0x40023800
 80043a0:	40007000 	.word	0x40007000
 80043a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043a8:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <HAL_RCC_OscConfig+0x4ec>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d028      	beq.n	8004408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d121      	bne.n	8004408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d11a      	bne.n	8004408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043d8:	4013      	ands	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d111      	bne.n	8004408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ee:	085b      	lsrs	r3, r3, #1
 80043f0:	3b01      	subs	r3, #1
 80043f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d107      	bne.n	8004408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800

0800441c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0cc      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004430:	4b68      	ldr	r3, [pc, #416]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 030f 	and.w	r3, r3, #15
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d90c      	bls.n	8004458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443e:	4b65      	ldr	r3, [pc, #404]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004446:	4b63      	ldr	r3, [pc, #396]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d001      	beq.n	8004458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0b8      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d020      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004470:	4b59      	ldr	r3, [pc, #356]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4a58      	ldr	r2, [pc, #352]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800447a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004488:	4b53      	ldr	r3, [pc, #332]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4a52      	ldr	r2, [pc, #328]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004494:	4b50      	ldr	r3, [pc, #320]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	494d      	ldr	r1, [pc, #308]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d044      	beq.n	800453c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d107      	bne.n	80044ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ba:	4b47      	ldr	r3, [pc, #284]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d119      	bne.n	80044fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e07f      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d003      	beq.n	80044da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d107      	bne.n	80044ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044da:	4b3f      	ldr	r3, [pc, #252]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e06f      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ea:	4b3b      	ldr	r3, [pc, #236]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e067      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044fa:	4b37      	ldr	r3, [pc, #220]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f023 0203 	bic.w	r2, r3, #3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	4934      	ldr	r1, [pc, #208]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	4313      	orrs	r3, r2
 800450a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800450c:	f7fd fef6 	bl	80022fc <HAL_GetTick>
 8004510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004512:	e00a      	b.n	800452a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004514:	f7fd fef2 	bl	80022fc <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e04f      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452a:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 020c 	and.w	r2, r3, #12
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	429a      	cmp	r2, r3
 800453a:	d1eb      	bne.n	8004514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800453c:	4b25      	ldr	r3, [pc, #148]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d20c      	bcs.n	8004564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	4b22      	ldr	r3, [pc, #136]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b20      	ldr	r3, [pc, #128]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e032      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d008      	beq.n	8004582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004570:	4b19      	ldr	r3, [pc, #100]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4916      	ldr	r1, [pc, #88]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	4313      	orrs	r3, r2
 8004580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800458e:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	490e      	ldr	r1, [pc, #56]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045a2:	f000 f82d 	bl	8004600 <HAL_RCC_GetSysClockFreq>
 80045a6:	4602      	mov	r2, r0
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	490a      	ldr	r1, [pc, #40]	; (80045dc <HAL_RCC_ClockConfig+0x1c0>)
 80045b4:	5ccb      	ldrb	r3, [r1, r3]
 80045b6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ba:	4a09      	ldr	r2, [pc, #36]	; (80045e0 <HAL_RCC_ClockConfig+0x1c4>)
 80045bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045be:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <HAL_RCC_ClockConfig+0x1c8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fd fe56 	bl	8002274 <HAL_InitTick>

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40023c00 	.word	0x40023c00
 80045d8:	40023800 	.word	0x40023800
 80045dc:	08053de4 	.word	0x08053de4
 80045e0:	2000003c 	.word	0x2000003c
 80045e4:	20000040 	.word	0x20000040

080045e8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80045ec:	4b03      	ldr	r3, [pc, #12]	; (80045fc <HAL_RCC_EnableCSS+0x14>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
}
 80045f2:	bf00      	nop
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	4247004c 	.word	0x4247004c

08004600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004604:	b094      	sub	sp, #80	; 0x50
 8004606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	647b      	str	r3, [r7, #68]	; 0x44
 800460c:	2300      	movs	r3, #0
 800460e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004610:	2300      	movs	r3, #0
 8004612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004618:	4b79      	ldr	r3, [pc, #484]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 030c 	and.w	r3, r3, #12
 8004620:	2b08      	cmp	r3, #8
 8004622:	d00d      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0x40>
 8004624:	2b08      	cmp	r3, #8
 8004626:	f200 80e1 	bhi.w	80047ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_RCC_GetSysClockFreq+0x34>
 800462e:	2b04      	cmp	r3, #4
 8004630:	d003      	beq.n	800463a <HAL_RCC_GetSysClockFreq+0x3a>
 8004632:	e0db      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004634:	4b73      	ldr	r3, [pc, #460]	; (8004804 <HAL_RCC_GetSysClockFreq+0x204>)
 8004636:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004638:	e0db      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800463a:	4b73      	ldr	r3, [pc, #460]	; (8004808 <HAL_RCC_GetSysClockFreq+0x208>)
 800463c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800463e:	e0d8      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004640:	4b6f      	ldr	r3, [pc, #444]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004648:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800464a:	4b6d      	ldr	r3, [pc, #436]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d063      	beq.n	800471e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004656:	4b6a      	ldr	r3, [pc, #424]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	099b      	lsrs	r3, r3, #6
 800465c:	2200      	movs	r2, #0
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004660:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004668:	633b      	str	r3, [r7, #48]	; 0x30
 800466a:	2300      	movs	r3, #0
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
 800466e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004672:	4622      	mov	r2, r4
 8004674:	462b      	mov	r3, r5
 8004676:	f04f 0000 	mov.w	r0, #0
 800467a:	f04f 0100 	mov.w	r1, #0
 800467e:	0159      	lsls	r1, r3, #5
 8004680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004684:	0150      	lsls	r0, r2, #5
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4621      	mov	r1, r4
 800468c:	1a51      	subs	r1, r2, r1
 800468e:	6139      	str	r1, [r7, #16]
 8004690:	4629      	mov	r1, r5
 8004692:	eb63 0301 	sbc.w	r3, r3, r1
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a4:	4659      	mov	r1, fp
 80046a6:	018b      	lsls	r3, r1, #6
 80046a8:	4651      	mov	r1, sl
 80046aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046ae:	4651      	mov	r1, sl
 80046b0:	018a      	lsls	r2, r1, #6
 80046b2:	4651      	mov	r1, sl
 80046b4:	ebb2 0801 	subs.w	r8, r2, r1
 80046b8:	4659      	mov	r1, fp
 80046ba:	eb63 0901 	sbc.w	r9, r3, r1
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046d2:	4690      	mov	r8, r2
 80046d4:	4699      	mov	r9, r3
 80046d6:	4623      	mov	r3, r4
 80046d8:	eb18 0303 	adds.w	r3, r8, r3
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	462b      	mov	r3, r5
 80046e0:	eb49 0303 	adc.w	r3, r9, r3
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046f2:	4629      	mov	r1, r5
 80046f4:	024b      	lsls	r3, r1, #9
 80046f6:	4621      	mov	r1, r4
 80046f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046fc:	4621      	mov	r1, r4
 80046fe:	024a      	lsls	r2, r1, #9
 8004700:	4610      	mov	r0, r2
 8004702:	4619      	mov	r1, r3
 8004704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004706:	2200      	movs	r2, #0
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
 800470a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800470c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004710:	f7fb fdc6 	bl	80002a0 <__aeabi_uldivmod>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4613      	mov	r3, r2
 800471a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471c:	e058      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800471e:	4b38      	ldr	r3, [pc, #224]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	2200      	movs	r2, #0
 8004726:	4618      	mov	r0, r3
 8004728:	4611      	mov	r1, r2
 800472a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800472e:	623b      	str	r3, [r7, #32]
 8004730:	2300      	movs	r3, #0
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
 8004734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004738:	4642      	mov	r2, r8
 800473a:	464b      	mov	r3, r9
 800473c:	f04f 0000 	mov.w	r0, #0
 8004740:	f04f 0100 	mov.w	r1, #0
 8004744:	0159      	lsls	r1, r3, #5
 8004746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800474a:	0150      	lsls	r0, r2, #5
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4641      	mov	r1, r8
 8004752:	ebb2 0a01 	subs.w	sl, r2, r1
 8004756:	4649      	mov	r1, r9
 8004758:	eb63 0b01 	sbc.w	fp, r3, r1
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800476c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004770:	ebb2 040a 	subs.w	r4, r2, sl
 8004774:	eb63 050b 	sbc.w	r5, r3, fp
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	00eb      	lsls	r3, r5, #3
 8004782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004786:	00e2      	lsls	r2, r4, #3
 8004788:	4614      	mov	r4, r2
 800478a:	461d      	mov	r5, r3
 800478c:	4643      	mov	r3, r8
 800478e:	18e3      	adds	r3, r4, r3
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	464b      	mov	r3, r9
 8004794:	eb45 0303 	adc.w	r3, r5, r3
 8004798:	607b      	str	r3, [r7, #4]
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047a6:	4629      	mov	r1, r5
 80047a8:	028b      	lsls	r3, r1, #10
 80047aa:	4621      	mov	r1, r4
 80047ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047b0:	4621      	mov	r1, r4
 80047b2:	028a      	lsls	r2, r1, #10
 80047b4:	4610      	mov	r0, r2
 80047b6:	4619      	mov	r1, r3
 80047b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ba:	2200      	movs	r2, #0
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	61fa      	str	r2, [r7, #28]
 80047c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c4:	f7fb fd6c 	bl	80002a0 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4613      	mov	r3, r2
 80047ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	0c1b      	lsrs	r3, r3, #16
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	3301      	adds	r3, #1
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ea:	e002      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_RCC_GetSysClockFreq+0x204>)
 80047ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3750      	adds	r7, #80	; 0x50
 80047f8:	46bd      	mov	sp, r7
 80047fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800
 8004804:	00f42400 	.word	0x00f42400
 8004808:	007a1200 	.word	0x007a1200

0800480c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004810:	4b03      	ldr	r3, [pc, #12]	; (8004820 <HAL_RCC_GetHCLKFreq+0x14>)
 8004812:	681b      	ldr	r3, [r3, #0]
}
 8004814:	4618      	mov	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	2000003c 	.word	0x2000003c

08004824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004828:	f7ff fff0 	bl	800480c <HAL_RCC_GetHCLKFreq>
 800482c:	4602      	mov	r2, r0
 800482e:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	0a9b      	lsrs	r3, r3, #10
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	4903      	ldr	r1, [pc, #12]	; (8004848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800483a:	5ccb      	ldrb	r3, [r1, r3]
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40023800 	.word	0x40023800
 8004848:	08053df4 	.word	0x08053df4

0800484c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004850:	f7ff ffdc 	bl	800480c <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	0b5b      	lsrs	r3, r3, #13
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4903      	ldr	r1, [pc, #12]	; (8004870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40023800 	.word	0x40023800
 8004870:	08053df4 	.word	0x08053df4

08004874 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004878:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_RCC_NMI_IRQHandler+0x20>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004880:	2b80      	cmp	r3, #128	; 0x80
 8004882:	d104      	bne.n	800488e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004884:	f000 f80a 	bl	800489c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <HAL_RCC_NMI_IRQHandler+0x24>)
 800488a:	2280      	movs	r2, #128	; 0x80
 800488c:	701a      	strb	r2, [r3, #0]
  }
}
 800488e:	bf00      	nop
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800
 8004898:	4002380e 	.word	0x4002380e

0800489c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d105      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d075      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048e0:	4b91      	ldr	r3, [pc, #580]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048e6:	f7fd fd09 	bl	80022fc <HAL_GetTick>
 80048ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048ec:	e008      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048ee:	f7fd fd05 	bl	80022fc <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e189      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004900:	4b8a      	ldr	r3, [pc, #552]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1f0      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d009      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	019a      	lsls	r2, r3, #6
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	071b      	lsls	r3, r3, #28
 8004924:	4981      	ldr	r1, [pc, #516]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01f      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004938:	4b7c      	ldr	r3, [pc, #496]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800493a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800493e:	0f1b      	lsrs	r3, r3, #28
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	019a      	lsls	r2, r3, #6
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	061b      	lsls	r3, r3, #24
 8004952:	431a      	orrs	r2, r3
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	071b      	lsls	r3, r3, #28
 8004958:	4974      	ldr	r1, [pc, #464]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004960:	4b72      	ldr	r3, [pc, #456]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004966:	f023 021f 	bic.w	r2, r3, #31
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	3b01      	subs	r3, #1
 8004970:	496e      	ldr	r1, [pc, #440]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00d      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	019a      	lsls	r2, r3, #6
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	061b      	lsls	r3, r3, #24
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	071b      	lsls	r3, r3, #28
 8004998:	4964      	ldr	r1, [pc, #400]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049a0:	4b61      	ldr	r3, [pc, #388]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049a6:	f7fd fca9 	bl	80022fc <HAL_GetTick>
 80049aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049ac:	e008      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049ae:	f7fd fca5 	bl	80022fc <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e129      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049c0:	4b5a      	ldr	r3, [pc, #360]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d079      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049e4:	4b52      	ldr	r3, [pc, #328]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049ea:	f7fd fc87 	bl	80022fc <HAL_GetTick>
 80049ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049f0:	e008      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80049f2:	f7fd fc83 	bl	80022fc <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e107      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a04:	4b49      	ldr	r3, [pc, #292]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a10:	d0ef      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d020      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a1e:	4b43      	ldr	r3, [pc, #268]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a24:	0f1b      	lsrs	r3, r3, #28
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	019a      	lsls	r2, r3, #6
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	061b      	lsls	r3, r3, #24
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	071b      	lsls	r3, r3, #28
 8004a3e:	493b      	ldr	r1, [pc, #236]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a46:	4b39      	ldr	r3, [pc, #228]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	4934      	ldr	r1, [pc, #208]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01e      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a6c:	4b2f      	ldr	r3, [pc, #188]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a72:	0e1b      	lsrs	r3, r3, #24
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	019a      	lsls	r2, r3, #6
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	061b      	lsls	r3, r3, #24
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	071b      	lsls	r3, r3, #28
 8004a8c:	4927      	ldr	r1, [pc, #156]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a94:	4b25      	ldr	r3, [pc, #148]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	4922      	ldr	r1, [pc, #136]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004aaa:	4b21      	ldr	r3, [pc, #132]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ab0:	f7fd fc24 	bl	80022fc <HAL_GetTick>
 8004ab4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ab8:	f7fd fc20 	bl	80022fc <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e0a4      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aca:	4b18      	ldr	r3, [pc, #96]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ad6:	d1ef      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 808b 	beq.w	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	4a0f      	ldr	r2, [pc, #60]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af4:	6413      	str	r3, [r2, #64]	; 0x40
 8004af6:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b02:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a0b      	ldr	r2, [pc, #44]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b0e:	f7fd fbf5 	bl	80022fc <HAL_GetTick>
 8004b12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b14:	e010      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b16:	f7fd fbf1 	bl	80022fc <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d909      	bls.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e075      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004b28:	42470068 	.word	0x42470068
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	42470070 	.word	0x42470070
 8004b34:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b38:	4b38      	ldr	r3, [pc, #224]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0e8      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b44:	4b36      	ldr	r3, [pc, #216]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d02f      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d028      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b62:	4b2f      	ldr	r3, [pc, #188]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b6c:	4b2d      	ldr	r3, [pc, #180]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b72:	4b2c      	ldr	r3, [pc, #176]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b78:	4a29      	ldr	r2, [pc, #164]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b7e:	4b28      	ldr	r3, [pc, #160]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d114      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b8a:	f7fd fbb7 	bl	80022fc <HAL_GetTick>
 8004b8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b90:	e00a      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b92:	f7fd fbb3 	bl	80022fc <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e035      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0ee      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc0:	d10d      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004bc2:	4b17      	ldr	r3, [pc, #92]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd6:	4912      	ldr	r1, [pc, #72]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	608b      	str	r3, [r1, #8]
 8004bdc:	e005      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004bde:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	4a0f      	ldr	r2, [pc, #60]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004be4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004be8:	6093      	str	r3, [r2, #8]
 8004bea:	4b0d      	ldr	r3, [pc, #52]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf6:	490a      	ldr	r1, [pc, #40]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d004      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004c10:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40007000 	.word	0x40007000
 8004c20:	40023800 	.word	0x40023800
 8004c24:	42470e40 	.word	0x42470e40
 8004c28:	424711e0 	.word	0x424711e0

08004c2c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e066      	b.n	8004d10 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	7f5b      	ldrb	r3, [r3, #29]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d105      	bne.n	8004c58 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fd f88c 	bl	8001d70 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	22ca      	movs	r2, #202	; 0xca
 8004c64:	625a      	str	r2, [r3, #36]	; 0x24
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2253      	movs	r2, #83	; 0x53
 8004c6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fa45 	bl	80050fe <RTC_EnterInitMode>
 8004c74:	4603      	mov	r3, r0
 8004c76:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d12c      	bne.n	8004cd8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c90:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6899      	ldr	r1, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	68d2      	ldr	r2, [r2, #12]
 8004cb8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6919      	ldr	r1, [r3, #16]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	041a      	lsls	r2, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fa4c 	bl	800516c <RTC_ExitInitMode>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d113      	bne.n	8004d06 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	22ff      	movs	r2, #255	; 0xff
 8004d0c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d18:	b590      	push	{r4, r7, lr}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	7f1b      	ldrb	r3, [r3, #28]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_RTC_SetTime+0x1c>
 8004d30:	2302      	movs	r3, #2
 8004d32:	e087      	b.n	8004e44 <HAL_RTC_SetTime+0x12c>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2201      	movs	r2, #1
 8004d38:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d126      	bne.n	8004d94 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d102      	bne.n	8004d5a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2200      	movs	r2, #0
 8004d58:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fa29 	bl	80051b6 <RTC_ByteToBcd2>
 8004d64:	4603      	mov	r3, r0
 8004d66:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	785b      	ldrb	r3, [r3, #1]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fa22 	bl	80051b6 <RTC_ByteToBcd2>
 8004d72:	4603      	mov	r3, r0
 8004d74:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d76:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	789b      	ldrb	r3, [r3, #2]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fa1a 	bl	80051b6 <RTC_ByteToBcd2>
 8004d82:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d84:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	78db      	ldrb	r3, [r3, #3]
 8004d8c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	e018      	b.n	8004dc6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d102      	bne.n	8004da8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2200      	movs	r2, #0
 8004da6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	785b      	ldrb	r3, [r3, #1]
 8004db2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004db4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004dba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	78db      	ldrb	r3, [r3, #3]
 8004dc0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	22ca      	movs	r2, #202	; 0xca
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2253      	movs	r2, #83	; 0x53
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f991 	bl	80050fe <RTC_EnterInitMode>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004de0:	7cfb      	ldrb	r3, [r7, #19]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d120      	bne.n	8004e28 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004df0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004df4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6899      	ldr	r1, [r3, #8]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f9a4 	bl	800516c <RTC_ExitInitMode>
 8004e24:	4603      	mov	r3, r0
 8004e26:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004e28:	7cfb      	ldrb	r3, [r7, #19]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d102      	bne.n	8004e34 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2201      	movs	r2, #1
 8004e32:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	22ff      	movs	r2, #255	; 0xff
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	771a      	strb	r2, [r3, #28]

  return status;
 8004e42:	7cfb      	ldrb	r3, [r7, #19]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd90      	pop	{r4, r7, pc}

08004e4c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004e7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	0c1b      	lsrs	r3, r3, #16
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	0a1b      	lsrs	r3, r3, #8
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	0d9b      	lsrs	r3, r3, #22
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d11a      	bne.n	8004efe <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 f98f 	bl	80051f0 <RTC_Bcd2ToByte>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	785b      	ldrb	r3, [r3, #1]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 f986 	bl	80051f0 <RTC_Bcd2ToByte>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	789b      	ldrb	r3, [r3, #2]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 f97d 	bl	80051f0 <RTC_Bcd2ToByte>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	461a      	mov	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f08:	b590      	push	{r4, r7, lr}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	7f1b      	ldrb	r3, [r3, #28]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_RTC_SetDate+0x1c>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e071      	b.n	8005008 <HAL_RTC_SetDate+0x100>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2201      	movs	r2, #1
 8004f28:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10e      	bne.n	8004f54 <HAL_RTC_SetDate+0x4c>
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	785b      	ldrb	r3, [r3, #1]
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d008      	beq.n	8004f54 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	785b      	ldrb	r3, [r3, #1]
 8004f46:	f023 0310 	bic.w	r3, r3, #16
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	330a      	adds	r3, #10
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d11c      	bne.n	8004f94 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	78db      	ldrb	r3, [r3, #3]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 f929 	bl	80051b6 <RTC_ByteToBcd2>
 8004f64:	4603      	mov	r3, r0
 8004f66:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 f922 	bl	80051b6 <RTC_ByteToBcd2>
 8004f72:	4603      	mov	r3, r0
 8004f74:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f76:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	789b      	ldrb	r3, [r3, #2]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 f91a 	bl	80051b6 <RTC_ByteToBcd2>
 8004f82:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f84:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	e00e      	b.n	8004fb2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	78db      	ldrb	r3, [r3, #3]
 8004f98:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fa0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004fa6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	22ca      	movs	r2, #202	; 0xca
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2253      	movs	r2, #83	; 0x53
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f89b 	bl	80050fe <RTC_EnterInitMode>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004fcc:	7cfb      	ldrb	r3, [r7, #19]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10c      	bne.n	8004fec <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004fdc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004fe0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f8c2 	bl	800516c <RTC_ExitInitMode>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004fec:	7cfb      	ldrb	r3, [r7, #19]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d102      	bne.n	8004ff8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	22ff      	movs	r2, #255	; 0xff
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	771a      	strb	r2, [r3, #28]

  return status;
 8005006:	7cfb      	ldrb	r3, [r7, #19]
}
 8005008:	4618      	mov	r0, r3
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	bd90      	pop	{r4, r7, pc}

08005010 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800502a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800502e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	0c1b      	lsrs	r3, r3, #16
 8005034:	b2da      	uxtb	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	0a1b      	lsrs	r3, r3, #8
 800503e:	b2db      	uxtb	r3, r3
 8005040:	f003 031f 	and.w	r3, r3, #31
 8005044:	b2da      	uxtb	r2, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005052:	b2da      	uxtb	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	0b5b      	lsrs	r3, r3, #13
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	b2da      	uxtb	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d11a      	bne.n	80050a4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	78db      	ldrb	r3, [r3, #3]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 f8bc 	bl	80051f0 <RTC_Bcd2ToByte>
 8005078:	4603      	mov	r3, r0
 800507a:	461a      	mov	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	785b      	ldrb	r3, [r3, #1]
 8005084:	4618      	mov	r0, r3
 8005086:	f000 f8b3 	bl	80051f0 <RTC_Bcd2ToByte>
 800508a:	4603      	mov	r3, r0
 800508c:	461a      	mov	r2, r3
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	789b      	ldrb	r3, [r3, #2]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 f8aa 	bl	80051f0 <RTC_Bcd2ToByte>
 800509c:	4603      	mov	r3, r0
 800509e:	461a      	mov	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050c8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050ca:	f7fd f917 	bl	80022fc <HAL_GetTick>
 80050ce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050d0:	e009      	b.n	80050e6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050d2:	f7fd f913 	bl	80022fc <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050e0:	d901      	bls.n	80050e6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e007      	b.n	80050f6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0ee      	beq.n	80050d2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d122      	bne.n	8005162 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800512a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800512c:	f7fd f8e6 	bl	80022fc <HAL_GetTick>
 8005130:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005132:	e00c      	b.n	800514e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005134:	f7fd f8e2 	bl	80022fc <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005142:	d904      	bls.n	800514e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2204      	movs	r2, #4
 8005148:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	d102      	bne.n	8005162 <RTC_EnterInitMode+0x64>
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d1e8      	bne.n	8005134 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005162:	7bfb      	ldrb	r3, [r7, #15]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005186:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10a      	bne.n	80051ac <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7ff ff89 	bl	80050ae <HAL_RTC_WaitForSynchro>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d004      	beq.n	80051ac <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2204      	movs	r2, #4
 80051a6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	4603      	mov	r3, r0
 80051be:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80051c4:	e005      	b.n	80051d2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	3301      	adds	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	3b0a      	subs	r3, #10
 80051d0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	2b09      	cmp	r3, #9
 80051d6:	d8f6      	bhi.n	80051c6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	b2db      	uxtb	r3, r3
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	b2db      	uxtb	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	0092      	lsls	r2, r2, #2
 8005208:	4413      	add	r3, r2
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	b2da      	uxtb	r2, r3
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	4413      	add	r3, r2
 800521a:	b2db      	uxtb	r3, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e025      	b.n	8005288 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7fb fadb 	bl	800080c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f001 fc85 	bl	8006b78 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	461a      	mov	r2, r3
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	f001 fcda 	bl	8006c32 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80052a2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d101      	bne.n	80052ae <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80052aa:	2302      	movs	r3, #2
 80052ac:	e021      	b.n	80052f2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d002      	beq.n	80052ba <HAL_SDRAM_SendCommand+0x2a>
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
 80052b6:	2b05      	cmp	r3, #5
 80052b8:	d118      	bne.n	80052ec <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2202      	movs	r2, #2
 80052be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f001 fd1a 	bl	8006d04 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d104      	bne.n	80052e2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2205      	movs	r2, #5
 80052dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80052e0:	e006      	b.n	80052f0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80052ea:	e001      	b.n	80052f0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d101      	bne.n	8005314 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005310:	2302      	movs	r3, #2
 8005312:	e016      	b.n	8005342 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b01      	cmp	r3, #1
 800531e:	d10f      	bne.n	8005340 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f001 fd25 	bl	8006d7e <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	e000      	b.n	8005342 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b082      	sub	sp, #8
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e07b      	b.n	8005454 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	d108      	bne.n	8005376 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800536c:	d009      	beq.n	8005382 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	61da      	str	r2, [r3, #28]
 8005374:	e005      	b.n	8005382 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7fc fd47 	bl	8001e30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2202      	movs	r2, #2
 80053a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005406:	ea42 0103 	orr.w	r1, r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	0c1b      	lsrs	r3, r3, #16
 8005420:	f003 0104 	and.w	r1, r3, #4
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	f003 0210 	and.w	r2, r3, #16
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69da      	ldr	r2, [r3, #28]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005442:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e01a      	b.n	80054a4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2202      	movs	r2, #2
 8005472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005484:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fc fd1a 	bl	8001ec0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	4613      	mov	r3, r2
 80054ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <HAL_SPI_Transmit+0x22>
 80054ca:	2302      	movs	r3, #2
 80054cc:	e126      	b.n	800571c <HAL_SPI_Transmit+0x270>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054d6:	f7fc ff11 	bl	80022fc <HAL_GetTick>
 80054da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d002      	beq.n	80054f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054ec:	2302      	movs	r3, #2
 80054ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054f0:	e10b      	b.n	800570a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <HAL_SPI_Transmit+0x52>
 80054f8:	88fb      	ldrh	r3, [r7, #6]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005502:	e102      	b.n	800570a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2203      	movs	r2, #3
 8005508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	88fa      	ldrh	r2, [r7, #6]
 800551c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	88fa      	ldrh	r2, [r7, #6]
 8005522:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554a:	d10f      	bne.n	800556c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800555a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800556a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b40      	cmp	r3, #64	; 0x40
 8005578:	d007      	beq.n	800558a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005588:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005592:	d14b      	bne.n	800562c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <HAL_SPI_Transmit+0xf6>
 800559c:	8afb      	ldrh	r3, [r7, #22]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d13e      	bne.n	8005620 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	881a      	ldrh	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b2:	1c9a      	adds	r2, r3, #2
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055bc:	b29b      	uxth	r3, r3
 80055be:	3b01      	subs	r3, #1
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055c6:	e02b      	b.n	8005620 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d112      	bne.n	80055fc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	881a      	ldrh	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	1c9a      	adds	r2, r3, #2
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80055fa:	e011      	b.n	8005620 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055fc:	f7fc fe7e 	bl	80022fc <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d803      	bhi.n	8005614 <HAL_SPI_Transmit+0x168>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d102      	bne.n	800561a <HAL_SPI_Transmit+0x16e>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d102      	bne.n	8005620 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800561e:	e074      	b.n	800570a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1ce      	bne.n	80055c8 <HAL_SPI_Transmit+0x11c>
 800562a:	e04c      	b.n	80056c6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_SPI_Transmit+0x18e>
 8005634:	8afb      	ldrh	r3, [r7, #22]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d140      	bne.n	80056bc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	330c      	adds	r3, #12
 8005644:	7812      	ldrb	r2, [r2, #0]
 8005646:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005656:	b29b      	uxth	r3, r3
 8005658:	3b01      	subs	r3, #1
 800565a:	b29a      	uxth	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005660:	e02c      	b.n	80056bc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b02      	cmp	r3, #2
 800566e:	d113      	bne.n	8005698 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	7812      	ldrb	r2, [r2, #0]
 800567c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	86da      	strh	r2, [r3, #54]	; 0x36
 8005696:	e011      	b.n	80056bc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005698:	f7fc fe30 	bl	80022fc <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d803      	bhi.n	80056b0 <HAL_SPI_Transmit+0x204>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d102      	bne.n	80056b6 <HAL_SPI_Transmit+0x20a>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d102      	bne.n	80056bc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056ba:	e026      	b.n	800570a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1cd      	bne.n	8005662 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	6839      	ldr	r1, [r7, #0]
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 fbda 	bl	8005e84 <SPI_EndRxTxTransaction>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2220      	movs	r2, #32
 80056da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056e4:	2300      	movs	r3, #0
 80056e6:	613b      	str	r3, [r7, #16]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	77fb      	strb	r3, [r7, #31]
 8005706:	e000      	b.n	800570a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005708:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800571a:	7ffb      	ldrb	r3, [r7, #31]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af02      	add	r7, sp, #8
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	4613      	mov	r3, r2
 8005732:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005740:	d112      	bne.n	8005768 <HAL_SPI_Receive+0x44>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10e      	bne.n	8005768 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2204      	movs	r2, #4
 800574e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005752:	88fa      	ldrh	r2, [r7, #6]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	4613      	mov	r3, r2
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f8f1 	bl	8005946 <HAL_SPI_TransmitReceive>
 8005764:	4603      	mov	r3, r0
 8005766:	e0ea      	b.n	800593e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_SPI_Receive+0x52>
 8005772:	2302      	movs	r3, #2
 8005774:	e0e3      	b.n	800593e <HAL_SPI_Receive+0x21a>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800577e:	f7fc fdbd 	bl	80022fc <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	d002      	beq.n	8005796 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005790:	2302      	movs	r3, #2
 8005792:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005794:	e0ca      	b.n	800592c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <HAL_SPI_Receive+0x7e>
 800579c:	88fb      	ldrh	r3, [r7, #6]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d102      	bne.n	80057a8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057a6:	e0c1      	b.n	800592c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2204      	movs	r2, #4
 80057ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	88fa      	ldrh	r2, [r7, #6]
 80057c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	88fa      	ldrh	r2, [r7, #6]
 80057c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ee:	d10f      	bne.n	8005810 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800580e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b40      	cmp	r3, #64	; 0x40
 800581c:	d007      	beq.n	800582e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800582c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d162      	bne.n	80058fc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005836:	e02e      	b.n	8005896 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b01      	cmp	r3, #1
 8005844:	d115      	bne.n	8005872 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f103 020c 	add.w	r2, r3, #12
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	7812      	ldrb	r2, [r2, #0]
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005870:	e011      	b.n	8005896 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005872:	f7fc fd43 	bl	80022fc <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d803      	bhi.n	800588a <HAL_SPI_Receive+0x166>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005888:	d102      	bne.n	8005890 <HAL_SPI_Receive+0x16c>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d102      	bne.n	8005896 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005894:	e04a      	b.n	800592c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1cb      	bne.n	8005838 <HAL_SPI_Receive+0x114>
 80058a0:	e031      	b.n	8005906 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d113      	bne.n	80058d8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	b292      	uxth	r2, r2
 80058bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	1c9a      	adds	r2, r3, #2
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058d6:	e011      	b.n	80058fc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058d8:	f7fc fd10 	bl	80022fc <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d803      	bhi.n	80058f0 <HAL_SPI_Receive+0x1cc>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d102      	bne.n	80058f6 <HAL_SPI_Receive+0x1d2>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058fa:	e017      	b.n	800592c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1cd      	bne.n	80058a2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	6839      	ldr	r1, [r7, #0]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 fa54 	bl	8005db8 <SPI_EndRxTransaction>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2220      	movs	r2, #32
 800591a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	75fb      	strb	r3, [r7, #23]
 8005928:	e000      	b.n	800592c <HAL_SPI_Receive+0x208>
  }

error :
 800592a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800593c:	7dfb      	ldrb	r3, [r7, #23]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b08c      	sub	sp, #48	; 0x30
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
 8005952:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005954:	2301      	movs	r3, #1
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_SPI_TransmitReceive+0x26>
 8005968:	2302      	movs	r3, #2
 800596a:	e18a      	b.n	8005c82 <HAL_SPI_TransmitReceive+0x33c>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005974:	f7fc fcc2 	bl	80022fc <HAL_GetTick>
 8005978:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800598a:	887b      	ldrh	r3, [r7, #2]
 800598c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800598e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005992:	2b01      	cmp	r3, #1
 8005994:	d00f      	beq.n	80059b6 <HAL_SPI_TransmitReceive+0x70>
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800599c:	d107      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d103      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x68>
 80059a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d003      	beq.n	80059b6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80059ae:	2302      	movs	r3, #2
 80059b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059b4:	e15b      	b.n	8005c6e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <HAL_SPI_TransmitReceive+0x82>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_SPI_TransmitReceive+0x82>
 80059c2:	887b      	ldrh	r3, [r7, #2]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d103      	bne.n	80059d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059ce:	e14e      	b.n	8005c6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d003      	beq.n	80059e4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2205      	movs	r2, #5
 80059e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	887a      	ldrh	r2, [r7, #2]
 80059f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	887a      	ldrh	r2, [r7, #2]
 80059fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	887a      	ldrh	r2, [r7, #2]
 8005a06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	887a      	ldrh	r2, [r7, #2]
 8005a0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a24:	2b40      	cmp	r3, #64	; 0x40
 8005a26:	d007      	beq.n	8005a38 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a40:	d178      	bne.n	8005b34 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <HAL_SPI_TransmitReceive+0x10a>
 8005a4a:	8b7b      	ldrh	r3, [r7, #26]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d166      	bne.n	8005b1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a54:	881a      	ldrh	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a60:	1c9a      	adds	r2, r3, #2
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a74:	e053      	b.n	8005b1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d11b      	bne.n	8005abc <HAL_SPI_TransmitReceive+0x176>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d016      	beq.n	8005abc <HAL_SPI_TransmitReceive+0x176>
 8005a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d113      	bne.n	8005abc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	881a      	ldrh	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa4:	1c9a      	adds	r2, r3, #2
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d119      	bne.n	8005afe <HAL_SPI_TransmitReceive+0x1b8>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d014      	beq.n	8005afe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	b292      	uxth	r2, r2
 8005ae0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	1c9a      	adds	r2, r3, #2
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005afa:	2301      	movs	r3, #1
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005afe:	f7fc fbfd 	bl	80022fc <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d807      	bhi.n	8005b1e <HAL_SPI_TransmitReceive+0x1d8>
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b14:	d003      	beq.n	8005b1e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b1c:	e0a7      	b.n	8005c6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1a6      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x130>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1a1      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x130>
 8005b32:	e07c      	b.n	8005c2e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <HAL_SPI_TransmitReceive+0x1fc>
 8005b3c:	8b7b      	ldrh	r3, [r7, #26]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d16b      	bne.n	8005c1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	330c      	adds	r3, #12
 8005b4c:	7812      	ldrb	r2, [r2, #0]
 8005b4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b68:	e057      	b.n	8005c1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d11c      	bne.n	8005bb2 <HAL_SPI_TransmitReceive+0x26c>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d017      	beq.n	8005bb2 <HAL_SPI_TransmitReceive+0x26c>
 8005b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d114      	bne.n	8005bb2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	7812      	ldrb	r2, [r2, #0]
 8005b94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d119      	bne.n	8005bf4 <HAL_SPI_TransmitReceive+0x2ae>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d014      	beq.n	8005bf4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bf4:	f7fc fb82 	bl	80022fc <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d803      	bhi.n	8005c0c <HAL_SPI_TransmitReceive+0x2c6>
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d102      	bne.n	8005c12 <HAL_SPI_TransmitReceive+0x2cc>
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d103      	bne.n	8005c1a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c18:	e029      	b.n	8005c6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1a2      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x224>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d19d      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f926 	bl	8005e84 <SPI_EndRxTxTransaction>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d006      	beq.n	8005c4c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c4a:	e010      	b.n	8005c6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10b      	bne.n	8005c6c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c54:	2300      	movs	r3, #0
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	e000      	b.n	8005c6e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3730      	adds	r7, #48	; 0x30
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c98:	b2db      	uxtb	r3, r3
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cb8:	f7fc fb20 	bl	80022fc <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cc8:	f7fc fb18 	bl	80022fc <HAL_GetTick>
 8005ccc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cce:	4b39      	ldr	r3, [pc, #228]	; (8005db4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	015b      	lsls	r3, r3, #5
 8005cd4:	0d1b      	lsrs	r3, r3, #20
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	fb02 f303 	mul.w	r3, r2, r3
 8005cdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cde:	e054      	b.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d050      	beq.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ce8:	f7fc fb08 	bl	80022fc <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d902      	bls.n	8005cfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d13d      	bne.n	8005d7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d16:	d111      	bne.n	8005d3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d20:	d004      	beq.n	8005d2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2a:	d107      	bne.n	8005d3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d44:	d10f      	bne.n	8005d66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e017      	b.n	8005daa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4013      	ands	r3, r2
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	bf0c      	ite	eq
 8005d9a:	2301      	moveq	r3, #1
 8005d9c:	2300      	movne	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d19b      	bne.n	8005ce0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	2000003c 	.word	0x2000003c

08005db8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dcc:	d111      	bne.n	8005df2 <SPI_EndRxTransaction+0x3a>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd6:	d004      	beq.n	8005de2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de0:	d107      	bne.n	8005df2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005df0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dfa:	d12a      	bne.n	8005e52 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e04:	d012      	beq.n	8005e2c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2180      	movs	r1, #128	; 0x80
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7ff ff49 	bl	8005ca8 <SPI_WaitFlagStateUntilTimeout>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d02d      	beq.n	8005e78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e20:	f043 0220 	orr.w	r2, r3, #32
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e026      	b.n	8005e7a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2200      	movs	r2, #0
 8005e34:	2101      	movs	r1, #1
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f7ff ff36 	bl	8005ca8 <SPI_WaitFlagStateUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d01a      	beq.n	8005e78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e46:	f043 0220 	orr.w	r2, r3, #32
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e013      	b.n	8005e7a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7ff ff23 	bl	8005ca8 <SPI_WaitFlagStateUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d007      	beq.n	8005e78 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6c:	f043 0220 	orr.w	r2, r3, #32
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e000      	b.n	8005e7a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e90:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <SPI_EndRxTxTransaction+0x7c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1b      	ldr	r2, [pc, #108]	; (8005f04 <SPI_EndRxTxTransaction+0x80>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	0d5b      	lsrs	r3, r3, #21
 8005e9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ea0:	fb02 f303 	mul.w	r3, r2, r3
 8005ea4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eae:	d112      	bne.n	8005ed6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2180      	movs	r1, #128	; 0x80
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f7ff fef4 	bl	8005ca8 <SPI_WaitFlagStateUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d016      	beq.n	8005ef4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eca:	f043 0220 	orr.w	r2, r3, #32
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e00f      	b.n	8005ef6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eec:	2b80      	cmp	r3, #128	; 0x80
 8005eee:	d0f2      	beq.n	8005ed6 <SPI_EndRxTxTransaction+0x52>
 8005ef0:	e000      	b.n	8005ef4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ef2:	bf00      	nop
  }

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	2000003c 	.word	0x2000003c
 8005f04:	165e9f81 	.word	0x165e9f81

08005f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e041      	b.n	8005f9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fc f8c0 	bl	80020b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3304      	adds	r3, #4
 8005f44:	4619      	mov	r1, r3
 8005f46:	4610      	mov	r0, r2
 8005f48:	f000 f896 	bl	8006078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d001      	beq.n	8005fc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e046      	b.n	800604e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a23      	ldr	r2, [pc, #140]	; (800605c <HAL_TIM_Base_Start+0xb4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d022      	beq.n	8006018 <HAL_TIM_Base_Start+0x70>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fda:	d01d      	beq.n	8006018 <HAL_TIM_Base_Start+0x70>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1f      	ldr	r2, [pc, #124]	; (8006060 <HAL_TIM_Base_Start+0xb8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d018      	beq.n	8006018 <HAL_TIM_Base_Start+0x70>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a1e      	ldr	r2, [pc, #120]	; (8006064 <HAL_TIM_Base_Start+0xbc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d013      	beq.n	8006018 <HAL_TIM_Base_Start+0x70>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a1c      	ldr	r2, [pc, #112]	; (8006068 <HAL_TIM_Base_Start+0xc0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00e      	beq.n	8006018 <HAL_TIM_Base_Start+0x70>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1b      	ldr	r2, [pc, #108]	; (800606c <HAL_TIM_Base_Start+0xc4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d009      	beq.n	8006018 <HAL_TIM_Base_Start+0x70>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a19      	ldr	r2, [pc, #100]	; (8006070 <HAL_TIM_Base_Start+0xc8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d004      	beq.n	8006018 <HAL_TIM_Base_Start+0x70>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a18      	ldr	r2, [pc, #96]	; (8006074 <HAL_TIM_Base_Start+0xcc>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d111      	bne.n	800603c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b06      	cmp	r3, #6
 8006028:	d010      	beq.n	800604c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f042 0201 	orr.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603a:	e007      	b.n	800604c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0201 	orr.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40010000 	.word	0x40010000
 8006060:	40000400 	.word	0x40000400
 8006064:	40000800 	.word	0x40000800
 8006068:	40000c00 	.word	0x40000c00
 800606c:	40010400 	.word	0x40010400
 8006070:	40014000 	.word	0x40014000
 8006074:	40001800 	.word	0x40001800

08006078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a40      	ldr	r2, [pc, #256]	; (800618c <TIM_Base_SetConfig+0x114>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d013      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006096:	d00f      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a3d      	ldr	r2, [pc, #244]	; (8006190 <TIM_Base_SetConfig+0x118>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00b      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a3c      	ldr	r2, [pc, #240]	; (8006194 <TIM_Base_SetConfig+0x11c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d007      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a3b      	ldr	r2, [pc, #236]	; (8006198 <TIM_Base_SetConfig+0x120>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d003      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a3a      	ldr	r2, [pc, #232]	; (800619c <TIM_Base_SetConfig+0x124>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d108      	bne.n	80060ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2f      	ldr	r2, [pc, #188]	; (800618c <TIM_Base_SetConfig+0x114>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d02b      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d8:	d027      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2c      	ldr	r2, [pc, #176]	; (8006190 <TIM_Base_SetConfig+0x118>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d023      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a2b      	ldr	r2, [pc, #172]	; (8006194 <TIM_Base_SetConfig+0x11c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d01f      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a2a      	ldr	r2, [pc, #168]	; (8006198 <TIM_Base_SetConfig+0x120>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01b      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a29      	ldr	r2, [pc, #164]	; (800619c <TIM_Base_SetConfig+0x124>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d017      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <TIM_Base_SetConfig+0x128>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d013      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a27      	ldr	r2, [pc, #156]	; (80061a4 <TIM_Base_SetConfig+0x12c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00f      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a26      	ldr	r2, [pc, #152]	; (80061a8 <TIM_Base_SetConfig+0x130>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00b      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a25      	ldr	r2, [pc, #148]	; (80061ac <TIM_Base_SetConfig+0x134>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d007      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a24      	ldr	r2, [pc, #144]	; (80061b0 <TIM_Base_SetConfig+0x138>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d003      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a23      	ldr	r2, [pc, #140]	; (80061b4 <TIM_Base_SetConfig+0x13c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d108      	bne.n	800613c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a0a      	ldr	r2, [pc, #40]	; (800618c <TIM_Base_SetConfig+0x114>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d003      	beq.n	8006170 <TIM_Base_SetConfig+0xf8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a0c      	ldr	r2, [pc, #48]	; (800619c <TIM_Base_SetConfig+0x124>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d103      	bne.n	8006178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	615a      	str	r2, [r3, #20]
}
 800617e:	bf00      	nop
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40010000 	.word	0x40010000
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800
 8006198:	40000c00 	.word	0x40000c00
 800619c:	40010400 	.word	0x40010400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40014400 	.word	0x40014400
 80061a8:	40014800 	.word	0x40014800
 80061ac:	40001800 	.word	0x40001800
 80061b0:	40001c00 	.word	0x40001c00
 80061b4:	40002000 	.word	0x40002000

080061b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e05a      	b.n	8006286 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a21      	ldr	r2, [pc, #132]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d022      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621c:	d01d      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1d      	ldr	r2, [pc, #116]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d018      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1b      	ldr	r2, [pc, #108]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d013      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1a      	ldr	r2, [pc, #104]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00e      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a18      	ldr	r2, [pc, #96]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d009      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a17      	ldr	r2, [pc, #92]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d004      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a15      	ldr	r2, [pc, #84]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d10c      	bne.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	4313      	orrs	r3, r2
 800626a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40010000 	.word	0x40010000
 8006298:	40000400 	.word	0x40000400
 800629c:	40000800 	.word	0x40000800
 80062a0:	40000c00 	.word	0x40000c00
 80062a4:	40010400 	.word	0x40010400
 80062a8:	40014000 	.word	0x40014000
 80062ac:	40001800 	.word	0x40001800

080062b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e03f      	b.n	8006342 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7fb ff38 	bl	800214c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2224      	movs	r2, #36	; 0x24
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f9cb 	bl	8006690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695a      	ldr	r2, [r3, #20]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006318:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68da      	ldr	r2, [r3, #12]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006328:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b08a      	sub	sp, #40	; 0x28
 800634e:	af02      	add	r7, sp, #8
 8006350:	60f8      	str	r0, [r7, #12]
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	603b      	str	r3, [r7, #0]
 8006356:	4613      	mov	r3, r2
 8006358:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b20      	cmp	r3, #32
 8006368:	d17c      	bne.n	8006464 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <HAL_UART_Transmit+0x2c>
 8006370:	88fb      	ldrh	r3, [r7, #6]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e075      	b.n	8006466 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_UART_Transmit+0x3e>
 8006384:	2302      	movs	r3, #2
 8006386:	e06e      	b.n	8006466 <HAL_UART_Transmit+0x11c>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2221      	movs	r2, #33	; 0x21
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800639e:	f7fb ffad 	bl	80022fc <HAL_GetTick>
 80063a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	88fa      	ldrh	r2, [r7, #6]
 80063a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	88fa      	ldrh	r2, [r7, #6]
 80063ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b8:	d108      	bne.n	80063cc <HAL_UART_Transmit+0x82>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d104      	bne.n	80063cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	e003      	b.n	80063d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063d0:	2300      	movs	r3, #0
 80063d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063dc:	e02a      	b.n	8006434 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2200      	movs	r2, #0
 80063e6:	2180      	movs	r1, #128	; 0x80
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 f8e2 	bl	80065b2 <UART_WaitOnFlagUntilTimeout>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e036      	b.n	8006466 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10b      	bne.n	8006416 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800640c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	3302      	adds	r3, #2
 8006412:	61bb      	str	r3, [r7, #24]
 8006414:	e007      	b.n	8006426 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	781a      	ldrb	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	3301      	adds	r3, #1
 8006424:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1cf      	bne.n	80063de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2200      	movs	r2, #0
 8006446:	2140      	movs	r1, #64	; 0x40
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f8b2 	bl	80065b2 <UART_WaitOnFlagUntilTimeout>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e006      	b.n	8006466 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	e000      	b.n	8006466 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006464:	2302      	movs	r3, #2
  }
}
 8006466:	4618      	mov	r0, r3
 8006468:	3720      	adds	r7, #32
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b08a      	sub	sp, #40	; 0x28
 8006472:	af02      	add	r7, sp, #8
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	603b      	str	r3, [r7, #0]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b20      	cmp	r3, #32
 800648c:	f040 808c 	bne.w	80065a8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <HAL_UART_Receive+0x2e>
 8006496:	88fb      	ldrh	r3, [r7, #6]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e084      	b.n	80065aa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d101      	bne.n	80064ae <HAL_UART_Receive+0x40>
 80064aa:	2302      	movs	r3, #2
 80064ac:	e07d      	b.n	80065aa <HAL_UART_Receive+0x13c>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2222      	movs	r2, #34	; 0x22
 80064c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ca:	f7fb ff17 	bl	80022fc <HAL_GetTick>
 80064ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	88fa      	ldrh	r2, [r7, #6]
 80064d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	88fa      	ldrh	r2, [r7, #6]
 80064da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e4:	d108      	bne.n	80064f8 <HAL_UART_Receive+0x8a>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d104      	bne.n	80064f8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	e003      	b.n	8006500 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006508:	e043      	b.n	8006592 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2200      	movs	r2, #0
 8006512:	2120      	movs	r1, #32
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 f84c 	bl	80065b2 <UART_WaitOnFlagUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e042      	b.n	80065aa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10c      	bne.n	8006544 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006536:	b29a      	uxth	r2, r3
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	3302      	adds	r3, #2
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	e01f      	b.n	8006584 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800654c:	d007      	beq.n	800655e <HAL_UART_Receive+0xf0>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <HAL_UART_Receive+0xfe>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d106      	bne.n	800656c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	b2da      	uxtb	r2, r3
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	e008      	b.n	800657e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006578:	b2da      	uxtb	r2, r3
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	3301      	adds	r3, #1
 8006582:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006596:	b29b      	uxth	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1b6      	bne.n	800650a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	e000      	b.n	80065aa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80065a8:	2302      	movs	r3, #2
  }
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3720      	adds	r7, #32
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b090      	sub	sp, #64	; 0x40
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	603b      	str	r3, [r7, #0]
 80065be:	4613      	mov	r3, r2
 80065c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c2:	e050      	b.n	8006666 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d04c      	beq.n	8006666 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80065d2:	f7fb fe93 	bl	80022fc <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065de:	429a      	cmp	r2, r3
 80065e0:	d241      	bcs.n	8006666 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	330c      	adds	r3, #12
 80065e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	330c      	adds	r3, #12
 8006600:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006602:	637a      	str	r2, [r7, #52]	; 0x34
 8006604:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e5      	bne.n	80065e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3314      	adds	r3, #20
 800661c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	613b      	str	r3, [r7, #16]
   return(result);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f023 0301 	bic.w	r3, r3, #1
 800662c:	63bb      	str	r3, [r7, #56]	; 0x38
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3314      	adds	r3, #20
 8006634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006636:	623a      	str	r2, [r7, #32]
 8006638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	69f9      	ldr	r1, [r7, #28]
 800663c:	6a3a      	ldr	r2, [r7, #32]
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	61bb      	str	r3, [r7, #24]
   return(result);
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e5      	bne.n	8006616 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2220      	movs	r2, #32
 800664e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e00f      	b.n	8006686 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	4013      	ands	r3, r2
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	429a      	cmp	r2, r3
 8006674:	bf0c      	ite	eq
 8006676:	2301      	moveq	r3, #1
 8006678:	2300      	movne	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	429a      	cmp	r2, r3
 8006682:	d09f      	beq.n	80065c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3740      	adds	r7, #64	; 0x40
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006694:	b0c0      	sub	sp, #256	; 0x100
 8006696:	af00      	add	r7, sp, #0
 8006698:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	68d9      	ldr	r1, [r3, #12]
 80066ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	ea40 0301 	orr.w	r3, r0, r1
 80066b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066e8:	f021 010c 	bic.w	r1, r1, #12
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066f6:	430b      	orrs	r3, r1
 80066f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670a:	6999      	ldr	r1, [r3, #24]
 800670c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	ea40 0301 	orr.w	r3, r0, r1
 8006716:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	4b8f      	ldr	r3, [pc, #572]	; (800695c <UART_SetConfig+0x2cc>)
 8006720:	429a      	cmp	r2, r3
 8006722:	d005      	beq.n	8006730 <UART_SetConfig+0xa0>
 8006724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b8d      	ldr	r3, [pc, #564]	; (8006960 <UART_SetConfig+0x2d0>)
 800672c:	429a      	cmp	r2, r3
 800672e:	d104      	bne.n	800673a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006730:	f7fe f88c 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 8006734:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006738:	e003      	b.n	8006742 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800673a:	f7fe f873 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 800673e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800674c:	f040 810c 	bne.w	8006968 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006754:	2200      	movs	r2, #0
 8006756:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800675a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800675e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006762:	4622      	mov	r2, r4
 8006764:	462b      	mov	r3, r5
 8006766:	1891      	adds	r1, r2, r2
 8006768:	65b9      	str	r1, [r7, #88]	; 0x58
 800676a:	415b      	adcs	r3, r3
 800676c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800676e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006772:	4621      	mov	r1, r4
 8006774:	eb12 0801 	adds.w	r8, r2, r1
 8006778:	4629      	mov	r1, r5
 800677a:	eb43 0901 	adc.w	r9, r3, r1
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	f04f 0300 	mov.w	r3, #0
 8006786:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800678a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800678e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006792:	4690      	mov	r8, r2
 8006794:	4699      	mov	r9, r3
 8006796:	4623      	mov	r3, r4
 8006798:	eb18 0303 	adds.w	r3, r8, r3
 800679c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067a0:	462b      	mov	r3, r5
 80067a2:	eb49 0303 	adc.w	r3, r9, r3
 80067a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067be:	460b      	mov	r3, r1
 80067c0:	18db      	adds	r3, r3, r3
 80067c2:	653b      	str	r3, [r7, #80]	; 0x50
 80067c4:	4613      	mov	r3, r2
 80067c6:	eb42 0303 	adc.w	r3, r2, r3
 80067ca:	657b      	str	r3, [r7, #84]	; 0x54
 80067cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067d4:	f7f9 fd64 	bl	80002a0 <__aeabi_uldivmod>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4b61      	ldr	r3, [pc, #388]	; (8006964 <UART_SetConfig+0x2d4>)
 80067de:	fba3 2302 	umull	r2, r3, r3, r2
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	011c      	lsls	r4, r3, #4
 80067e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067f8:	4642      	mov	r2, r8
 80067fa:	464b      	mov	r3, r9
 80067fc:	1891      	adds	r1, r2, r2
 80067fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8006800:	415b      	adcs	r3, r3
 8006802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006804:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006808:	4641      	mov	r1, r8
 800680a:	eb12 0a01 	adds.w	sl, r2, r1
 800680e:	4649      	mov	r1, r9
 8006810:	eb43 0b01 	adc.w	fp, r3, r1
 8006814:	f04f 0200 	mov.w	r2, #0
 8006818:	f04f 0300 	mov.w	r3, #0
 800681c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006820:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006824:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006828:	4692      	mov	sl, r2
 800682a:	469b      	mov	fp, r3
 800682c:	4643      	mov	r3, r8
 800682e:	eb1a 0303 	adds.w	r3, sl, r3
 8006832:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006836:	464b      	mov	r3, r9
 8006838:	eb4b 0303 	adc.w	r3, fp, r3
 800683c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800684c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006850:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006854:	460b      	mov	r3, r1
 8006856:	18db      	adds	r3, r3, r3
 8006858:	643b      	str	r3, [r7, #64]	; 0x40
 800685a:	4613      	mov	r3, r2
 800685c:	eb42 0303 	adc.w	r3, r2, r3
 8006860:	647b      	str	r3, [r7, #68]	; 0x44
 8006862:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006866:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800686a:	f7f9 fd19 	bl	80002a0 <__aeabi_uldivmod>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4611      	mov	r1, r2
 8006874:	4b3b      	ldr	r3, [pc, #236]	; (8006964 <UART_SetConfig+0x2d4>)
 8006876:	fba3 2301 	umull	r2, r3, r3, r1
 800687a:	095b      	lsrs	r3, r3, #5
 800687c:	2264      	movs	r2, #100	; 0x64
 800687e:	fb02 f303 	mul.w	r3, r2, r3
 8006882:	1acb      	subs	r3, r1, r3
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800688a:	4b36      	ldr	r3, [pc, #216]	; (8006964 <UART_SetConfig+0x2d4>)
 800688c:	fba3 2302 	umull	r2, r3, r3, r2
 8006890:	095b      	lsrs	r3, r3, #5
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006898:	441c      	add	r4, r3
 800689a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800689e:	2200      	movs	r2, #0
 80068a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068ac:	4642      	mov	r2, r8
 80068ae:	464b      	mov	r3, r9
 80068b0:	1891      	adds	r1, r2, r2
 80068b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80068b4:	415b      	adcs	r3, r3
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068bc:	4641      	mov	r1, r8
 80068be:	1851      	adds	r1, r2, r1
 80068c0:	6339      	str	r1, [r7, #48]	; 0x30
 80068c2:	4649      	mov	r1, r9
 80068c4:	414b      	adcs	r3, r1
 80068c6:	637b      	str	r3, [r7, #52]	; 0x34
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	f04f 0300 	mov.w	r3, #0
 80068d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068d4:	4659      	mov	r1, fp
 80068d6:	00cb      	lsls	r3, r1, #3
 80068d8:	4651      	mov	r1, sl
 80068da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068de:	4651      	mov	r1, sl
 80068e0:	00ca      	lsls	r2, r1, #3
 80068e2:	4610      	mov	r0, r2
 80068e4:	4619      	mov	r1, r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	4642      	mov	r2, r8
 80068ea:	189b      	adds	r3, r3, r2
 80068ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068f0:	464b      	mov	r3, r9
 80068f2:	460a      	mov	r2, r1
 80068f4:	eb42 0303 	adc.w	r3, r2, r3
 80068f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006908:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800690c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006910:	460b      	mov	r3, r1
 8006912:	18db      	adds	r3, r3, r3
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28
 8006916:	4613      	mov	r3, r2
 8006918:	eb42 0303 	adc.w	r3, r2, r3
 800691c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800691e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006922:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006926:	f7f9 fcbb 	bl	80002a0 <__aeabi_uldivmod>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	4b0d      	ldr	r3, [pc, #52]	; (8006964 <UART_SetConfig+0x2d4>)
 8006930:	fba3 1302 	umull	r1, r3, r3, r2
 8006934:	095b      	lsrs	r3, r3, #5
 8006936:	2164      	movs	r1, #100	; 0x64
 8006938:	fb01 f303 	mul.w	r3, r1, r3
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	3332      	adds	r3, #50	; 0x32
 8006942:	4a08      	ldr	r2, [pc, #32]	; (8006964 <UART_SetConfig+0x2d4>)
 8006944:	fba2 2303 	umull	r2, r3, r2, r3
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	f003 0207 	and.w	r2, r3, #7
 800694e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4422      	add	r2, r4
 8006956:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006958:	e105      	b.n	8006b66 <UART_SetConfig+0x4d6>
 800695a:	bf00      	nop
 800695c:	40011000 	.word	0x40011000
 8006960:	40011400 	.word	0x40011400
 8006964:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800696c:	2200      	movs	r2, #0
 800696e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006972:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006976:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800697a:	4642      	mov	r2, r8
 800697c:	464b      	mov	r3, r9
 800697e:	1891      	adds	r1, r2, r2
 8006980:	6239      	str	r1, [r7, #32]
 8006982:	415b      	adcs	r3, r3
 8006984:	627b      	str	r3, [r7, #36]	; 0x24
 8006986:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800698a:	4641      	mov	r1, r8
 800698c:	1854      	adds	r4, r2, r1
 800698e:	4649      	mov	r1, r9
 8006990:	eb43 0501 	adc.w	r5, r3, r1
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	00eb      	lsls	r3, r5, #3
 800699e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069a2:	00e2      	lsls	r2, r4, #3
 80069a4:	4614      	mov	r4, r2
 80069a6:	461d      	mov	r5, r3
 80069a8:	4643      	mov	r3, r8
 80069aa:	18e3      	adds	r3, r4, r3
 80069ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069b0:	464b      	mov	r3, r9
 80069b2:	eb45 0303 	adc.w	r3, r5, r3
 80069b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	f04f 0300 	mov.w	r3, #0
 80069d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069d6:	4629      	mov	r1, r5
 80069d8:	008b      	lsls	r3, r1, #2
 80069da:	4621      	mov	r1, r4
 80069dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069e0:	4621      	mov	r1, r4
 80069e2:	008a      	lsls	r2, r1, #2
 80069e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069e8:	f7f9 fc5a 	bl	80002a0 <__aeabi_uldivmod>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4b60      	ldr	r3, [pc, #384]	; (8006b74 <UART_SetConfig+0x4e4>)
 80069f2:	fba3 2302 	umull	r2, r3, r3, r2
 80069f6:	095b      	lsrs	r3, r3, #5
 80069f8:	011c      	lsls	r4, r3, #4
 80069fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069fe:	2200      	movs	r2, #0
 8006a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a0c:	4642      	mov	r2, r8
 8006a0e:	464b      	mov	r3, r9
 8006a10:	1891      	adds	r1, r2, r2
 8006a12:	61b9      	str	r1, [r7, #24]
 8006a14:	415b      	adcs	r3, r3
 8006a16:	61fb      	str	r3, [r7, #28]
 8006a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a1c:	4641      	mov	r1, r8
 8006a1e:	1851      	adds	r1, r2, r1
 8006a20:	6139      	str	r1, [r7, #16]
 8006a22:	4649      	mov	r1, r9
 8006a24:	414b      	adcs	r3, r1
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	f04f 0200 	mov.w	r2, #0
 8006a2c:	f04f 0300 	mov.w	r3, #0
 8006a30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a34:	4659      	mov	r1, fp
 8006a36:	00cb      	lsls	r3, r1, #3
 8006a38:	4651      	mov	r1, sl
 8006a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a3e:	4651      	mov	r1, sl
 8006a40:	00ca      	lsls	r2, r1, #3
 8006a42:	4610      	mov	r0, r2
 8006a44:	4619      	mov	r1, r3
 8006a46:	4603      	mov	r3, r0
 8006a48:	4642      	mov	r2, r8
 8006a4a:	189b      	adds	r3, r3, r2
 8006a4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a50:	464b      	mov	r3, r9
 8006a52:	460a      	mov	r2, r1
 8006a54:	eb42 0303 	adc.w	r3, r2, r3
 8006a58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a68:	f04f 0200 	mov.w	r2, #0
 8006a6c:	f04f 0300 	mov.w	r3, #0
 8006a70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a74:	4649      	mov	r1, r9
 8006a76:	008b      	lsls	r3, r1, #2
 8006a78:	4641      	mov	r1, r8
 8006a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a7e:	4641      	mov	r1, r8
 8006a80:	008a      	lsls	r2, r1, #2
 8006a82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a86:	f7f9 fc0b 	bl	80002a0 <__aeabi_uldivmod>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4b39      	ldr	r3, [pc, #228]	; (8006b74 <UART_SetConfig+0x4e4>)
 8006a90:	fba3 1302 	umull	r1, r3, r3, r2
 8006a94:	095b      	lsrs	r3, r3, #5
 8006a96:	2164      	movs	r1, #100	; 0x64
 8006a98:	fb01 f303 	mul.w	r3, r1, r3
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	3332      	adds	r3, #50	; 0x32
 8006aa2:	4a34      	ldr	r2, [pc, #208]	; (8006b74 <UART_SetConfig+0x4e4>)
 8006aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aae:	441c      	add	r4, r3
 8006ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ab8:	677a      	str	r2, [r7, #116]	; 0x74
 8006aba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006abe:	4642      	mov	r2, r8
 8006ac0:	464b      	mov	r3, r9
 8006ac2:	1891      	adds	r1, r2, r2
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	415b      	adcs	r3, r3
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ace:	4641      	mov	r1, r8
 8006ad0:	1851      	adds	r1, r2, r1
 8006ad2:	6039      	str	r1, [r7, #0]
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	414b      	adcs	r3, r1
 8006ad8:	607b      	str	r3, [r7, #4]
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	f04f 0300 	mov.w	r3, #0
 8006ae2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ae6:	4659      	mov	r1, fp
 8006ae8:	00cb      	lsls	r3, r1, #3
 8006aea:	4651      	mov	r1, sl
 8006aec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006af0:	4651      	mov	r1, sl
 8006af2:	00ca      	lsls	r2, r1, #3
 8006af4:	4610      	mov	r0, r2
 8006af6:	4619      	mov	r1, r3
 8006af8:	4603      	mov	r3, r0
 8006afa:	4642      	mov	r2, r8
 8006afc:	189b      	adds	r3, r3, r2
 8006afe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b00:	464b      	mov	r3, r9
 8006b02:	460a      	mov	r2, r1
 8006b04:	eb42 0303 	adc.w	r3, r2, r3
 8006b08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	663b      	str	r3, [r7, #96]	; 0x60
 8006b14:	667a      	str	r2, [r7, #100]	; 0x64
 8006b16:	f04f 0200 	mov.w	r2, #0
 8006b1a:	f04f 0300 	mov.w	r3, #0
 8006b1e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b22:	4649      	mov	r1, r9
 8006b24:	008b      	lsls	r3, r1, #2
 8006b26:	4641      	mov	r1, r8
 8006b28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b2c:	4641      	mov	r1, r8
 8006b2e:	008a      	lsls	r2, r1, #2
 8006b30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b34:	f7f9 fbb4 	bl	80002a0 <__aeabi_uldivmod>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4b0d      	ldr	r3, [pc, #52]	; (8006b74 <UART_SetConfig+0x4e4>)
 8006b3e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b42:	095b      	lsrs	r3, r3, #5
 8006b44:	2164      	movs	r1, #100	; 0x64
 8006b46:	fb01 f303 	mul.w	r3, r1, r3
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	011b      	lsls	r3, r3, #4
 8006b4e:	3332      	adds	r3, #50	; 0x32
 8006b50:	4a08      	ldr	r2, [pc, #32]	; (8006b74 <UART_SetConfig+0x4e4>)
 8006b52:	fba2 2303 	umull	r2, r3, r2, r3
 8006b56:	095b      	lsrs	r3, r3, #5
 8006b58:	f003 020f 	and.w	r2, r3, #15
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4422      	add	r2, r4
 8006b64:	609a      	str	r2, [r3, #8]
}
 8006b66:	bf00      	nop
 8006b68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b72:	bf00      	nop
 8006b74:	51eb851f 	.word	0x51eb851f

08006b78 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d123      	bne.n	8006bd2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006b92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	6851      	ldr	r1, [r2, #4]
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	6892      	ldr	r2, [r2, #8]
 8006b9e:	4311      	orrs	r1, r2
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	68d2      	ldr	r2, [r2, #12]
 8006ba4:	4311      	orrs	r1, r2
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	6912      	ldr	r2, [r2, #16]
 8006baa:	4311      	orrs	r1, r2
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	6952      	ldr	r2, [r2, #20]
 8006bb0:	4311      	orrs	r1, r2
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	6992      	ldr	r2, [r2, #24]
 8006bb6:	4311      	orrs	r1, r2
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	69d2      	ldr	r2, [r2, #28]
 8006bbc:	4311      	orrs	r1, r2
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	6a12      	ldr	r2, [r2, #32]
 8006bc2:	4311      	orrs	r1, r2
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	e028      	b.n	8006c24 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	69d9      	ldr	r1, [r3, #28]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	4319      	orrs	r1, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	430b      	orrs	r3, r1
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006bf8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	6851      	ldr	r1, [r2, #4]
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	6892      	ldr	r2, [r2, #8]
 8006c04:	4311      	orrs	r1, r2
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	68d2      	ldr	r2, [r2, #12]
 8006c0a:	4311      	orrs	r1, r2
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	6912      	ldr	r2, [r2, #16]
 8006c10:	4311      	orrs	r1, r2
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	6952      	ldr	r2, [r2, #20]
 8006c16:	4311      	orrs	r1, r2
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	6992      	ldr	r2, [r2, #24]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b085      	sub	sp, #20
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d128      	bne.n	8006c96 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	1e59      	subs	r1, r3, #1
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	4319      	orrs	r1, r3
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	021b      	lsls	r3, r3, #8
 8006c64:	4319      	orrs	r1, r3
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	031b      	lsls	r3, r3, #12
 8006c6e:	4319      	orrs	r1, r3
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	041b      	lsls	r3, r3, #16
 8006c78:	4319      	orrs	r1, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	051b      	lsls	r3, r3, #20
 8006c82:	4319      	orrs	r1, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	061b      	lsls	r3, r3, #24
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	609a      	str	r2, [r3, #8]
 8006c94:	e02f      	b.n	8006cf6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	68d2      	ldr	r2, [r2, #12]
 8006ca6:	3a01      	subs	r2, #1
 8006ca8:	0311      	lsls	r1, r2, #12
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	6952      	ldr	r2, [r2, #20]
 8006cae:	3a01      	subs	r2, #1
 8006cb0:	0512      	lsls	r2, r2, #20
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	1e59      	subs	r1, r3, #1
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	4319      	orrs	r1, r3
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	021b      	lsls	r3, r3, #8
 8006cda:	4319      	orrs	r1, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	041b      	lsls	r3, r3, #16
 8006ce4:	4319      	orrs	r1, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	061b      	lsls	r3, r3, #24
 8006cee:	430b      	orrs	r3, r1
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	0d9b      	lsrs	r3, r3, #22
 8006d1a:	059b      	lsls	r3, r3, #22
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	6811      	ldr	r1, [r2, #0]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	6852      	ldr	r2, [r2, #4]
 8006d24:	4311      	orrs	r1, r2
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	6892      	ldr	r2, [r2, #8]
 8006d2a:	3a01      	subs	r2, #1
 8006d2c:	0152      	lsls	r2, r2, #5
 8006d2e:	4311      	orrs	r1, r2
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	68d2      	ldr	r2, [r2, #12]
 8006d34:	0252      	lsls	r2, r2, #9
 8006d36:	430a      	orrs	r2, r1
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006d3e:	f7fb fadd 	bl	80022fc <HAL_GetTick>
 8006d42:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006d44:	e010      	b.n	8006d68 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4c:	d00c      	beq.n	8006d68 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d007      	beq.n	8006d64 <FMC_SDRAM_SendCommand+0x60>
 8006d54:	f7fb fad2 	bl	80022fc <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d201      	bcs.n	8006d68 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e006      	b.n	8006d76 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	f003 0320 	and.w	r3, r3, #32
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	d0e8      	beq.n	8006d46 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006d90:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	0052      	lsls	r2, r2, #1
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8006db0:	f000 fa5c 	bl	800726c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8006db4:	20ca      	movs	r0, #202	; 0xca
 8006db6:	f000 f95d 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8006dba:	20c3      	movs	r0, #195	; 0xc3
 8006dbc:	f000 f967 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8006dc0:	2008      	movs	r0, #8
 8006dc2:	f000 f964 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8006dc6:	2050      	movs	r0, #80	; 0x50
 8006dc8:	f000 f961 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8006dcc:	20cf      	movs	r0, #207	; 0xcf
 8006dce:	f000 f951 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	f000 f95b 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8006dd8:	20c1      	movs	r0, #193	; 0xc1
 8006dda:	f000 f958 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8006dde:	2030      	movs	r0, #48	; 0x30
 8006de0:	f000 f955 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8006de4:	20ed      	movs	r0, #237	; 0xed
 8006de6:	f000 f945 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8006dea:	2064      	movs	r0, #100	; 0x64
 8006dec:	f000 f94f 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8006df0:	2003      	movs	r0, #3
 8006df2:	f000 f94c 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8006df6:	2012      	movs	r0, #18
 8006df8:	f000 f949 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8006dfc:	2081      	movs	r0, #129	; 0x81
 8006dfe:	f000 f946 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8006e02:	20e8      	movs	r0, #232	; 0xe8
 8006e04:	f000 f936 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8006e08:	2085      	movs	r0, #133	; 0x85
 8006e0a:	f000 f940 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006e0e:	2000      	movs	r0, #0
 8006e10:	f000 f93d 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8006e14:	2078      	movs	r0, #120	; 0x78
 8006e16:	f000 f93a 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8006e1a:	20cb      	movs	r0, #203	; 0xcb
 8006e1c:	f000 f92a 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8006e20:	2039      	movs	r0, #57	; 0x39
 8006e22:	f000 f934 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8006e26:	202c      	movs	r0, #44	; 0x2c
 8006e28:	f000 f931 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	f000 f92e 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8006e32:	2034      	movs	r0, #52	; 0x34
 8006e34:	f000 f92b 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8006e38:	2002      	movs	r0, #2
 8006e3a:	f000 f928 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8006e3e:	20f7      	movs	r0, #247	; 0xf7
 8006e40:	f000 f918 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8006e44:	2020      	movs	r0, #32
 8006e46:	f000 f922 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8006e4a:	20ea      	movs	r0, #234	; 0xea
 8006e4c:	f000 f912 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006e50:	2000      	movs	r0, #0
 8006e52:	f000 f91c 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006e56:	2000      	movs	r0, #0
 8006e58:	f000 f919 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8006e5c:	20b1      	movs	r0, #177	; 0xb1
 8006e5e:	f000 f909 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006e62:	2000      	movs	r0, #0
 8006e64:	f000 f913 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8006e68:	201b      	movs	r0, #27
 8006e6a:	f000 f910 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8006e6e:	20b6      	movs	r0, #182	; 0xb6
 8006e70:	f000 f900 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8006e74:	200a      	movs	r0, #10
 8006e76:	f000 f90a 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8006e7a:	20a2      	movs	r0, #162	; 0xa2
 8006e7c:	f000 f907 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8006e80:	20c0      	movs	r0, #192	; 0xc0
 8006e82:	f000 f8f7 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8006e86:	2010      	movs	r0, #16
 8006e88:	f000 f901 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8006e8c:	20c1      	movs	r0, #193	; 0xc1
 8006e8e:	f000 f8f1 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8006e92:	2010      	movs	r0, #16
 8006e94:	f000 f8fb 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8006e98:	20c5      	movs	r0, #197	; 0xc5
 8006e9a:	f000 f8eb 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8006e9e:	2045      	movs	r0, #69	; 0x45
 8006ea0:	f000 f8f5 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8006ea4:	2015      	movs	r0, #21
 8006ea6:	f000 f8f2 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8006eaa:	20c7      	movs	r0, #199	; 0xc7
 8006eac:	f000 f8e2 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8006eb0:	2090      	movs	r0, #144	; 0x90
 8006eb2:	f000 f8ec 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8006eb6:	2036      	movs	r0, #54	; 0x36
 8006eb8:	f000 f8dc 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8006ebc:	20c8      	movs	r0, #200	; 0xc8
 8006ebe:	f000 f8e6 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8006ec2:	20f2      	movs	r0, #242	; 0xf2
 8006ec4:	f000 f8d6 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006ec8:	2000      	movs	r0, #0
 8006eca:	f000 f8e0 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8006ece:	20b0      	movs	r0, #176	; 0xb0
 8006ed0:	f000 f8d0 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8006ed4:	20c2      	movs	r0, #194	; 0xc2
 8006ed6:	f000 f8da 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8006eda:	20b6      	movs	r0, #182	; 0xb6
 8006edc:	f000 f8ca 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8006ee0:	200a      	movs	r0, #10
 8006ee2:	f000 f8d4 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8006ee6:	20a7      	movs	r0, #167	; 0xa7
 8006ee8:	f000 f8d1 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8006eec:	2027      	movs	r0, #39	; 0x27
 8006eee:	f000 f8ce 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8006ef2:	2004      	movs	r0, #4
 8006ef4:	f000 f8cb 	bl	800708e <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8006ef8:	202a      	movs	r0, #42	; 0x2a
 8006efa:	f000 f8bb 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006efe:	2000      	movs	r0, #0
 8006f00:	f000 f8c5 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006f04:	2000      	movs	r0, #0
 8006f06:	f000 f8c2 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	f000 f8bf 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8006f10:	20ef      	movs	r0, #239	; 0xef
 8006f12:	f000 f8bc 	bl	800708e <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8006f16:	202b      	movs	r0, #43	; 0x2b
 8006f18:	f000 f8ac 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	f000 f8b6 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006f22:	2000      	movs	r0, #0
 8006f24:	f000 f8b3 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8006f28:	2001      	movs	r0, #1
 8006f2a:	f000 f8b0 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8006f2e:	203f      	movs	r0, #63	; 0x3f
 8006f30:	f000 f8ad 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8006f34:	20f6      	movs	r0, #246	; 0xf6
 8006f36:	f000 f89d 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	f000 f8a7 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006f40:	2000      	movs	r0, #0
 8006f42:	f000 f8a4 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8006f46:	2006      	movs	r0, #6
 8006f48:	f000 f8a1 	bl	800708e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8006f4c:	202c      	movs	r0, #44	; 0x2c
 8006f4e:	f000 f891 	bl	8007074 <ili9341_WriteReg>
  LCD_Delay(200);
 8006f52:	20c8      	movs	r0, #200	; 0xc8
 8006f54:	f000 fa78 	bl	8007448 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8006f58:	2026      	movs	r0, #38	; 0x26
 8006f5a:	f000 f88b 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8006f5e:	2001      	movs	r0, #1
 8006f60:	f000 f895 	bl	800708e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8006f64:	20e0      	movs	r0, #224	; 0xe0
 8006f66:	f000 f885 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8006f6a:	200f      	movs	r0, #15
 8006f6c:	f000 f88f 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8006f70:	2029      	movs	r0, #41	; 0x29
 8006f72:	f000 f88c 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8006f76:	2024      	movs	r0, #36	; 0x24
 8006f78:	f000 f889 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8006f7c:	200c      	movs	r0, #12
 8006f7e:	f000 f886 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8006f82:	200e      	movs	r0, #14
 8006f84:	f000 f883 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8006f88:	2009      	movs	r0, #9
 8006f8a:	f000 f880 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8006f8e:	204e      	movs	r0, #78	; 0x4e
 8006f90:	f000 f87d 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8006f94:	2078      	movs	r0, #120	; 0x78
 8006f96:	f000 f87a 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8006f9a:	203c      	movs	r0, #60	; 0x3c
 8006f9c:	f000 f877 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8006fa0:	2009      	movs	r0, #9
 8006fa2:	f000 f874 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8006fa6:	2013      	movs	r0, #19
 8006fa8:	f000 f871 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8006fac:	2005      	movs	r0, #5
 8006fae:	f000 f86e 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8006fb2:	2017      	movs	r0, #23
 8006fb4:	f000 f86b 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8006fb8:	2011      	movs	r0, #17
 8006fba:	f000 f868 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	f000 f865 	bl	800708e <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8006fc4:	20e1      	movs	r0, #225	; 0xe1
 8006fc6:	f000 f855 	bl	8007074 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006fca:	2000      	movs	r0, #0
 8006fcc:	f000 f85f 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8006fd0:	2016      	movs	r0, #22
 8006fd2:	f000 f85c 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8006fd6:	201b      	movs	r0, #27
 8006fd8:	f000 f859 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8006fdc:	2004      	movs	r0, #4
 8006fde:	f000 f856 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8006fe2:	2011      	movs	r0, #17
 8006fe4:	f000 f853 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8006fe8:	2007      	movs	r0, #7
 8006fea:	f000 f850 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8006fee:	2031      	movs	r0, #49	; 0x31
 8006ff0:	f000 f84d 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8006ff4:	2033      	movs	r0, #51	; 0x33
 8006ff6:	f000 f84a 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8006ffa:	2042      	movs	r0, #66	; 0x42
 8006ffc:	f000 f847 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8007000:	2005      	movs	r0, #5
 8007002:	f000 f844 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8007006:	200c      	movs	r0, #12
 8007008:	f000 f841 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800700c:	200a      	movs	r0, #10
 800700e:	f000 f83e 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8007012:	2028      	movs	r0, #40	; 0x28
 8007014:	f000 f83b 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8007018:	202f      	movs	r0, #47	; 0x2f
 800701a:	f000 f838 	bl	800708e <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800701e:	200f      	movs	r0, #15
 8007020:	f000 f835 	bl	800708e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8007024:	2011      	movs	r0, #17
 8007026:	f000 f825 	bl	8007074 <ili9341_WriteReg>
  LCD_Delay(200);
 800702a:	20c8      	movs	r0, #200	; 0xc8
 800702c:	f000 fa0c 	bl	8007448 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8007030:	2029      	movs	r0, #41	; 0x29
 8007032:	f000 f81f 	bl	8007074 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8007036:	202c      	movs	r0, #44	; 0x2c
 8007038:	f000 f81c 	bl	8007074 <ili9341_WriteReg>
}
 800703c:	bf00      	nop
 800703e:	bd80      	pop	{r7, pc}

08007040 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8007044:	f000 f912 	bl	800726c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8007048:	2103      	movs	r1, #3
 800704a:	20d3      	movs	r0, #211	; 0xd3
 800704c:	f000 f82c 	bl	80070a8 <ili9341_ReadData>
 8007050:	4603      	mov	r3, r0
 8007052:	b29b      	uxth	r3, r3
}
 8007054:	4618      	mov	r0, r3
 8007056:	bd80      	pop	{r7, pc}

08007058 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800705c:	2029      	movs	r0, #41	; 0x29
 800705e:	f000 f809 	bl	8007074 <ili9341_WriteReg>
}
 8007062:	bf00      	nop
 8007064:	bd80      	pop	{r7, pc}

08007066 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800706a:	2028      	movs	r0, #40	; 0x28
 800706c:	f000 f802 	bl	8007074 <ili9341_WriteReg>
}
 8007070:	bf00      	nop
 8007072:	bd80      	pop	{r7, pc}

08007074 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	4603      	mov	r3, r0
 800707c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800707e:	79fb      	ldrb	r3, [r7, #7]
 8007080:	4618      	mov	r0, r3
 8007082:	f000 f98d 	bl	80073a0 <LCD_IO_WriteReg>
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	4603      	mov	r3, r0
 8007096:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8007098:	88fb      	ldrh	r3, [r7, #6]
 800709a:	4618      	mov	r0, r3
 800709c:	f000 f95e 	bl	800735c <LCD_IO_WriteData>
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	460a      	mov	r2, r1
 80070b2:	80fb      	strh	r3, [r7, #6]
 80070b4:	4613      	mov	r3, r2
 80070b6:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80070b8:	797a      	ldrb	r2, [r7, #5]
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	4611      	mov	r1, r2
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 f990 	bl	80073e4 <LCD_IO_ReadData>
 80070c4:	4603      	mov	r3, r0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80070ce:	b480      	push	{r7}
 80070d0:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80070d2:	23f0      	movs	r3, #240	; 0xf0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80070de:	b480      	push	{r7}
 80070e0:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80070e2:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80070f4:	4819      	ldr	r0, [pc, #100]	; (800715c <SPIx_Init+0x6c>)
 80070f6:	f7fe fdc8 	bl	8005c8a <HAL_SPI_GetState>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d12b      	bne.n	8007158 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8007100:	4b16      	ldr	r3, [pc, #88]	; (800715c <SPIx_Init+0x6c>)
 8007102:	4a17      	ldr	r2, [pc, #92]	; (8007160 <SPIx_Init+0x70>)
 8007104:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007106:	4b15      	ldr	r3, [pc, #84]	; (800715c <SPIx_Init+0x6c>)
 8007108:	2218      	movs	r2, #24
 800710a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800710c:	4b13      	ldr	r3, [pc, #76]	; (800715c <SPIx_Init+0x6c>)
 800710e:	2200      	movs	r2, #0
 8007110:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8007112:	4b12      	ldr	r3, [pc, #72]	; (800715c <SPIx_Init+0x6c>)
 8007114:	2200      	movs	r2, #0
 8007116:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8007118:	4b10      	ldr	r3, [pc, #64]	; (800715c <SPIx_Init+0x6c>)
 800711a:	2200      	movs	r2, #0
 800711c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800711e:	4b0f      	ldr	r3, [pc, #60]	; (800715c <SPIx_Init+0x6c>)
 8007120:	2200      	movs	r2, #0
 8007122:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8007124:	4b0d      	ldr	r3, [pc, #52]	; (800715c <SPIx_Init+0x6c>)
 8007126:	2207      	movs	r2, #7
 8007128:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800712a:	4b0c      	ldr	r3, [pc, #48]	; (800715c <SPIx_Init+0x6c>)
 800712c:	2200      	movs	r2, #0
 800712e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8007130:	4b0a      	ldr	r3, [pc, #40]	; (800715c <SPIx_Init+0x6c>)
 8007132:	2200      	movs	r2, #0
 8007134:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8007136:	4b09      	ldr	r3, [pc, #36]	; (800715c <SPIx_Init+0x6c>)
 8007138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800713c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800713e:	4b07      	ldr	r3, [pc, #28]	; (800715c <SPIx_Init+0x6c>)
 8007140:	2200      	movs	r2, #0
 8007142:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8007144:	4b05      	ldr	r3, [pc, #20]	; (800715c <SPIx_Init+0x6c>)
 8007146:	f44f 7282 	mov.w	r2, #260	; 0x104
 800714a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800714c:	4803      	ldr	r0, [pc, #12]	; (800715c <SPIx_Init+0x6c>)
 800714e:	f000 f853 	bl	80071f8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8007152:	4802      	ldr	r0, [pc, #8]	; (800715c <SPIx_Init+0x6c>)
 8007154:	f7fe f8f9 	bl	800534a <HAL_SPI_Init>
  } 
}
 8007158:	bf00      	nop
 800715a:	bd80      	pop	{r7, pc}
 800715c:	200005d0 	.word	0x200005d0
 8007160:	40015000 	.word	0x40015000

08007164 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	b29a      	uxth	r2, r3
 8007176:	4b09      	ldr	r3, [pc, #36]	; (800719c <SPIx_Read+0x38>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f107 0108 	add.w	r1, r7, #8
 800717e:	4808      	ldr	r0, [pc, #32]	; (80071a0 <SPIx_Read+0x3c>)
 8007180:	f7fe fad0 	bl	8005724 <HAL_SPI_Receive>
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800718e:	f000 f827 	bl	80071e0 <SPIx_Error>
  }
  
  return readvalue;
 8007192:	68bb      	ldr	r3, [r7, #8]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	200000a0 	.word	0x200000a0
 80071a0:	200005d0 	.word	0x200005d0

080071a4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	4603      	mov	r3, r0
 80071ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80071b2:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <SPIx_Write+0x34>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	1db9      	adds	r1, r7, #6
 80071b8:	2201      	movs	r2, #1
 80071ba:	4808      	ldr	r0, [pc, #32]	; (80071dc <SPIx_Write+0x38>)
 80071bc:	f7fe f976 	bl	80054ac <HAL_SPI_Transmit>
 80071c0:	4603      	mov	r3, r0
 80071c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80071ca:	f000 f809 	bl	80071e0 <SPIx_Error>
  }
}
 80071ce:	bf00      	nop
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	200000a0 	.word	0x200000a0
 80071dc:	200005d0 	.word	0x200005d0

080071e0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80071e4:	4803      	ldr	r0, [pc, #12]	; (80071f4 <SPIx_Error+0x14>)
 80071e6:	f7fe f939 	bl	800545c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80071ea:	f7ff ff81 	bl	80070f0 <SPIx_Init>
}
 80071ee:	bf00      	nop
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	200005d0 	.word	0x200005d0

080071f8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08a      	sub	sp, #40	; 0x28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8007200:	2300      	movs	r3, #0
 8007202:	613b      	str	r3, [r7, #16]
 8007204:	4b17      	ldr	r3, [pc, #92]	; (8007264 <SPIx_MspInit+0x6c>)
 8007206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007208:	4a16      	ldr	r2, [pc, #88]	; (8007264 <SPIx_MspInit+0x6c>)
 800720a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800720e:	6453      	str	r3, [r2, #68]	; 0x44
 8007210:	4b14      	ldr	r3, [pc, #80]	; (8007264 <SPIx_MspInit+0x6c>)
 8007212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007218:	613b      	str	r3, [r7, #16]
 800721a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	4b10      	ldr	r3, [pc, #64]	; (8007264 <SPIx_MspInit+0x6c>)
 8007222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007224:	4a0f      	ldr	r2, [pc, #60]	; (8007264 <SPIx_MspInit+0x6c>)
 8007226:	f043 0320 	orr.w	r3, r3, #32
 800722a:	6313      	str	r3, [r2, #48]	; 0x30
 800722c:	4b0d      	ldr	r3, [pc, #52]	; (8007264 <SPIx_MspInit+0x6c>)
 800722e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007230:	f003 0320 	and.w	r3, r3, #32
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8007238:	f44f 7360 	mov.w	r3, #896	; 0x380
 800723c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800723e:	2302      	movs	r3, #2
 8007240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8007242:	2302      	movs	r3, #2
 8007244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8007246:	2301      	movs	r3, #1
 8007248:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800724a:	2305      	movs	r3, #5
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800724e:	f107 0314 	add.w	r3, r7, #20
 8007252:	4619      	mov	r1, r3
 8007254:	4804      	ldr	r0, [pc, #16]	; (8007268 <SPIx_MspInit+0x70>)
 8007256:	f7fb fddd 	bl	8002e14 <HAL_GPIO_Init>
}
 800725a:	bf00      	nop
 800725c:	3728      	adds	r7, #40	; 0x28
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	40023800 	.word	0x40023800
 8007268:	40021400 	.word	0x40021400

0800726c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b088      	sub	sp, #32
 8007270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8007272:	4b36      	ldr	r3, [pc, #216]	; (800734c <LCD_IO_Init+0xe0>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d164      	bne.n	8007344 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800727a:	4b34      	ldr	r3, [pc, #208]	; (800734c <LCD_IO_Init+0xe0>)
 800727c:	2201      	movs	r2, #1
 800727e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8007280:	2300      	movs	r3, #0
 8007282:	60bb      	str	r3, [r7, #8]
 8007284:	4b32      	ldr	r3, [pc, #200]	; (8007350 <LCD_IO_Init+0xe4>)
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	4a31      	ldr	r2, [pc, #196]	; (8007350 <LCD_IO_Init+0xe4>)
 800728a:	f043 0308 	orr.w	r3, r3, #8
 800728e:	6313      	str	r3, [r2, #48]	; 0x30
 8007290:	4b2f      	ldr	r3, [pc, #188]	; (8007350 <LCD_IO_Init+0xe4>)
 8007292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	60bb      	str	r3, [r7, #8]
 800729a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800729c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80072a2:	2301      	movs	r3, #1
 80072a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80072aa:	2302      	movs	r3, #2
 80072ac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80072ae:	f107 030c 	add.w	r3, r7, #12
 80072b2:	4619      	mov	r1, r3
 80072b4:	4827      	ldr	r0, [pc, #156]	; (8007354 <LCD_IO_Init+0xe8>)
 80072b6:	f7fb fdad 	bl	8002e14 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80072ba:	2300      	movs	r3, #0
 80072bc:	607b      	str	r3, [r7, #4]
 80072be:	4b24      	ldr	r3, [pc, #144]	; (8007350 <LCD_IO_Init+0xe4>)
 80072c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c2:	4a23      	ldr	r2, [pc, #140]	; (8007350 <LCD_IO_Init+0xe4>)
 80072c4:	f043 0308 	orr.w	r3, r3, #8
 80072c8:	6313      	str	r3, [r2, #48]	; 0x30
 80072ca:	4b21      	ldr	r3, [pc, #132]	; (8007350 <LCD_IO_Init+0xe4>)
 80072cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ce:	f003 0308 	and.w	r3, r3, #8
 80072d2:	607b      	str	r3, [r7, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80072d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80072dc:	2301      	movs	r3, #1
 80072de:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80072e4:	2302      	movs	r3, #2
 80072e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80072e8:	f107 030c 	add.w	r3, r7, #12
 80072ec:	4619      	mov	r1, r3
 80072ee:	4819      	ldr	r0, [pc, #100]	; (8007354 <LCD_IO_Init+0xe8>)
 80072f0:	f7fb fd90 	bl	8002e14 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80072f4:	2300      	movs	r3, #0
 80072f6:	603b      	str	r3, [r7, #0]
 80072f8:	4b15      	ldr	r3, [pc, #84]	; (8007350 <LCD_IO_Init+0xe4>)
 80072fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fc:	4a14      	ldr	r2, [pc, #80]	; (8007350 <LCD_IO_Init+0xe4>)
 80072fe:	f043 0304 	orr.w	r3, r3, #4
 8007302:	6313      	str	r3, [r2, #48]	; 0x30
 8007304:	4b12      	ldr	r3, [pc, #72]	; (8007350 <LCD_IO_Init+0xe4>)
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	603b      	str	r3, [r7, #0]
 800730e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8007310:	2304      	movs	r3, #4
 8007312:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8007314:	2301      	movs	r3, #1
 8007316:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8007318:	2300      	movs	r3, #0
 800731a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800731c:	2302      	movs	r3, #2
 800731e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8007320:	f107 030c 	add.w	r3, r7, #12
 8007324:	4619      	mov	r1, r3
 8007326:	480c      	ldr	r0, [pc, #48]	; (8007358 <LCD_IO_Init+0xec>)
 8007328:	f7fb fd74 	bl	8002e14 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800732c:	2200      	movs	r2, #0
 800732e:	2104      	movs	r1, #4
 8007330:	4809      	ldr	r0, [pc, #36]	; (8007358 <LCD_IO_Init+0xec>)
 8007332:	f7fc f83f 	bl	80033b4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8007336:	2201      	movs	r2, #1
 8007338:	2104      	movs	r1, #4
 800733a:	4807      	ldr	r0, [pc, #28]	; (8007358 <LCD_IO_Init+0xec>)
 800733c:	f7fc f83a 	bl	80033b4 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8007340:	f7ff fed6 	bl	80070f0 <SPIx_Init>
  }
}
 8007344:	bf00      	nop
 8007346:	3720      	adds	r7, #32
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20000628 	.word	0x20000628
 8007350:	40023800 	.word	0x40023800
 8007354:	40020c00 	.word	0x40020c00
 8007358:	40020800 	.word	0x40020800

0800735c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	4603      	mov	r3, r0
 8007364:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8007366:	2201      	movs	r2, #1
 8007368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800736c:	480a      	ldr	r0, [pc, #40]	; (8007398 <LCD_IO_WriteData+0x3c>)
 800736e:	f7fc f821 	bl	80033b4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8007372:	2200      	movs	r2, #0
 8007374:	2104      	movs	r1, #4
 8007376:	4809      	ldr	r0, [pc, #36]	; (800739c <LCD_IO_WriteData+0x40>)
 8007378:	f7fc f81c 	bl	80033b4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff ff10 	bl	80071a4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8007384:	2201      	movs	r2, #1
 8007386:	2104      	movs	r1, #4
 8007388:	4804      	ldr	r0, [pc, #16]	; (800739c <LCD_IO_WriteData+0x40>)
 800738a:	f7fc f813 	bl	80033b4 <HAL_GPIO_WritePin>
}
 800738e:	bf00      	nop
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	40020c00 	.word	0x40020c00
 800739c:	40020800 	.word	0x40020800

080073a0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	4603      	mov	r3, r0
 80073a8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80073aa:	2200      	movs	r2, #0
 80073ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073b0:	480a      	ldr	r0, [pc, #40]	; (80073dc <LCD_IO_WriteReg+0x3c>)
 80073b2:	f7fb ffff 	bl	80033b4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80073b6:	2200      	movs	r2, #0
 80073b8:	2104      	movs	r1, #4
 80073ba:	4809      	ldr	r0, [pc, #36]	; (80073e0 <LCD_IO_WriteReg+0x40>)
 80073bc:	f7fb fffa 	bl	80033b4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7ff feed 	bl	80071a4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80073ca:	2201      	movs	r2, #1
 80073cc:	2104      	movs	r1, #4
 80073ce:	4804      	ldr	r0, [pc, #16]	; (80073e0 <LCD_IO_WriteReg+0x40>)
 80073d0:	f7fb fff0 	bl	80033b4 <HAL_GPIO_WritePin>
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	40020c00 	.word	0x40020c00
 80073e0:	40020800 	.word	0x40020800

080073e4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	460a      	mov	r2, r1
 80073ee:	80fb      	strh	r3, [r7, #6]
 80073f0:	4613      	mov	r3, r2
 80073f2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80073f8:	2200      	movs	r2, #0
 80073fa:	2104      	movs	r1, #4
 80073fc:	4810      	ldr	r0, [pc, #64]	; (8007440 <LCD_IO_ReadData+0x5c>)
 80073fe:	f7fb ffd9 	bl	80033b4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8007402:	2200      	movs	r2, #0
 8007404:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007408:	480e      	ldr	r0, [pc, #56]	; (8007444 <LCD_IO_ReadData+0x60>)
 800740a:	f7fb ffd3 	bl	80033b4 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	4618      	mov	r0, r3
 8007412:	f7ff fec7 	bl	80071a4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8007416:	797b      	ldrb	r3, [r7, #5]
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff fea3 	bl	8007164 <SPIx_Read>
 800741e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8007420:	2201      	movs	r2, #1
 8007422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007426:	4807      	ldr	r0, [pc, #28]	; (8007444 <LCD_IO_ReadData+0x60>)
 8007428:	f7fb ffc4 	bl	80033b4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800742c:	2201      	movs	r2, #1
 800742e:	2104      	movs	r1, #4
 8007430:	4803      	ldr	r0, [pc, #12]	; (8007440 <LCD_IO_ReadData+0x5c>)
 8007432:	f7fb ffbf 	bl	80033b4 <HAL_GPIO_WritePin>
  
  return readvalue;
 8007436:	68fb      	ldr	r3, [r7, #12]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	40020800 	.word	0x40020800
 8007444:	40020c00 	.word	0x40020c00

08007448 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7fa ff5f 	bl	8002314 <HAL_Delay>
}
 8007456:	bf00      	nop
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
	...

08007460 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8007460:	b580      	push	{r7, lr}
 8007462:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8007464:	4b2d      	ldr	r3, [pc, #180]	; (800751c <BSP_LCD_Init+0xbc>)
 8007466:	4a2e      	ldr	r2, [pc, #184]	; (8007520 <BSP_LCD_Init+0xc0>)
 8007468:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800746a:	4b2c      	ldr	r3, [pc, #176]	; (800751c <BSP_LCD_Init+0xbc>)
 800746c:	2209      	movs	r2, #9
 800746e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8007470:	4b2a      	ldr	r3, [pc, #168]	; (800751c <BSP_LCD_Init+0xbc>)
 8007472:	2201      	movs	r2, #1
 8007474:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8007476:	4b29      	ldr	r3, [pc, #164]	; (800751c <BSP_LCD_Init+0xbc>)
 8007478:	221d      	movs	r2, #29
 800747a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800747c:	4b27      	ldr	r3, [pc, #156]	; (800751c <BSP_LCD_Init+0xbc>)
 800747e:	2203      	movs	r2, #3
 8007480:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8007482:	4b26      	ldr	r3, [pc, #152]	; (800751c <BSP_LCD_Init+0xbc>)
 8007484:	f240 120d 	movw	r2, #269	; 0x10d
 8007488:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800748a:	4b24      	ldr	r3, [pc, #144]	; (800751c <BSP_LCD_Init+0xbc>)
 800748c:	f240 1243 	movw	r2, #323	; 0x143
 8007490:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8007492:	4b22      	ldr	r3, [pc, #136]	; (800751c <BSP_LCD_Init+0xbc>)
 8007494:	f240 1217 	movw	r2, #279	; 0x117
 8007498:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800749a:	4b20      	ldr	r3, [pc, #128]	; (800751c <BSP_LCD_Init+0xbc>)
 800749c:	f240 1247 	movw	r2, #327	; 0x147
 80074a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80074a2:	4b1e      	ldr	r3, [pc, #120]	; (800751c <BSP_LCD_Init+0xbc>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80074aa:	4b1c      	ldr	r3, [pc, #112]	; (800751c <BSP_LCD_Init+0xbc>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80074b2:	4b1a      	ldr	r3, [pc, #104]	; (800751c <BSP_LCD_Init+0xbc>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80074ba:	4b1a      	ldr	r3, [pc, #104]	; (8007524 <BSP_LCD_Init+0xc4>)
 80074bc:	2208      	movs	r2, #8
 80074be:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80074c0:	4b18      	ldr	r3, [pc, #96]	; (8007524 <BSP_LCD_Init+0xc4>)
 80074c2:	22c0      	movs	r2, #192	; 0xc0
 80074c4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80074c6:	4b17      	ldr	r3, [pc, #92]	; (8007524 <BSP_LCD_Init+0xc4>)
 80074c8:	2204      	movs	r2, #4
 80074ca:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80074cc:	4b15      	ldr	r3, [pc, #84]	; (8007524 <BSP_LCD_Init+0xc4>)
 80074ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80074d2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80074d4:	4813      	ldr	r0, [pc, #76]	; (8007524 <BSP_LCD_Init+0xc4>)
 80074d6:	f7fd f9e9 	bl	80048ac <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80074da:	4b10      	ldr	r3, [pc, #64]	; (800751c <BSP_LCD_Init+0xbc>)
 80074dc:	2200      	movs	r2, #0
 80074de:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80074e0:	4b0e      	ldr	r3, [pc, #56]	; (800751c <BSP_LCD_Init+0xbc>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80074e6:	4b0d      	ldr	r3, [pc, #52]	; (800751c <BSP_LCD_Init+0xbc>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80074ec:	4b0b      	ldr	r3, [pc, #44]	; (800751c <BSP_LCD_Init+0xbc>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80074f2:	f000 fb6b 	bl	8007bcc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80074f6:	4809      	ldr	r0, [pc, #36]	; (800751c <BSP_LCD_Init+0xbc>)
 80074f8:	f7fc f936 	bl	8003768 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80074fc:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <BSP_LCD_Init+0xc8>)
 80074fe:	4a0b      	ldr	r2, [pc, #44]	; (800752c <BSP_LCD_Init+0xcc>)
 8007500:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8007502:	4b09      	ldr	r3, [pc, #36]	; (8007528 <BSP_LCD_Init+0xc8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800750a:	f000 fd4d 	bl	8007fa8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800750e:	4808      	ldr	r0, [pc, #32]	; (8007530 <BSP_LCD_Init+0xd0>)
 8007510:	f000 f8ce 	bl	80076b0 <BSP_LCD_SetFont>

  return LCD_OK;
 8007514:	2300      	movs	r3, #0
}  
 8007516:	4618      	mov	r0, r3
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	2000062c 	.word	0x2000062c
 8007520:	40016800 	.word	0x40016800
 8007524:	20000714 	.word	0x20000714
 8007528:	20000760 	.word	0x20000760
 800752c:	20000068 	.word	0x20000068
 8007530:	20000060 	.word	0x20000060

08007534 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8007538:	4b03      	ldr	r3, [pc, #12]	; (8007548 <BSP_LCD_GetXSize+0x14>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753e:	4798      	blx	r3
 8007540:	4603      	mov	r3, r0
}
 8007542:	4618      	mov	r0, r3
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20000760 	.word	0x20000760

0800754c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8007550:	4b03      	ldr	r3, [pc, #12]	; (8007560 <BSP_LCD_GetYSize+0x14>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007556:	4798      	blx	r3
 8007558:	4603      	mov	r3, r0
}
 800755a:	4618      	mov	r0, r3
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	20000760 	.word	0x20000760

08007564 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8007564:	b580      	push	{r7, lr}
 8007566:	b090      	sub	sp, #64	; 0x40
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	6039      	str	r1, [r7, #0]
 800756e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8007570:	2300      	movs	r3, #0
 8007572:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8007574:	f7ff ffde 	bl	8007534 <BSP_LCD_GetXSize>
 8007578:	4603      	mov	r3, r0
 800757a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8007580:	f7ff ffe4 	bl	800754c <BSP_LCD_GetYSize>
 8007584:	4603      	mov	r3, r0
 8007586:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8007588:	2300      	movs	r3, #0
 800758a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8007590:	23ff      	movs	r3, #255	; 0xff
 8007592:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8007594:	2300      	movs	r3, #0
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80075aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80075ae:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80075b0:	2307      	movs	r3, #7
 80075b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80075b4:	f7ff ffbe 	bl	8007534 <BSP_LCD_GetXSize>
 80075b8:	4603      	mov	r3, r0
 80075ba:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80075bc:	f7ff ffc6 	bl	800754c <BSP_LCD_GetYSize>
 80075c0:	4603      	mov	r3, r0
 80075c2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80075c4:	88fa      	ldrh	r2, [r7, #6]
 80075c6:	f107 030c 	add.w	r3, r7, #12
 80075ca:	4619      	mov	r1, r3
 80075cc:	4814      	ldr	r0, [pc, #80]	; (8007620 <BSP_LCD_LayerDefaultInit+0xbc>)
 80075ce:	f7fc fa5d 	bl	8003a8c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80075d2:	88fa      	ldrh	r2, [r7, #6]
 80075d4:	4913      	ldr	r1, [pc, #76]	; (8007624 <BSP_LCD_LayerDefaultInit+0xc0>)
 80075d6:	4613      	mov	r3, r2
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	440b      	add	r3, r1
 80075e0:	3304      	adds	r3, #4
 80075e2:	f04f 32ff 	mov.w	r2, #4294967295
 80075e6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &LCD_DEFAULT_FONT;
 80075e8:	88fa      	ldrh	r2, [r7, #6]
 80075ea:	490e      	ldr	r1, [pc, #56]	; (8007624 <BSP_LCD_LayerDefaultInit+0xc0>)
 80075ec:	4613      	mov	r3, r2
 80075ee:	005b      	lsls	r3, r3, #1
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	440b      	add	r3, r1
 80075f6:	3308      	adds	r3, #8
 80075f8:	4a0b      	ldr	r2, [pc, #44]	; (8007628 <BSP_LCD_LayerDefaultInit+0xc4>)
 80075fa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80075fc:	88fa      	ldrh	r2, [r7, #6]
 80075fe:	4909      	ldr	r1, [pc, #36]	; (8007624 <BSP_LCD_LayerDefaultInit+0xc0>)
 8007600:	4613      	mov	r3, r2
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800760e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8007610:	4803      	ldr	r0, [pc, #12]	; (8007620 <BSP_LCD_LayerDefaultInit+0xbc>)
 8007612:	f7fc fa79 	bl	8003b08 <HAL_LTDC_EnableDither>
}
 8007616:	bf00      	nop
 8007618:	3740      	adds	r7, #64	; 0x40
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	2000062c 	.word	0x2000062c
 8007624:	20000748 	.word	0x20000748
 8007628:	20000060 	.word	0x20000060

0800762c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8007634:	4a04      	ldr	r2, [pc, #16]	; (8007648 <BSP_LCD_SelectLayer+0x1c>)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6013      	str	r3, [r2, #0]
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	20000744 	.word	0x20000744

0800764c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8007654:	4b07      	ldr	r3, [pc, #28]	; (8007674 <BSP_LCD_SetTextColor+0x28>)
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	4907      	ldr	r1, [pc, #28]	; (8007678 <BSP_LCD_SetTextColor+0x2c>)
 800765a:	4613      	mov	r3, r2
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	4413      	add	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	440b      	add	r3, r1
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	601a      	str	r2, [r3, #0]
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	20000744 	.word	0x20000744
 8007678:	20000748 	.word	0x20000748

0800767c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8007684:	4b08      	ldr	r3, [pc, #32]	; (80076a8 <BSP_LCD_SetBackColor+0x2c>)
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	4908      	ldr	r1, [pc, #32]	; (80076ac <BSP_LCD_SetBackColor+0x30>)
 800768a:	4613      	mov	r3, r2
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	440b      	add	r3, r1
 8007694:	3304      	adds	r3, #4
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	601a      	str	r2, [r3, #0]
}
 800769a:	bf00      	nop
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	20000744 	.word	0x20000744
 80076ac:	20000748 	.word	0x20000748

080076b0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80076b8:	4b08      	ldr	r3, [pc, #32]	; (80076dc <BSP_LCD_SetFont+0x2c>)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	4908      	ldr	r1, [pc, #32]	; (80076e0 <BSP_LCD_SetFont+0x30>)
 80076be:	4613      	mov	r3, r2
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	4413      	add	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	440b      	add	r3, r1
 80076c8:	3308      	adds	r3, #8
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	601a      	str	r2, [r3, #0]
}
 80076ce:	bf00      	nop
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	20000744 	.word	0x20000744
 80076e0:	20000748 	.word	0x20000748

080076e4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80076e4:	b480      	push	{r7}
 80076e6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80076e8:	4b07      	ldr	r3, [pc, #28]	; (8007708 <BSP_LCD_GetFont+0x24>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	4907      	ldr	r1, [pc, #28]	; (800770c <BSP_LCD_GetFont+0x28>)
 80076ee:	4613      	mov	r3, r2
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	440b      	add	r3, r1
 80076f8:	3308      	adds	r3, #8
 80076fa:	681b      	ldr	r3, [r3, #0]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	20000744 	.word	0x20000744
 800770c:	20000748 	.word	0x20000748

08007710 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8007710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007712:	b085      	sub	sp, #20
 8007714:	af02      	add	r7, sp, #8
 8007716:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8007718:	4b0f      	ldr	r3, [pc, #60]	; (8007758 <BSP_LCD_Clear+0x48>)
 800771a:	681c      	ldr	r4, [r3, #0]
 800771c:	4b0e      	ldr	r3, [pc, #56]	; (8007758 <BSP_LCD_Clear+0x48>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a0e      	ldr	r2, [pc, #56]	; (800775c <BSP_LCD_Clear+0x4c>)
 8007722:	2134      	movs	r1, #52	; 0x34
 8007724:	fb01 f303 	mul.w	r3, r1, r3
 8007728:	4413      	add	r3, r2
 800772a:	335c      	adds	r3, #92	; 0x5c
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	461e      	mov	r6, r3
 8007730:	f7ff ff00 	bl	8007534 <BSP_LCD_GetXSize>
 8007734:	4605      	mov	r5, r0
 8007736:	f7ff ff09 	bl	800754c <BSP_LCD_GetYSize>
 800773a:	4602      	mov	r2, r0
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	2300      	movs	r3, #0
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	4613      	mov	r3, r2
 8007746:	462a      	mov	r2, r5
 8007748:	4631      	mov	r1, r6
 800774a:	4620      	mov	r0, r4
 800774c:	f000 fbf4 	bl	8007f38 <FillBuffer>
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007758:	20000744 	.word	0x20000744
 800775c:	2000062c 	.word	0x2000062c

08007760 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8007760:	b590      	push	{r4, r7, lr}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	80fb      	strh	r3, [r7, #6]
 800776a:	460b      	mov	r3, r1
 800776c:	80bb      	strh	r3, [r7, #4]
 800776e:	4613      	mov	r3, r2
 8007770:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8007772:	4b1b      	ldr	r3, [pc, #108]	; (80077e0 <BSP_LCD_DisplayChar+0x80>)
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	491b      	ldr	r1, [pc, #108]	; (80077e4 <BSP_LCD_DisplayChar+0x84>)
 8007778:	4613      	mov	r3, r2
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	3308      	adds	r3, #8
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6819      	ldr	r1, [r3, #0]
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800778e:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <BSP_LCD_DisplayChar+0x80>)
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	4c14      	ldr	r4, [pc, #80]	; (80077e4 <BSP_LCD_DisplayChar+0x84>)
 8007794:	4613      	mov	r3, r2
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4423      	add	r3, r4
 800779e:	3308      	adds	r3, #8
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80077a4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80077a8:	4b0d      	ldr	r3, [pc, #52]	; (80077e0 <BSP_LCD_DisplayChar+0x80>)
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	4c0d      	ldr	r4, [pc, #52]	; (80077e4 <BSP_LCD_DisplayChar+0x84>)
 80077ae:	4613      	mov	r3, r2
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	4413      	add	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4423      	add	r3, r4
 80077b8:	3308      	adds	r3, #8
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	889b      	ldrh	r3, [r3, #4]
 80077be:	3307      	adds	r3, #7
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	da00      	bge.n	80077c6 <BSP_LCD_DisplayChar+0x66>
 80077c4:	3307      	adds	r3, #7
 80077c6:	10db      	asrs	r3, r3, #3
 80077c8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80077cc:	18ca      	adds	r2, r1, r3
 80077ce:	88b9      	ldrh	r1, [r7, #4]
 80077d0:	88fb      	ldrh	r3, [r7, #6]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 faf6 	bl	8007dc4 <DrawChar>
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd90      	pop	{r4, r7, pc}
 80077e0:	20000744 	.word	0x20000744
 80077e4:	20000748 	.word	0x20000748

080077e8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80077e8:	b5b0      	push	{r4, r5, r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60ba      	str	r2, [r7, #8]
 80077f0:	461a      	mov	r2, r3
 80077f2:	4603      	mov	r3, r0
 80077f4:	81fb      	strh	r3, [r7, #14]
 80077f6:	460b      	mov	r3, r1
 80077f8:	81bb      	strh	r3, [r7, #12]
 80077fa:	4613      	mov	r3, r2
 80077fc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80077fe:	2301      	movs	r3, #1
 8007800:	83fb      	strh	r3, [r7, #30]
 8007802:	2300      	movs	r3, #0
 8007804:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8007806:	2300      	movs	r3, #0
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	2300      	movs	r3, #0
 800780c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8007812:	e002      	b.n	800781a <BSP_LCD_DisplayStringAt+0x32>
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	3301      	adds	r3, #1
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	1c5a      	adds	r2, r3, #1
 800781e:	617a      	str	r2, [r7, #20]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1f6      	bne.n	8007814 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8007826:	f7ff fe85 	bl	8007534 <BSP_LCD_GetXSize>
 800782a:	4601      	mov	r1, r0
 800782c:	4b4b      	ldr	r3, [pc, #300]	; (800795c <BSP_LCD_DisplayStringAt+0x174>)
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	484b      	ldr	r0, [pc, #300]	; (8007960 <BSP_LCD_DisplayStringAt+0x178>)
 8007832:	4613      	mov	r3, r2
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4403      	add	r3, r0
 800783c:	3308      	adds	r3, #8
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	889b      	ldrh	r3, [r3, #4]
 8007842:	fbb1 f3f3 	udiv	r3, r1, r3
 8007846:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	2b03      	cmp	r3, #3
 800784c:	d01c      	beq.n	8007888 <BSP_LCD_DisplayStringAt+0xa0>
 800784e:	2b03      	cmp	r3, #3
 8007850:	dc33      	bgt.n	80078ba <BSP_LCD_DisplayStringAt+0xd2>
 8007852:	2b01      	cmp	r3, #1
 8007854:	d002      	beq.n	800785c <BSP_LCD_DisplayStringAt+0x74>
 8007856:	2b02      	cmp	r3, #2
 8007858:	d019      	beq.n	800788e <BSP_LCD_DisplayStringAt+0xa6>
 800785a:	e02e      	b.n	80078ba <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	1ad1      	subs	r1, r2, r3
 8007862:	4b3e      	ldr	r3, [pc, #248]	; (800795c <BSP_LCD_DisplayStringAt+0x174>)
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	483e      	ldr	r0, [pc, #248]	; (8007960 <BSP_LCD_DisplayStringAt+0x178>)
 8007868:	4613      	mov	r3, r2
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4403      	add	r3, r0
 8007872:	3308      	adds	r3, #8
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	889b      	ldrh	r3, [r3, #4]
 8007878:	fb01 f303 	mul.w	r3, r1, r3
 800787c:	085b      	lsrs	r3, r3, #1
 800787e:	b29a      	uxth	r2, r3
 8007880:	89fb      	ldrh	r3, [r7, #14]
 8007882:	4413      	add	r3, r2
 8007884:	83fb      	strh	r3, [r7, #30]
      break;
 8007886:	e01b      	b.n	80078c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8007888:	89fb      	ldrh	r3, [r7, #14]
 800788a:	83fb      	strh	r3, [r7, #30]
      break;
 800788c:	e018      	b.n	80078c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	b299      	uxth	r1, r3
 8007896:	4b31      	ldr	r3, [pc, #196]	; (800795c <BSP_LCD_DisplayStringAt+0x174>)
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	4831      	ldr	r0, [pc, #196]	; (8007960 <BSP_LCD_DisplayStringAt+0x178>)
 800789c:	4613      	mov	r3, r2
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	4413      	add	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4403      	add	r3, r0
 80078a6:	3308      	adds	r3, #8
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	889b      	ldrh	r3, [r3, #4]
 80078ac:	fb11 f303 	smulbb	r3, r1, r3
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	89fb      	ldrh	r3, [r7, #14]
 80078b4:	4413      	add	r3, r2
 80078b6:	83fb      	strh	r3, [r7, #30]
      break;
 80078b8:	e002      	b.n	80078c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80078ba:	89fb      	ldrh	r3, [r7, #14]
 80078bc:	83fb      	strh	r3, [r7, #30]
      break;
 80078be:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80078c0:	e01a      	b.n	80078f8 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	781a      	ldrb	r2, [r3, #0]
 80078c6:	89b9      	ldrh	r1, [r7, #12]
 80078c8:	8bfb      	ldrh	r3, [r7, #30]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff ff48 	bl	8007760 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80078d0:	4b22      	ldr	r3, [pc, #136]	; (800795c <BSP_LCD_DisplayStringAt+0x174>)
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	4922      	ldr	r1, [pc, #136]	; (8007960 <BSP_LCD_DisplayStringAt+0x178>)
 80078d6:	4613      	mov	r3, r2
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	4413      	add	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	440b      	add	r3, r1
 80078e0:	3308      	adds	r3, #8
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	889a      	ldrh	r2, [r3, #4]
 80078e6:	8bfb      	ldrh	r3, [r7, #30]
 80078e8:	4413      	add	r3, r2
 80078ea:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	3301      	adds	r3, #1
 80078f0:	60bb      	str	r3, [r7, #8]
    i++;
 80078f2:	8bbb      	ldrh	r3, [r7, #28]
 80078f4:	3301      	adds	r3, #1
 80078f6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bf14      	ite	ne
 8007900:	2301      	movne	r3, #1
 8007902:	2300      	moveq	r3, #0
 8007904:	b2dc      	uxtb	r4, r3
 8007906:	f7ff fe15 	bl	8007534 <BSP_LCD_GetXSize>
 800790a:	8bb9      	ldrh	r1, [r7, #28]
 800790c:	4b13      	ldr	r3, [pc, #76]	; (800795c <BSP_LCD_DisplayStringAt+0x174>)
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	4d13      	ldr	r5, [pc, #76]	; (8007960 <BSP_LCD_DisplayStringAt+0x178>)
 8007912:	4613      	mov	r3, r2
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	442b      	add	r3, r5
 800791c:	3308      	adds	r3, #8
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	889b      	ldrh	r3, [r3, #4]
 8007922:	fb01 f303 	mul.w	r3, r1, r3
 8007926:	1ac3      	subs	r3, r0, r3
 8007928:	b299      	uxth	r1, r3
 800792a:	4b0c      	ldr	r3, [pc, #48]	; (800795c <BSP_LCD_DisplayStringAt+0x174>)
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	480c      	ldr	r0, [pc, #48]	; (8007960 <BSP_LCD_DisplayStringAt+0x178>)
 8007930:	4613      	mov	r3, r2
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	4413      	add	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4403      	add	r3, r0
 800793a:	3308      	adds	r3, #8
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	889b      	ldrh	r3, [r3, #4]
 8007940:	4299      	cmp	r1, r3
 8007942:	bf2c      	ite	cs
 8007944:	2301      	movcs	r3, #1
 8007946:	2300      	movcc	r3, #0
 8007948:	b2db      	uxtb	r3, r3
 800794a:	4023      	ands	r3, r4
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1b7      	bne.n	80078c2 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8007952:	bf00      	nop
 8007954:	bf00      	nop
 8007956:	3720      	adds	r7, #32
 8007958:	46bd      	mov	sp, r7
 800795a:	bdb0      	pop	{r4, r5, r7, pc}
 800795c:	20000744 	.word	0x20000744
 8007960:	20000748 	.word	0x20000748

08007964 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	4603      	mov	r3, r0
 800796c:	6039      	str	r1, [r7, #0]
 800796e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8007970:	f7ff feb8 	bl	80076e4 <BSP_LCD_GetFont>
 8007974:	4603      	mov	r3, r0
 8007976:	88db      	ldrh	r3, [r3, #6]
 8007978:	88fa      	ldrh	r2, [r7, #6]
 800797a:	fb12 f303 	smulbb	r3, r2, r3
 800797e:	b299      	uxth	r1, r3
 8007980:	2303      	movs	r3, #3
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	2000      	movs	r0, #0
 8007986:	f7ff ff2f 	bl	80077e8 <BSP_LCD_DisplayStringAt>
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8007994:	b5b0      	push	{r4, r5, r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af02      	add	r7, sp, #8
 800799a:	4603      	mov	r3, r0
 800799c:	80fb      	strh	r3, [r7, #6]
 800799e:	460b      	mov	r3, r1
 80079a0:	80bb      	strh	r3, [r7, #4]
 80079a2:	4613      	mov	r3, r2
 80079a4:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80079aa:	4b16      	ldr	r3, [pc, #88]	; (8007a04 <BSP_LCD_DrawHLine+0x70>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a16      	ldr	r2, [pc, #88]	; (8007a08 <BSP_LCD_DrawHLine+0x74>)
 80079b0:	2134      	movs	r1, #52	; 0x34
 80079b2:	fb01 f303 	mul.w	r3, r1, r3
 80079b6:	4413      	add	r3, r2
 80079b8:	335c      	adds	r3, #92	; 0x5c
 80079ba:	681c      	ldr	r4, [r3, #0]
 80079bc:	f7ff fdba 	bl	8007534 <BSP_LCD_GetXSize>
 80079c0:	4602      	mov	r2, r0
 80079c2:	88bb      	ldrh	r3, [r7, #4]
 80079c4:	fb03 f202 	mul.w	r2, r3, r2
 80079c8:	88fb      	ldrh	r3, [r7, #6]
 80079ca:	4413      	add	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4423      	add	r3, r4
 80079d0:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80079d2:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <BSP_LCD_DrawHLine+0x70>)
 80079d4:	6818      	ldr	r0, [r3, #0]
 80079d6:	68f9      	ldr	r1, [r7, #12]
 80079d8:	887c      	ldrh	r4, [r7, #2]
 80079da:	4b0a      	ldr	r3, [pc, #40]	; (8007a04 <BSP_LCD_DrawHLine+0x70>)
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4d0b      	ldr	r5, [pc, #44]	; (8007a0c <BSP_LCD_DrawHLine+0x78>)
 80079e0:	4613      	mov	r3, r2
 80079e2:	005b      	lsls	r3, r3, #1
 80079e4:	4413      	add	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	442b      	add	r3, r5
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	2300      	movs	r3, #0
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	2301      	movs	r3, #1
 80079f4:	4622      	mov	r2, r4
 80079f6:	f000 fa9f 	bl	8007f38 <FillBuffer>
}
 80079fa:	bf00      	nop
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bdb0      	pop	{r4, r5, r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20000744 	.word	0x20000744
 8007a08:	2000062c 	.word	0x2000062c
 8007a0c:	20000748 	.word	0x20000748

08007a10 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8007a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af02      	add	r7, sp, #8
 8007a16:	4603      	mov	r3, r0
 8007a18:	80fb      	strh	r3, [r7, #6]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	80bb      	strh	r3, [r7, #4]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8007a26:	4b18      	ldr	r3, [pc, #96]	; (8007a88 <BSP_LCD_DrawVLine+0x78>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a18      	ldr	r2, [pc, #96]	; (8007a8c <BSP_LCD_DrawVLine+0x7c>)
 8007a2c:	2134      	movs	r1, #52	; 0x34
 8007a2e:	fb01 f303 	mul.w	r3, r1, r3
 8007a32:	4413      	add	r3, r2
 8007a34:	335c      	adds	r3, #92	; 0x5c
 8007a36:	681c      	ldr	r4, [r3, #0]
 8007a38:	f7ff fd7c 	bl	8007534 <BSP_LCD_GetXSize>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	88bb      	ldrh	r3, [r7, #4]
 8007a40:	fb03 f202 	mul.w	r2, r3, r2
 8007a44:	88fb      	ldrh	r3, [r7, #6]
 8007a46:	4413      	add	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4423      	add	r3, r4
 8007a4c:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8007a4e:	4b0e      	ldr	r3, [pc, #56]	; (8007a88 <BSP_LCD_DrawVLine+0x78>)
 8007a50:	681c      	ldr	r4, [r3, #0]
 8007a52:	68fd      	ldr	r5, [r7, #12]
 8007a54:	887e      	ldrh	r6, [r7, #2]
 8007a56:	f7ff fd6d 	bl	8007534 <BSP_LCD_GetXSize>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	1e59      	subs	r1, r3, #1
 8007a5e:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <BSP_LCD_DrawVLine+0x78>)
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	480b      	ldr	r0, [pc, #44]	; (8007a90 <BSP_LCD_DrawVLine+0x80>)
 8007a64:	4613      	mov	r3, r2
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	4413      	add	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4403      	add	r3, r0
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	9100      	str	r1, [sp, #0]
 8007a74:	4633      	mov	r3, r6
 8007a76:	2201      	movs	r2, #1
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 fa5c 	bl	8007f38 <FillBuffer>
}
 8007a80:	bf00      	nop
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a88:	20000744 	.word	0x20000744
 8007a8c:	2000062c 	.word	0x2000062c
 8007a90:	20000748 	.word	0x20000748

08007a94 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8007a94:	b590      	push	{r4, r7, lr}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	4608      	mov	r0, r1
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4623      	mov	r3, r4
 8007aa4:	80fb      	strh	r3, [r7, #6]
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	80bb      	strh	r3, [r7, #4]
 8007aaa:	460b      	mov	r3, r1
 8007aac:	807b      	strh	r3, [r7, #2]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8007ab2:	887a      	ldrh	r2, [r7, #2]
 8007ab4:	88b9      	ldrh	r1, [r7, #4]
 8007ab6:	88fb      	ldrh	r3, [r7, #6]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff ff6b 	bl	8007994 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8007abe:	88ba      	ldrh	r2, [r7, #4]
 8007ac0:	883b      	ldrh	r3, [r7, #0]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	b299      	uxth	r1, r3
 8007ac6:	887a      	ldrh	r2, [r7, #2]
 8007ac8:	88fb      	ldrh	r3, [r7, #6]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7ff ff62 	bl	8007994 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8007ad0:	883a      	ldrh	r2, [r7, #0]
 8007ad2:	88b9      	ldrh	r1, [r7, #4]
 8007ad4:	88fb      	ldrh	r3, [r7, #6]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff ff9a 	bl	8007a10 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8007adc:	88fa      	ldrh	r2, [r7, #6]
 8007ade:	887b      	ldrh	r3, [r7, #2]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	883a      	ldrh	r2, [r7, #0]
 8007ae6:	88b9      	ldrh	r1, [r7, #4]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7ff ff91 	bl	8007a10 <BSP_LCD_DrawVLine>
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd90      	pop	{r4, r7, pc}
	...

08007af8 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8007af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007afc:	b086      	sub	sp, #24
 8007afe:	af02      	add	r7, sp, #8
 8007b00:	4604      	mov	r4, r0
 8007b02:	4608      	mov	r0, r1
 8007b04:	4611      	mov	r1, r2
 8007b06:	461a      	mov	r2, r3
 8007b08:	4623      	mov	r3, r4
 8007b0a:	80fb      	strh	r3, [r7, #6]
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	80bb      	strh	r3, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	807b      	strh	r3, [r7, #2]
 8007b14:	4613      	mov	r3, r2
 8007b16:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8007b1c:	4b20      	ldr	r3, [pc, #128]	; (8007ba0 <BSP_LCD_FillRect+0xa8>)
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	4920      	ldr	r1, [pc, #128]	; (8007ba4 <BSP_LCD_FillRect+0xac>)
 8007b22:	4613      	mov	r3, r2
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff fd8c 	bl	800764c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8007b34:	4b1a      	ldr	r3, [pc, #104]	; (8007ba0 <BSP_LCD_FillRect+0xa8>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a1b      	ldr	r2, [pc, #108]	; (8007ba8 <BSP_LCD_FillRect+0xb0>)
 8007b3a:	2134      	movs	r1, #52	; 0x34
 8007b3c:	fb01 f303 	mul.w	r3, r1, r3
 8007b40:	4413      	add	r3, r2
 8007b42:	335c      	adds	r3, #92	; 0x5c
 8007b44:	681c      	ldr	r4, [r3, #0]
 8007b46:	f7ff fcf5 	bl	8007534 <BSP_LCD_GetXSize>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	88bb      	ldrh	r3, [r7, #4]
 8007b4e:	fb03 f202 	mul.w	r2, r3, r2
 8007b52:	88fb      	ldrh	r3, [r7, #6]
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4423      	add	r3, r4
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8007b5c:	4b10      	ldr	r3, [pc, #64]	; (8007ba0 <BSP_LCD_FillRect+0xa8>)
 8007b5e:	681c      	ldr	r4, [r3, #0]
 8007b60:	68fd      	ldr	r5, [r7, #12]
 8007b62:	887e      	ldrh	r6, [r7, #2]
 8007b64:	f8b7 8000 	ldrh.w	r8, [r7]
 8007b68:	f7ff fce4 	bl	8007534 <BSP_LCD_GetXSize>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	887b      	ldrh	r3, [r7, #2]
 8007b70:	1ad1      	subs	r1, r2, r3
 8007b72:	4b0b      	ldr	r3, [pc, #44]	; (8007ba0 <BSP_LCD_FillRect+0xa8>)
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	480b      	ldr	r0, [pc, #44]	; (8007ba4 <BSP_LCD_FillRect+0xac>)
 8007b78:	4613      	mov	r3, r2
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4403      	add	r3, r0
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	9301      	str	r3, [sp, #4]
 8007b86:	9100      	str	r1, [sp, #0]
 8007b88:	4643      	mov	r3, r8
 8007b8a:	4632      	mov	r2, r6
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f000 f9d2 	bl	8007f38 <FillBuffer>
}
 8007b94:	bf00      	nop
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20000744 	.word	0x20000744
 8007ba4:	20000748 	.word	0x20000748
 8007ba8:	2000062c 	.word	0x2000062c

08007bac <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8007bb0:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <BSP_LCD_DisplayOn+0x1c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8007bba:	4b03      	ldr	r3, [pc, #12]	; (8007bc8 <BSP_LCD_DisplayOn+0x1c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	4798      	blx	r3
  }
}
 8007bc2:	bf00      	nop
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20000760 	.word	0x20000760

08007bcc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08e      	sub	sp, #56	; 0x38
 8007bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	623b      	str	r3, [r7, #32]
 8007bd6:	4b61      	ldr	r3, [pc, #388]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bda:	4a60      	ldr	r2, [pc, #384]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007bdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007be0:	6453      	str	r3, [r2, #68]	; 0x44
 8007be2:	4b5e      	ldr	r3, [pc, #376]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bea:	623b      	str	r3, [r7, #32]
 8007bec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8007bee:	2300      	movs	r3, #0
 8007bf0:	61fb      	str	r3, [r7, #28]
 8007bf2:	4b5a      	ldr	r3, [pc, #360]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf6:	4a59      	ldr	r2, [pc, #356]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007bf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8007bfe:	4b57      	ldr	r3, [pc, #348]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c06:	61fb      	str	r3, [r7, #28]
 8007c08:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61bb      	str	r3, [r7, #24]
 8007c0e:	4b53      	ldr	r3, [pc, #332]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c12:	4a52      	ldr	r2, [pc, #328]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c14:	f043 0301 	orr.w	r3, r3, #1
 8007c18:	6313      	str	r3, [r2, #48]	; 0x30
 8007c1a:	4b50      	ldr	r3, [pc, #320]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	61bb      	str	r3, [r7, #24]
 8007c24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c26:	2300      	movs	r3, #0
 8007c28:	617b      	str	r3, [r7, #20]
 8007c2a:	4b4c      	ldr	r3, [pc, #304]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2e:	4a4b      	ldr	r2, [pc, #300]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c30:	f043 0302 	orr.w	r3, r3, #2
 8007c34:	6313      	str	r3, [r2, #48]	; 0x30
 8007c36:	4b49      	ldr	r3, [pc, #292]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c42:	2300      	movs	r3, #0
 8007c44:	613b      	str	r3, [r7, #16]
 8007c46:	4b45      	ldr	r3, [pc, #276]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4a:	4a44      	ldr	r2, [pc, #272]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c4c:	f043 0304 	orr.w	r3, r3, #4
 8007c50:	6313      	str	r3, [r2, #48]	; 0x30
 8007c52:	4b42      	ldr	r3, [pc, #264]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c56:	f003 0304 	and.w	r3, r3, #4
 8007c5a:	613b      	str	r3, [r7, #16]
 8007c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60fb      	str	r3, [r7, #12]
 8007c62:	4b3e      	ldr	r3, [pc, #248]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c66:	4a3d      	ldr	r2, [pc, #244]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c68:	f043 0308 	orr.w	r3, r3, #8
 8007c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c6e:	4b3b      	ldr	r3, [pc, #236]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c72:	f003 0308 	and.w	r3, r3, #8
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60bb      	str	r3, [r7, #8]
 8007c7e:	4b37      	ldr	r3, [pc, #220]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c82:	4a36      	ldr	r2, [pc, #216]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c84:	f043 0320 	orr.w	r3, r3, #32
 8007c88:	6313      	str	r3, [r2, #48]	; 0x30
 8007c8a:	4b34      	ldr	r3, [pc, #208]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8e:	f003 0320 	and.w	r3, r3, #32
 8007c92:	60bb      	str	r3, [r7, #8]
 8007c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007c96:	2300      	movs	r3, #0
 8007c98:	607b      	str	r3, [r7, #4]
 8007c9a:	4b30      	ldr	r3, [pc, #192]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	4a2f      	ldr	r2, [pc, #188]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ca6:	4b2d      	ldr	r3, [pc, #180]	; (8007d5c <BSP_LCD_MspInit+0x190>)
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cae:	607b      	str	r3, [r7, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8007cb2:	f641 0358 	movw	r3, #6232	; 0x1858
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8007cb8:	2302      	movs	r3, #2
 8007cba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8007cc4:	230e      	movs	r3, #14
 8007cc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8007cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4824      	ldr	r0, [pc, #144]	; (8007d60 <BSP_LCD_MspInit+0x194>)
 8007cd0:	f7fb f8a0 	bl	8002e14 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8007cd4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4820      	ldr	r0, [pc, #128]	; (8007d64 <BSP_LCD_MspInit+0x198>)
 8007ce2:	f7fb f897 	bl	8002e14 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8007ce6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8007cea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8007cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	481d      	ldr	r0, [pc, #116]	; (8007d68 <BSP_LCD_MspInit+0x19c>)
 8007cf4:	f7fb f88e 	bl	8002e14 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8007cf8:	2348      	movs	r3, #72	; 0x48
 8007cfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8007cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d00:	4619      	mov	r1, r3
 8007d02:	481a      	ldr	r0, [pc, #104]	; (8007d6c <BSP_LCD_MspInit+0x1a0>)
 8007d04:	f7fb f886 	bl	8002e14 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8007d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8007d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d12:	4619      	mov	r1, r3
 8007d14:	4816      	ldr	r0, [pc, #88]	; (8007d70 <BSP_LCD_MspInit+0x1a4>)
 8007d16:	f7fb f87d 	bl	8002e14 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8007d1a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8007d1e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8007d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d24:	4619      	mov	r1, r3
 8007d26:	4813      	ldr	r0, [pc, #76]	; (8007d74 <BSP_LCD_MspInit+0x1a8>)
 8007d28:	f7fb f874 	bl	8002e14 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8007d30:	2309      	movs	r3, #9
 8007d32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d38:	4619      	mov	r1, r3
 8007d3a:	480a      	ldr	r0, [pc, #40]	; (8007d64 <BSP_LCD_MspInit+0x198>)
 8007d3c:	f7fb f86a 	bl	8002e14 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8007d40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007d44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8007d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	4809      	ldr	r0, [pc, #36]	; (8007d74 <BSP_LCD_MspInit+0x1a8>)
 8007d4e:	f7fb f861 	bl	8002e14 <HAL_GPIO_Init>
}
 8007d52:	bf00      	nop
 8007d54:	3738      	adds	r7, #56	; 0x38
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	40023800 	.word	0x40023800
 8007d60:	40020000 	.word	0x40020000
 8007d64:	40020400 	.word	0x40020400
 8007d68:	40020800 	.word	0x40020800
 8007d6c:	40020c00 	.word	0x40020c00
 8007d70:	40021400 	.word	0x40021400
 8007d74:	40021800 	.word	0x40021800

08007d78 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8007d78:	b5b0      	push	{r4, r5, r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	603a      	str	r2, [r7, #0]
 8007d82:	80fb      	strh	r3, [r7, #6]
 8007d84:	460b      	mov	r3, r1
 8007d86:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8007d88:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <BSP_LCD_DrawPixel+0x44>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a0c      	ldr	r2, [pc, #48]	; (8007dc0 <BSP_LCD_DrawPixel+0x48>)
 8007d8e:	2134      	movs	r1, #52	; 0x34
 8007d90:	fb01 f303 	mul.w	r3, r1, r3
 8007d94:	4413      	add	r3, r2
 8007d96:	335c      	adds	r3, #92	; 0x5c
 8007d98:	681c      	ldr	r4, [r3, #0]
 8007d9a:	88bd      	ldrh	r5, [r7, #4]
 8007d9c:	f7ff fbca 	bl	8007534 <BSP_LCD_GetXSize>
 8007da0:	4603      	mov	r3, r0
 8007da2:	fb03 f205 	mul.w	r2, r3, r5
 8007da6:	88fb      	ldrh	r3, [r7, #6]
 8007da8:	4413      	add	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4423      	add	r3, r4
 8007dae:	461a      	mov	r2, r3
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	6013      	str	r3, [r2, #0]
}
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bdb0      	pop	{r4, r5, r7, pc}
 8007dbc:	20000744 	.word	0x20000744
 8007dc0:	2000062c 	.word	0x2000062c

08007dc4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b088      	sub	sp, #32
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	4603      	mov	r3, r0
 8007dcc:	603a      	str	r2, [r7, #0]
 8007dce:	80fb      	strh	r3, [r7, #6]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	61fb      	str	r3, [r7, #28]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8007de0:	4b53      	ldr	r3, [pc, #332]	; (8007f30 <DrawChar+0x16c>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	4953      	ldr	r1, [pc, #332]	; (8007f34 <DrawChar+0x170>)
 8007de6:	4613      	mov	r3, r2
 8007de8:	005b      	lsls	r3, r3, #1
 8007dea:	4413      	add	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	440b      	add	r3, r1
 8007df0:	3308      	adds	r3, #8
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	88db      	ldrh	r3, [r3, #6]
 8007df6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8007df8:	4b4d      	ldr	r3, [pc, #308]	; (8007f30 <DrawChar+0x16c>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	494d      	ldr	r1, [pc, #308]	; (8007f34 <DrawChar+0x170>)
 8007dfe:	4613      	mov	r3, r2
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	4413      	add	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	440b      	add	r3, r1
 8007e08:	3308      	adds	r3, #8
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	889b      	ldrh	r3, [r3, #4]
 8007e0e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8007e10:	8a3b      	ldrh	r3, [r7, #16]
 8007e12:	3307      	adds	r3, #7
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	da00      	bge.n	8007e1a <DrawChar+0x56>
 8007e18:	3307      	adds	r3, #7
 8007e1a:	10db      	asrs	r3, r3, #3
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	8a3b      	ldrh	r3, [r7, #16]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	61fb      	str	r3, [r7, #28]
 8007e2e:	e076      	b.n	8007f1e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8007e30:	8a3b      	ldrh	r3, [r7, #16]
 8007e32:	3307      	adds	r3, #7
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	da00      	bge.n	8007e3a <DrawChar+0x76>
 8007e38:	3307      	adds	r3, #7
 8007e3a:	10db      	asrs	r3, r3, #3
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	fb02 f303 	mul.w	r3, r2, r3
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	4413      	add	r3, r2
 8007e48:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8007e4a:	8a3b      	ldrh	r3, [r7, #16]
 8007e4c:	3307      	adds	r3, #7
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	da00      	bge.n	8007e54 <DrawChar+0x90>
 8007e52:	3307      	adds	r3, #7
 8007e54:	10db      	asrs	r3, r3, #3
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d002      	beq.n	8007e60 <DrawChar+0x9c>
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d004      	beq.n	8007e68 <DrawChar+0xa4>
 8007e5e:	e00c      	b.n	8007e7a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	617b      	str	r3, [r7, #20]
      break;
 8007e66:	e016      	b.n	8007e96 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	3201      	adds	r2, #1
 8007e72:	7812      	ldrb	r2, [r2, #0]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	617b      	str	r3, [r7, #20]
      break;
 8007e78:	e00d      	b.n	8007e96 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	041a      	lsls	r2, r3, #16
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	3301      	adds	r3, #1
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	021b      	lsls	r3, r3, #8
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	3202      	adds	r2, #2
 8007e8e:	7812      	ldrb	r2, [r2, #0]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	617b      	str	r3, [r7, #20]
      break;
 8007e94:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8007e96:	2300      	movs	r3, #0
 8007e98:	61bb      	str	r3, [r7, #24]
 8007e9a:	e036      	b.n	8007f0a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8007e9c:	8a3a      	ldrh	r2, [r7, #16]
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	1ad2      	subs	r2, r2, r3
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007eae:	461a      	mov	r2, r3
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d012      	beq.n	8007ede <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	88fb      	ldrh	r3, [r7, #6]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	b298      	uxth	r0, r3
 8007ec2:	4b1b      	ldr	r3, [pc, #108]	; (8007f30 <DrawChar+0x16c>)
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	491b      	ldr	r1, [pc, #108]	; (8007f34 <DrawChar+0x170>)
 8007ec8:	4613      	mov	r3, r2
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	4413      	add	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	440b      	add	r3, r1
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	88bb      	ldrh	r3, [r7, #4]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	f7ff ff4e 	bl	8007d78 <BSP_LCD_DrawPixel>
 8007edc:	e012      	b.n	8007f04 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	88fb      	ldrh	r3, [r7, #6]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	b298      	uxth	r0, r3
 8007ee8:	4b11      	ldr	r3, [pc, #68]	; (8007f30 <DrawChar+0x16c>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	4911      	ldr	r1, [pc, #68]	; (8007f34 <DrawChar+0x170>)
 8007eee:	4613      	mov	r3, r2
 8007ef0:	005b      	lsls	r3, r3, #1
 8007ef2:	4413      	add	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	440b      	add	r3, r1
 8007ef8:	3304      	adds	r3, #4
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	88bb      	ldrh	r3, [r7, #4]
 8007efe:	4619      	mov	r1, r3
 8007f00:	f7ff ff3a 	bl	8007d78 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	3301      	adds	r3, #1
 8007f08:	61bb      	str	r3, [r7, #24]
 8007f0a:	8a3b      	ldrh	r3, [r7, #16]
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d3c4      	bcc.n	8007e9c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8007f12:	88bb      	ldrh	r3, [r7, #4]
 8007f14:	3301      	adds	r3, #1
 8007f16:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	61fb      	str	r3, [r7, #28]
 8007f1e:	8a7b      	ldrh	r3, [r7, #18]
 8007f20:	69fa      	ldr	r2, [r7, #28]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d384      	bcc.n	8007e30 <DrawChar+0x6c>
  }
}
 8007f26:	bf00      	nop
 8007f28:	bf00      	nop
 8007f2a:	3720      	adds	r7, #32
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	20000744 	.word	0x20000744
 8007f34:	20000748 	.word	0x20000748

08007f38 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af02      	add	r7, sp, #8
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8007f46:	4b16      	ldr	r3, [pc, #88]	; (8007fa0 <FillBuffer+0x68>)
 8007f48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007f4c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8007f4e:	4b14      	ldr	r3, [pc, #80]	; (8007fa0 <FillBuffer+0x68>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8007f54:	4a12      	ldr	r2, [pc, #72]	; (8007fa0 <FillBuffer+0x68>)
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8007f5a:	4b11      	ldr	r3, [pc, #68]	; (8007fa0 <FillBuffer+0x68>)
 8007f5c:	4a11      	ldr	r2, [pc, #68]	; (8007fa4 <FillBuffer+0x6c>)
 8007f5e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8007f60:	480f      	ldr	r0, [pc, #60]	; (8007fa0 <FillBuffer+0x68>)
 8007f62:	f7fa fccb 	bl	80028fc <HAL_DMA2D_Init>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d115      	bne.n	8007f98 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8007f6c:	68f9      	ldr	r1, [r7, #12]
 8007f6e:	480c      	ldr	r0, [pc, #48]	; (8007fa0 <FillBuffer+0x68>)
 8007f70:	f7fa fe22 	bl	8002bb8 <HAL_DMA2D_ConfigLayer>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10e      	bne.n	8007f98 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	69f9      	ldr	r1, [r7, #28]
 8007f84:	4806      	ldr	r0, [pc, #24]	; (8007fa0 <FillBuffer+0x68>)
 8007f86:	f7fa fd02 	bl	800298e <HAL_DMA2D_Start>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d103      	bne.n	8007f98 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8007f90:	210a      	movs	r1, #10
 8007f92:	4803      	ldr	r0, [pc, #12]	; (8007fa0 <FillBuffer+0x68>)
 8007f94:	f7fa fd26 	bl	80029e4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8007f98:	bf00      	nop
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	200006d4 	.word	0x200006d4
 8007fa4:	4002b000 	.word	0x4002b000

08007fa8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8007fac:	4b29      	ldr	r3, [pc, #164]	; (8008054 <BSP_SDRAM_Init+0xac>)
 8007fae:	4a2a      	ldr	r2, [pc, #168]	; (8008058 <BSP_SDRAM_Init+0xb0>)
 8007fb0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8007fb2:	4b2a      	ldr	r3, [pc, #168]	; (800805c <BSP_SDRAM_Init+0xb4>)
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8007fb8:	4b28      	ldr	r3, [pc, #160]	; (800805c <BSP_SDRAM_Init+0xb4>)
 8007fba:	2207      	movs	r2, #7
 8007fbc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8007fbe:	4b27      	ldr	r3, [pc, #156]	; (800805c <BSP_SDRAM_Init+0xb4>)
 8007fc0:	2204      	movs	r2, #4
 8007fc2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8007fc4:	4b25      	ldr	r3, [pc, #148]	; (800805c <BSP_SDRAM_Init+0xb4>)
 8007fc6:	2207      	movs	r2, #7
 8007fc8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8007fca:	4b24      	ldr	r3, [pc, #144]	; (800805c <BSP_SDRAM_Init+0xb4>)
 8007fcc:	2202      	movs	r2, #2
 8007fce:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8007fd0:	4b22      	ldr	r3, [pc, #136]	; (800805c <BSP_SDRAM_Init+0xb4>)
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8007fd6:	4b21      	ldr	r3, [pc, #132]	; (800805c <BSP_SDRAM_Init+0xb4>)
 8007fd8:	2202      	movs	r2, #2
 8007fda:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8007fdc:	4b1d      	ldr	r3, [pc, #116]	; (8008054 <BSP_SDRAM_Init+0xac>)
 8007fde:	2201      	movs	r2, #1
 8007fe0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8007fe2:	4b1c      	ldr	r3, [pc, #112]	; (8008054 <BSP_SDRAM_Init+0xac>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8007fe8:	4b1a      	ldr	r3, [pc, #104]	; (8008054 <BSP_SDRAM_Init+0xac>)
 8007fea:	2204      	movs	r2, #4
 8007fec:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8007fee:	4b19      	ldr	r3, [pc, #100]	; (8008054 <BSP_SDRAM_Init+0xac>)
 8007ff0:	2210      	movs	r2, #16
 8007ff2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007ff4:	4b17      	ldr	r3, [pc, #92]	; (8008054 <BSP_SDRAM_Init+0xac>)
 8007ff6:	2240      	movs	r2, #64	; 0x40
 8007ff8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8007ffa:	4b16      	ldr	r3, [pc, #88]	; (8008054 <BSP_SDRAM_Init+0xac>)
 8007ffc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8008000:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008002:	4b14      	ldr	r3, [pc, #80]	; (8008054 <BSP_SDRAM_Init+0xac>)
 8008004:	2200      	movs	r2, #0
 8008006:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8008008:	4b12      	ldr	r3, [pc, #72]	; (8008054 <BSP_SDRAM_Init+0xac>)
 800800a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800800e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8008010:	4b10      	ldr	r3, [pc, #64]	; (8008054 <BSP_SDRAM_Init+0xac>)
 8008012:	2200      	movs	r2, #0
 8008014:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8008016:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <BSP_SDRAM_Init+0xac>)
 8008018:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800801c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800801e:	2100      	movs	r1, #0
 8008020:	480c      	ldr	r0, [pc, #48]	; (8008054 <BSP_SDRAM_Init+0xac>)
 8008022:	f000 f87f 	bl	8008124 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8008026:	490d      	ldr	r1, [pc, #52]	; (800805c <BSP_SDRAM_Init+0xb4>)
 8008028:	480a      	ldr	r0, [pc, #40]	; (8008054 <BSP_SDRAM_Init+0xac>)
 800802a:	f7fd f8fd 	bl	8005228 <HAL_SDRAM_Init>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8008034:	4b0a      	ldr	r3, [pc, #40]	; (8008060 <BSP_SDRAM_Init+0xb8>)
 8008036:	2201      	movs	r2, #1
 8008038:	701a      	strb	r2, [r3, #0]
 800803a:	e002      	b.n	8008042 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800803c:	4b08      	ldr	r3, [pc, #32]	; (8008060 <BSP_SDRAM_Init+0xb8>)
 800803e:	2200      	movs	r2, #0
 8008040:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8008042:	f240 506a 	movw	r0, #1386	; 0x56a
 8008046:	f000 f80d 	bl	8008064 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800804a:	4b05      	ldr	r3, [pc, #20]	; (8008060 <BSP_SDRAM_Init+0xb8>)
 800804c:	781b      	ldrb	r3, [r3, #0]
}
 800804e:	4618      	mov	r0, r3
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20000764 	.word	0x20000764
 8008058:	a0000140 	.word	0xa0000140
 800805c:	20000798 	.word	0x20000798
 8008060:	200000a4 	.word	0x200000a4

08008064 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800806c:	2300      	movs	r3, #0
 800806e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8008070:	4b2a      	ldr	r3, [pc, #168]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008072:	2201      	movs	r2, #1
 8008074:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8008076:	4b29      	ldr	r3, [pc, #164]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008078:	2208      	movs	r2, #8
 800807a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800807c:	4b27      	ldr	r3, [pc, #156]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800807e:	2201      	movs	r2, #1
 8008080:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8008082:	4b26      	ldr	r3, [pc, #152]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008084:	2200      	movs	r2, #0
 8008086:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8008088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800808c:	4923      	ldr	r1, [pc, #140]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800808e:	4824      	ldr	r0, [pc, #144]	; (8008120 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8008090:	f7fd f8fe 	bl	8005290 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8008094:	2001      	movs	r0, #1
 8008096:	f7fa f93d 	bl	8002314 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800809a:	4b20      	ldr	r3, [pc, #128]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800809c:	2202      	movs	r2, #2
 800809e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80080a0:	4b1e      	ldr	r3, [pc, #120]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080a2:	2208      	movs	r2, #8
 80080a4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80080a6:	4b1d      	ldr	r3, [pc, #116]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080a8:	2201      	movs	r2, #1
 80080aa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80080ac:	4b1b      	ldr	r3, [pc, #108]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80080b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080b6:	4919      	ldr	r1, [pc, #100]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080b8:	4819      	ldr	r0, [pc, #100]	; (8008120 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80080ba:	f7fd f8e9 	bl	8005290 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80080be:	4b17      	ldr	r3, [pc, #92]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080c0:	2203      	movs	r2, #3
 80080c2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80080c4:	4b15      	ldr	r3, [pc, #84]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080c6:	2208      	movs	r2, #8
 80080c8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80080ca:	4b14      	ldr	r3, [pc, #80]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080cc:	2204      	movs	r2, #4
 80080ce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80080d0:	4b12      	ldr	r3, [pc, #72]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80080d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080da:	4910      	ldr	r1, [pc, #64]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080dc:	4810      	ldr	r0, [pc, #64]	; (8008120 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80080de:	f7fd f8d7 	bl	8005290 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80080e2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80080e6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80080e8:	4b0c      	ldr	r3, [pc, #48]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080ea:	2204      	movs	r2, #4
 80080ec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80080ee:	4b0b      	ldr	r3, [pc, #44]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080f0:	2208      	movs	r2, #8
 80080f2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80080f4:	4b09      	ldr	r3, [pc, #36]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080f6:	2201      	movs	r2, #1
 80080f8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	4a07      	ldr	r2, [pc, #28]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80080fe:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8008100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008104:	4905      	ldr	r1, [pc, #20]	; (800811c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008106:	4806      	ldr	r0, [pc, #24]	; (8008120 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8008108:	f7fd f8c2 	bl	8005290 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800810c:	6879      	ldr	r1, [r7, #4]
 800810e:	4804      	ldr	r0, [pc, #16]	; (8008120 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8008110:	f7fd f8f3 	bl	80052fa <HAL_SDRAM_ProgramRefreshRate>
}
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	200007b4 	.word	0x200007b4
 8008120:	20000764 	.word	0x20000764

08008124 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b090      	sub	sp, #64	; 0x40
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 80ec 	beq.w	800830e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8008136:	2300      	movs	r3, #0
 8008138:	62bb      	str	r3, [r7, #40]	; 0x28
 800813a:	4b77      	ldr	r3, [pc, #476]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	4a76      	ldr	r2, [pc, #472]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 8008140:	f043 0301 	orr.w	r3, r3, #1
 8008144:	6393      	str	r3, [r2, #56]	; 0x38
 8008146:	4b74      	ldr	r3, [pc, #464]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 8008148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8008152:	2300      	movs	r3, #0
 8008154:	627b      	str	r3, [r7, #36]	; 0x24
 8008156:	4b70      	ldr	r3, [pc, #448]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 8008158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815a:	4a6f      	ldr	r2, [pc, #444]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 800815c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008160:	6313      	str	r3, [r2, #48]	; 0x30
 8008162:	4b6d      	ldr	r3, [pc, #436]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 8008164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800816a:	627b      	str	r3, [r7, #36]	; 0x24
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800816e:	2300      	movs	r3, #0
 8008170:	623b      	str	r3, [r7, #32]
 8008172:	4b69      	ldr	r3, [pc, #420]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 8008174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008176:	4a68      	ldr	r2, [pc, #416]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 8008178:	f043 0302 	orr.w	r3, r3, #2
 800817c:	6313      	str	r3, [r2, #48]	; 0x30
 800817e:	4b66      	ldr	r3, [pc, #408]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 8008180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	623b      	str	r3, [r7, #32]
 8008188:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800818a:	2300      	movs	r3, #0
 800818c:	61fb      	str	r3, [r7, #28]
 800818e:	4b62      	ldr	r3, [pc, #392]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 8008190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008192:	4a61      	ldr	r2, [pc, #388]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 8008194:	f043 0304 	orr.w	r3, r3, #4
 8008198:	6313      	str	r3, [r2, #48]	; 0x30
 800819a:	4b5f      	ldr	r3, [pc, #380]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 800819c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819e:	f003 0304 	and.w	r3, r3, #4
 80081a2:	61fb      	str	r3, [r7, #28]
 80081a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80081a6:	2300      	movs	r3, #0
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	4b5b      	ldr	r3, [pc, #364]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 80081ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ae:	4a5a      	ldr	r2, [pc, #360]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 80081b0:	f043 0308 	orr.w	r3, r3, #8
 80081b4:	6313      	str	r3, [r2, #48]	; 0x30
 80081b6:	4b58      	ldr	r3, [pc, #352]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 80081b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ba:	f003 0308 	and.w	r3, r3, #8
 80081be:	61bb      	str	r3, [r7, #24]
 80081c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80081c2:	2300      	movs	r3, #0
 80081c4:	617b      	str	r3, [r7, #20]
 80081c6:	4b54      	ldr	r3, [pc, #336]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 80081c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ca:	4a53      	ldr	r2, [pc, #332]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 80081cc:	f043 0310 	orr.w	r3, r3, #16
 80081d0:	6313      	str	r3, [r2, #48]	; 0x30
 80081d2:	4b51      	ldr	r3, [pc, #324]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 80081d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d6:	f003 0310 	and.w	r3, r3, #16
 80081da:	617b      	str	r3, [r7, #20]
 80081dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80081de:	2300      	movs	r3, #0
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	4b4d      	ldr	r3, [pc, #308]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 80081e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e6:	4a4c      	ldr	r2, [pc, #304]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 80081e8:	f043 0320 	orr.w	r3, r3, #32
 80081ec:	6313      	str	r3, [r2, #48]	; 0x30
 80081ee:	4b4a      	ldr	r3, [pc, #296]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 80081f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	613b      	str	r3, [r7, #16]
 80081f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80081fa:	2300      	movs	r3, #0
 80081fc:	60fb      	str	r3, [r7, #12]
 80081fe:	4b46      	ldr	r3, [pc, #280]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 8008200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008202:	4a45      	ldr	r2, [pc, #276]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 8008204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008208:	6313      	str	r3, [r2, #48]	; 0x30
 800820a:	4b43      	ldr	r3, [pc, #268]	; (8008318 <BSP_SDRAM_MspInit+0x1f4>)
 800820c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8008216:	2302      	movs	r3, #2
 8008218:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800821a:	2302      	movs	r3, #2
 800821c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800821e:	2300      	movs	r3, #0
 8008220:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8008222:	230c      	movs	r3, #12
 8008224:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8008226:	2360      	movs	r3, #96	; 0x60
 8008228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800822a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800822e:	4619      	mov	r1, r3
 8008230:	483a      	ldr	r0, [pc, #232]	; (800831c <BSP_SDRAM_MspInit+0x1f8>)
 8008232:	f7fa fdef 	bl	8002e14 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8008236:	2301      	movs	r3, #1
 8008238:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800823a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800823e:	4619      	mov	r1, r3
 8008240:	4837      	ldr	r0, [pc, #220]	; (8008320 <BSP_SDRAM_MspInit+0x1fc>)
 8008242:	f7fa fde7 	bl	8002e14 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8008246:	f24c 7303 	movw	r3, #50947	; 0xc703
 800824a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800824c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008250:	4619      	mov	r1, r3
 8008252:	4834      	ldr	r0, [pc, #208]	; (8008324 <BSP_SDRAM_MspInit+0x200>)
 8008254:	f7fa fdde 	bl	8002e14 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8008258:	f64f 7383 	movw	r3, #65411	; 0xff83
 800825c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800825e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008262:	4619      	mov	r1, r3
 8008264:	4830      	ldr	r0, [pc, #192]	; (8008328 <BSP_SDRAM_MspInit+0x204>)
 8008266:	f7fa fdd5 	bl	8002e14 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800826a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800826e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8008270:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008274:	4619      	mov	r1, r3
 8008276:	482d      	ldr	r0, [pc, #180]	; (800832c <BSP_SDRAM_MspInit+0x208>)
 8008278:	f7fa fdcc 	bl	8002e14 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800827c:	f248 1333 	movw	r3, #33075	; 0x8133
 8008280:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8008282:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008286:	4619      	mov	r1, r3
 8008288:	4829      	ldr	r0, [pc, #164]	; (8008330 <BSP_SDRAM_MspInit+0x20c>)
 800828a:	f7fa fdc3 	bl	8002e14 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800828e:	4b29      	ldr	r3, [pc, #164]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 8008290:	2200      	movs	r2, #0
 8008292:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8008294:	4b27      	ldr	r3, [pc, #156]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 8008296:	2280      	movs	r2, #128	; 0x80
 8008298:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800829a:	4b26      	ldr	r3, [pc, #152]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 800829c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082a0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80082a2:	4b24      	ldr	r3, [pc, #144]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 80082a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082a8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80082aa:	4b22      	ldr	r3, [pc, #136]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 80082ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80082b0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80082b2:	4b20      	ldr	r3, [pc, #128]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 80082b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80082b8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80082ba:	4b1e      	ldr	r3, [pc, #120]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 80082bc:	2200      	movs	r2, #0
 80082be:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80082c0:	4b1c      	ldr	r3, [pc, #112]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 80082c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80082c6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80082c8:	4b1a      	ldr	r3, [pc, #104]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80082ce:	4b19      	ldr	r3, [pc, #100]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 80082d0:	2203      	movs	r2, #3
 80082d2:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80082d4:	4b17      	ldr	r3, [pc, #92]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80082da:	4b16      	ldr	r3, [pc, #88]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 80082dc:	2200      	movs	r2, #0
 80082de:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80082e0:	4b14      	ldr	r3, [pc, #80]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 80082e2:	4a15      	ldr	r2, [pc, #84]	; (8008338 <BSP_SDRAM_MspInit+0x214>)
 80082e4:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a12      	ldr	r2, [pc, #72]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 80082ea:	631a      	str	r2, [r3, #48]	; 0x30
 80082ec:	4a11      	ldr	r2, [pc, #68]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80082f2:	4810      	ldr	r0, [pc, #64]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 80082f4:	f7fa f9f2 	bl	80026dc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80082f8:	480e      	ldr	r0, [pc, #56]	; (8008334 <BSP_SDRAM_MspInit+0x210>)
 80082fa:	f7fa f941 	bl	8002580 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80082fe:	2200      	movs	r2, #0
 8008300:	210f      	movs	r1, #15
 8008302:	2038      	movs	r0, #56	; 0x38
 8008304:	f7fa f905 	bl	8002512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8008308:	2038      	movs	r0, #56	; 0x38
 800830a:	f7fa f91e 	bl	800254a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800830e:	bf00      	nop
 8008310:	3740      	adds	r7, #64	; 0x40
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	40023800 	.word	0x40023800
 800831c:	40020400 	.word	0x40020400
 8008320:	40020800 	.word	0x40020800
 8008324:	40020c00 	.word	0x40020c00
 8008328:	40021000 	.word	0x40021000
 800832c:	40021400 	.word	0x40021400
 8008330:	40021800 	.word	0x40021800
 8008334:	200007c4 	.word	0x200007c4
 8008338:	40026410 	.word	0x40026410

0800833c <__errno>:
 800833c:	4b01      	ldr	r3, [pc, #4]	; (8008344 <__errno+0x8>)
 800833e:	6818      	ldr	r0, [r3, #0]
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	200000a8 	.word	0x200000a8

08008348 <__libc_init_array>:
 8008348:	b570      	push	{r4, r5, r6, lr}
 800834a:	4d0d      	ldr	r5, [pc, #52]	; (8008380 <__libc_init_array+0x38>)
 800834c:	4c0d      	ldr	r4, [pc, #52]	; (8008384 <__libc_init_array+0x3c>)
 800834e:	1b64      	subs	r4, r4, r5
 8008350:	10a4      	asrs	r4, r4, #2
 8008352:	2600      	movs	r6, #0
 8008354:	42a6      	cmp	r6, r4
 8008356:	d109      	bne.n	800836c <__libc_init_array+0x24>
 8008358:	4d0b      	ldr	r5, [pc, #44]	; (8008388 <__libc_init_array+0x40>)
 800835a:	4c0c      	ldr	r4, [pc, #48]	; (800838c <__libc_init_array+0x44>)
 800835c:	f000 fc8e 	bl	8008c7c <_init>
 8008360:	1b64      	subs	r4, r4, r5
 8008362:	10a4      	asrs	r4, r4, #2
 8008364:	2600      	movs	r6, #0
 8008366:	42a6      	cmp	r6, r4
 8008368:	d105      	bne.n	8008376 <__libc_init_array+0x2e>
 800836a:	bd70      	pop	{r4, r5, r6, pc}
 800836c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008370:	4798      	blx	r3
 8008372:	3601      	adds	r6, #1
 8008374:	e7ee      	b.n	8008354 <__libc_init_array+0xc>
 8008376:	f855 3b04 	ldr.w	r3, [r5], #4
 800837a:	4798      	blx	r3
 800837c:	3601      	adds	r6, #1
 800837e:	e7f2      	b.n	8008366 <__libc_init_array+0x1e>
 8008380:	080576a8 	.word	0x080576a8
 8008384:	080576a8 	.word	0x080576a8
 8008388:	080576a8 	.word	0x080576a8
 800838c:	080576ac 	.word	0x080576ac

08008390 <memset>:
 8008390:	4402      	add	r2, r0
 8008392:	4603      	mov	r3, r0
 8008394:	4293      	cmp	r3, r2
 8008396:	d100      	bne.n	800839a <memset+0xa>
 8008398:	4770      	bx	lr
 800839a:	f803 1b01 	strb.w	r1, [r3], #1
 800839e:	e7f9      	b.n	8008394 <memset+0x4>

080083a0 <siprintf>:
 80083a0:	b40e      	push	{r1, r2, r3}
 80083a2:	b500      	push	{lr}
 80083a4:	b09c      	sub	sp, #112	; 0x70
 80083a6:	ab1d      	add	r3, sp, #116	; 0x74
 80083a8:	9002      	str	r0, [sp, #8]
 80083aa:	9006      	str	r0, [sp, #24]
 80083ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083b0:	4809      	ldr	r0, [pc, #36]	; (80083d8 <siprintf+0x38>)
 80083b2:	9107      	str	r1, [sp, #28]
 80083b4:	9104      	str	r1, [sp, #16]
 80083b6:	4909      	ldr	r1, [pc, #36]	; (80083dc <siprintf+0x3c>)
 80083b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083bc:	9105      	str	r1, [sp, #20]
 80083be:	6800      	ldr	r0, [r0, #0]
 80083c0:	9301      	str	r3, [sp, #4]
 80083c2:	a902      	add	r1, sp, #8
 80083c4:	f000 f868 	bl	8008498 <_svfiprintf_r>
 80083c8:	9b02      	ldr	r3, [sp, #8]
 80083ca:	2200      	movs	r2, #0
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	b01c      	add	sp, #112	; 0x70
 80083d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083d4:	b003      	add	sp, #12
 80083d6:	4770      	bx	lr
 80083d8:	200000a8 	.word	0x200000a8
 80083dc:	ffff0208 	.word	0xffff0208

080083e0 <__ssputs_r>:
 80083e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e4:	688e      	ldr	r6, [r1, #8]
 80083e6:	429e      	cmp	r6, r3
 80083e8:	4682      	mov	sl, r0
 80083ea:	460c      	mov	r4, r1
 80083ec:	4690      	mov	r8, r2
 80083ee:	461f      	mov	r7, r3
 80083f0:	d838      	bhi.n	8008464 <__ssputs_r+0x84>
 80083f2:	898a      	ldrh	r2, [r1, #12]
 80083f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083f8:	d032      	beq.n	8008460 <__ssputs_r+0x80>
 80083fa:	6825      	ldr	r5, [r4, #0]
 80083fc:	6909      	ldr	r1, [r1, #16]
 80083fe:	eba5 0901 	sub.w	r9, r5, r1
 8008402:	6965      	ldr	r5, [r4, #20]
 8008404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008408:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800840c:	3301      	adds	r3, #1
 800840e:	444b      	add	r3, r9
 8008410:	106d      	asrs	r5, r5, #1
 8008412:	429d      	cmp	r5, r3
 8008414:	bf38      	it	cc
 8008416:	461d      	movcc	r5, r3
 8008418:	0553      	lsls	r3, r2, #21
 800841a:	d531      	bpl.n	8008480 <__ssputs_r+0xa0>
 800841c:	4629      	mov	r1, r5
 800841e:	f000 fb63 	bl	8008ae8 <_malloc_r>
 8008422:	4606      	mov	r6, r0
 8008424:	b950      	cbnz	r0, 800843c <__ssputs_r+0x5c>
 8008426:	230c      	movs	r3, #12
 8008428:	f8ca 3000 	str.w	r3, [sl]
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	f04f 30ff 	mov.w	r0, #4294967295
 8008438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800843c:	6921      	ldr	r1, [r4, #16]
 800843e:	464a      	mov	r2, r9
 8008440:	f000 fabe 	bl	80089c0 <memcpy>
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800844a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800844e:	81a3      	strh	r3, [r4, #12]
 8008450:	6126      	str	r6, [r4, #16]
 8008452:	6165      	str	r5, [r4, #20]
 8008454:	444e      	add	r6, r9
 8008456:	eba5 0509 	sub.w	r5, r5, r9
 800845a:	6026      	str	r6, [r4, #0]
 800845c:	60a5      	str	r5, [r4, #8]
 800845e:	463e      	mov	r6, r7
 8008460:	42be      	cmp	r6, r7
 8008462:	d900      	bls.n	8008466 <__ssputs_r+0x86>
 8008464:	463e      	mov	r6, r7
 8008466:	6820      	ldr	r0, [r4, #0]
 8008468:	4632      	mov	r2, r6
 800846a:	4641      	mov	r1, r8
 800846c:	f000 fab6 	bl	80089dc <memmove>
 8008470:	68a3      	ldr	r3, [r4, #8]
 8008472:	1b9b      	subs	r3, r3, r6
 8008474:	60a3      	str	r3, [r4, #8]
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	4433      	add	r3, r6
 800847a:	6023      	str	r3, [r4, #0]
 800847c:	2000      	movs	r0, #0
 800847e:	e7db      	b.n	8008438 <__ssputs_r+0x58>
 8008480:	462a      	mov	r2, r5
 8008482:	f000 fba5 	bl	8008bd0 <_realloc_r>
 8008486:	4606      	mov	r6, r0
 8008488:	2800      	cmp	r0, #0
 800848a:	d1e1      	bne.n	8008450 <__ssputs_r+0x70>
 800848c:	6921      	ldr	r1, [r4, #16]
 800848e:	4650      	mov	r0, sl
 8008490:	f000 fabe 	bl	8008a10 <_free_r>
 8008494:	e7c7      	b.n	8008426 <__ssputs_r+0x46>
	...

08008498 <_svfiprintf_r>:
 8008498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849c:	4698      	mov	r8, r3
 800849e:	898b      	ldrh	r3, [r1, #12]
 80084a0:	061b      	lsls	r3, r3, #24
 80084a2:	b09d      	sub	sp, #116	; 0x74
 80084a4:	4607      	mov	r7, r0
 80084a6:	460d      	mov	r5, r1
 80084a8:	4614      	mov	r4, r2
 80084aa:	d50e      	bpl.n	80084ca <_svfiprintf_r+0x32>
 80084ac:	690b      	ldr	r3, [r1, #16]
 80084ae:	b963      	cbnz	r3, 80084ca <_svfiprintf_r+0x32>
 80084b0:	2140      	movs	r1, #64	; 0x40
 80084b2:	f000 fb19 	bl	8008ae8 <_malloc_r>
 80084b6:	6028      	str	r0, [r5, #0]
 80084b8:	6128      	str	r0, [r5, #16]
 80084ba:	b920      	cbnz	r0, 80084c6 <_svfiprintf_r+0x2e>
 80084bc:	230c      	movs	r3, #12
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	e0d1      	b.n	800866a <_svfiprintf_r+0x1d2>
 80084c6:	2340      	movs	r3, #64	; 0x40
 80084c8:	616b      	str	r3, [r5, #20]
 80084ca:	2300      	movs	r3, #0
 80084cc:	9309      	str	r3, [sp, #36]	; 0x24
 80084ce:	2320      	movs	r3, #32
 80084d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80084d8:	2330      	movs	r3, #48	; 0x30
 80084da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008684 <_svfiprintf_r+0x1ec>
 80084de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084e2:	f04f 0901 	mov.w	r9, #1
 80084e6:	4623      	mov	r3, r4
 80084e8:	469a      	mov	sl, r3
 80084ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084ee:	b10a      	cbz	r2, 80084f4 <_svfiprintf_r+0x5c>
 80084f0:	2a25      	cmp	r2, #37	; 0x25
 80084f2:	d1f9      	bne.n	80084e8 <_svfiprintf_r+0x50>
 80084f4:	ebba 0b04 	subs.w	fp, sl, r4
 80084f8:	d00b      	beq.n	8008512 <_svfiprintf_r+0x7a>
 80084fa:	465b      	mov	r3, fp
 80084fc:	4622      	mov	r2, r4
 80084fe:	4629      	mov	r1, r5
 8008500:	4638      	mov	r0, r7
 8008502:	f7ff ff6d 	bl	80083e0 <__ssputs_r>
 8008506:	3001      	adds	r0, #1
 8008508:	f000 80aa 	beq.w	8008660 <_svfiprintf_r+0x1c8>
 800850c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800850e:	445a      	add	r2, fp
 8008510:	9209      	str	r2, [sp, #36]	; 0x24
 8008512:	f89a 3000 	ldrb.w	r3, [sl]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 80a2 	beq.w	8008660 <_svfiprintf_r+0x1c8>
 800851c:	2300      	movs	r3, #0
 800851e:	f04f 32ff 	mov.w	r2, #4294967295
 8008522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008526:	f10a 0a01 	add.w	sl, sl, #1
 800852a:	9304      	str	r3, [sp, #16]
 800852c:	9307      	str	r3, [sp, #28]
 800852e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008532:	931a      	str	r3, [sp, #104]	; 0x68
 8008534:	4654      	mov	r4, sl
 8008536:	2205      	movs	r2, #5
 8008538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800853c:	4851      	ldr	r0, [pc, #324]	; (8008684 <_svfiprintf_r+0x1ec>)
 800853e:	f7f7 fe5f 	bl	8000200 <memchr>
 8008542:	9a04      	ldr	r2, [sp, #16]
 8008544:	b9d8      	cbnz	r0, 800857e <_svfiprintf_r+0xe6>
 8008546:	06d0      	lsls	r0, r2, #27
 8008548:	bf44      	itt	mi
 800854a:	2320      	movmi	r3, #32
 800854c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008550:	0711      	lsls	r1, r2, #28
 8008552:	bf44      	itt	mi
 8008554:	232b      	movmi	r3, #43	; 0x2b
 8008556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800855a:	f89a 3000 	ldrb.w	r3, [sl]
 800855e:	2b2a      	cmp	r3, #42	; 0x2a
 8008560:	d015      	beq.n	800858e <_svfiprintf_r+0xf6>
 8008562:	9a07      	ldr	r2, [sp, #28]
 8008564:	4654      	mov	r4, sl
 8008566:	2000      	movs	r0, #0
 8008568:	f04f 0c0a 	mov.w	ip, #10
 800856c:	4621      	mov	r1, r4
 800856e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008572:	3b30      	subs	r3, #48	; 0x30
 8008574:	2b09      	cmp	r3, #9
 8008576:	d94e      	bls.n	8008616 <_svfiprintf_r+0x17e>
 8008578:	b1b0      	cbz	r0, 80085a8 <_svfiprintf_r+0x110>
 800857a:	9207      	str	r2, [sp, #28]
 800857c:	e014      	b.n	80085a8 <_svfiprintf_r+0x110>
 800857e:	eba0 0308 	sub.w	r3, r0, r8
 8008582:	fa09 f303 	lsl.w	r3, r9, r3
 8008586:	4313      	orrs	r3, r2
 8008588:	9304      	str	r3, [sp, #16]
 800858a:	46a2      	mov	sl, r4
 800858c:	e7d2      	b.n	8008534 <_svfiprintf_r+0x9c>
 800858e:	9b03      	ldr	r3, [sp, #12]
 8008590:	1d19      	adds	r1, r3, #4
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	9103      	str	r1, [sp, #12]
 8008596:	2b00      	cmp	r3, #0
 8008598:	bfbb      	ittet	lt
 800859a:	425b      	neglt	r3, r3
 800859c:	f042 0202 	orrlt.w	r2, r2, #2
 80085a0:	9307      	strge	r3, [sp, #28]
 80085a2:	9307      	strlt	r3, [sp, #28]
 80085a4:	bfb8      	it	lt
 80085a6:	9204      	strlt	r2, [sp, #16]
 80085a8:	7823      	ldrb	r3, [r4, #0]
 80085aa:	2b2e      	cmp	r3, #46	; 0x2e
 80085ac:	d10c      	bne.n	80085c8 <_svfiprintf_r+0x130>
 80085ae:	7863      	ldrb	r3, [r4, #1]
 80085b0:	2b2a      	cmp	r3, #42	; 0x2a
 80085b2:	d135      	bne.n	8008620 <_svfiprintf_r+0x188>
 80085b4:	9b03      	ldr	r3, [sp, #12]
 80085b6:	1d1a      	adds	r2, r3, #4
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	9203      	str	r2, [sp, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	bfb8      	it	lt
 80085c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80085c4:	3402      	adds	r4, #2
 80085c6:	9305      	str	r3, [sp, #20]
 80085c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008694 <_svfiprintf_r+0x1fc>
 80085cc:	7821      	ldrb	r1, [r4, #0]
 80085ce:	2203      	movs	r2, #3
 80085d0:	4650      	mov	r0, sl
 80085d2:	f7f7 fe15 	bl	8000200 <memchr>
 80085d6:	b140      	cbz	r0, 80085ea <_svfiprintf_r+0x152>
 80085d8:	2340      	movs	r3, #64	; 0x40
 80085da:	eba0 000a 	sub.w	r0, r0, sl
 80085de:	fa03 f000 	lsl.w	r0, r3, r0
 80085e2:	9b04      	ldr	r3, [sp, #16]
 80085e4:	4303      	orrs	r3, r0
 80085e6:	3401      	adds	r4, #1
 80085e8:	9304      	str	r3, [sp, #16]
 80085ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ee:	4826      	ldr	r0, [pc, #152]	; (8008688 <_svfiprintf_r+0x1f0>)
 80085f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085f4:	2206      	movs	r2, #6
 80085f6:	f7f7 fe03 	bl	8000200 <memchr>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d038      	beq.n	8008670 <_svfiprintf_r+0x1d8>
 80085fe:	4b23      	ldr	r3, [pc, #140]	; (800868c <_svfiprintf_r+0x1f4>)
 8008600:	bb1b      	cbnz	r3, 800864a <_svfiprintf_r+0x1b2>
 8008602:	9b03      	ldr	r3, [sp, #12]
 8008604:	3307      	adds	r3, #7
 8008606:	f023 0307 	bic.w	r3, r3, #7
 800860a:	3308      	adds	r3, #8
 800860c:	9303      	str	r3, [sp, #12]
 800860e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008610:	4433      	add	r3, r6
 8008612:	9309      	str	r3, [sp, #36]	; 0x24
 8008614:	e767      	b.n	80084e6 <_svfiprintf_r+0x4e>
 8008616:	fb0c 3202 	mla	r2, ip, r2, r3
 800861a:	460c      	mov	r4, r1
 800861c:	2001      	movs	r0, #1
 800861e:	e7a5      	b.n	800856c <_svfiprintf_r+0xd4>
 8008620:	2300      	movs	r3, #0
 8008622:	3401      	adds	r4, #1
 8008624:	9305      	str	r3, [sp, #20]
 8008626:	4619      	mov	r1, r3
 8008628:	f04f 0c0a 	mov.w	ip, #10
 800862c:	4620      	mov	r0, r4
 800862e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008632:	3a30      	subs	r2, #48	; 0x30
 8008634:	2a09      	cmp	r2, #9
 8008636:	d903      	bls.n	8008640 <_svfiprintf_r+0x1a8>
 8008638:	2b00      	cmp	r3, #0
 800863a:	d0c5      	beq.n	80085c8 <_svfiprintf_r+0x130>
 800863c:	9105      	str	r1, [sp, #20]
 800863e:	e7c3      	b.n	80085c8 <_svfiprintf_r+0x130>
 8008640:	fb0c 2101 	mla	r1, ip, r1, r2
 8008644:	4604      	mov	r4, r0
 8008646:	2301      	movs	r3, #1
 8008648:	e7f0      	b.n	800862c <_svfiprintf_r+0x194>
 800864a:	ab03      	add	r3, sp, #12
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	462a      	mov	r2, r5
 8008650:	4b0f      	ldr	r3, [pc, #60]	; (8008690 <_svfiprintf_r+0x1f8>)
 8008652:	a904      	add	r1, sp, #16
 8008654:	4638      	mov	r0, r7
 8008656:	f3af 8000 	nop.w
 800865a:	1c42      	adds	r2, r0, #1
 800865c:	4606      	mov	r6, r0
 800865e:	d1d6      	bne.n	800860e <_svfiprintf_r+0x176>
 8008660:	89ab      	ldrh	r3, [r5, #12]
 8008662:	065b      	lsls	r3, r3, #25
 8008664:	f53f af2c 	bmi.w	80084c0 <_svfiprintf_r+0x28>
 8008668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800866a:	b01d      	add	sp, #116	; 0x74
 800866c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008670:	ab03      	add	r3, sp, #12
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	462a      	mov	r2, r5
 8008676:	4b06      	ldr	r3, [pc, #24]	; (8008690 <_svfiprintf_r+0x1f8>)
 8008678:	a904      	add	r1, sp, #16
 800867a:	4638      	mov	r0, r7
 800867c:	f000 f87a 	bl	8008774 <_printf_i>
 8008680:	e7eb      	b.n	800865a <_svfiprintf_r+0x1c2>
 8008682:	bf00      	nop
 8008684:	0805766c 	.word	0x0805766c
 8008688:	08057676 	.word	0x08057676
 800868c:	00000000 	.word	0x00000000
 8008690:	080083e1 	.word	0x080083e1
 8008694:	08057672 	.word	0x08057672

08008698 <_printf_common>:
 8008698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800869c:	4616      	mov	r6, r2
 800869e:	4699      	mov	r9, r3
 80086a0:	688a      	ldr	r2, [r1, #8]
 80086a2:	690b      	ldr	r3, [r1, #16]
 80086a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086a8:	4293      	cmp	r3, r2
 80086aa:	bfb8      	it	lt
 80086ac:	4613      	movlt	r3, r2
 80086ae:	6033      	str	r3, [r6, #0]
 80086b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086b4:	4607      	mov	r7, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	b10a      	cbz	r2, 80086be <_printf_common+0x26>
 80086ba:	3301      	adds	r3, #1
 80086bc:	6033      	str	r3, [r6, #0]
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	0699      	lsls	r1, r3, #26
 80086c2:	bf42      	ittt	mi
 80086c4:	6833      	ldrmi	r3, [r6, #0]
 80086c6:	3302      	addmi	r3, #2
 80086c8:	6033      	strmi	r3, [r6, #0]
 80086ca:	6825      	ldr	r5, [r4, #0]
 80086cc:	f015 0506 	ands.w	r5, r5, #6
 80086d0:	d106      	bne.n	80086e0 <_printf_common+0x48>
 80086d2:	f104 0a19 	add.w	sl, r4, #25
 80086d6:	68e3      	ldr	r3, [r4, #12]
 80086d8:	6832      	ldr	r2, [r6, #0]
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	42ab      	cmp	r3, r5
 80086de:	dc26      	bgt.n	800872e <_printf_common+0x96>
 80086e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086e4:	1e13      	subs	r3, r2, #0
 80086e6:	6822      	ldr	r2, [r4, #0]
 80086e8:	bf18      	it	ne
 80086ea:	2301      	movne	r3, #1
 80086ec:	0692      	lsls	r2, r2, #26
 80086ee:	d42b      	bmi.n	8008748 <_printf_common+0xb0>
 80086f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086f4:	4649      	mov	r1, r9
 80086f6:	4638      	mov	r0, r7
 80086f8:	47c0      	blx	r8
 80086fa:	3001      	adds	r0, #1
 80086fc:	d01e      	beq.n	800873c <_printf_common+0xa4>
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	68e5      	ldr	r5, [r4, #12]
 8008702:	6832      	ldr	r2, [r6, #0]
 8008704:	f003 0306 	and.w	r3, r3, #6
 8008708:	2b04      	cmp	r3, #4
 800870a:	bf08      	it	eq
 800870c:	1aad      	subeq	r5, r5, r2
 800870e:	68a3      	ldr	r3, [r4, #8]
 8008710:	6922      	ldr	r2, [r4, #16]
 8008712:	bf0c      	ite	eq
 8008714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008718:	2500      	movne	r5, #0
 800871a:	4293      	cmp	r3, r2
 800871c:	bfc4      	itt	gt
 800871e:	1a9b      	subgt	r3, r3, r2
 8008720:	18ed      	addgt	r5, r5, r3
 8008722:	2600      	movs	r6, #0
 8008724:	341a      	adds	r4, #26
 8008726:	42b5      	cmp	r5, r6
 8008728:	d11a      	bne.n	8008760 <_printf_common+0xc8>
 800872a:	2000      	movs	r0, #0
 800872c:	e008      	b.n	8008740 <_printf_common+0xa8>
 800872e:	2301      	movs	r3, #1
 8008730:	4652      	mov	r2, sl
 8008732:	4649      	mov	r1, r9
 8008734:	4638      	mov	r0, r7
 8008736:	47c0      	blx	r8
 8008738:	3001      	adds	r0, #1
 800873a:	d103      	bne.n	8008744 <_printf_common+0xac>
 800873c:	f04f 30ff 	mov.w	r0, #4294967295
 8008740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008744:	3501      	adds	r5, #1
 8008746:	e7c6      	b.n	80086d6 <_printf_common+0x3e>
 8008748:	18e1      	adds	r1, r4, r3
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	2030      	movs	r0, #48	; 0x30
 800874e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008752:	4422      	add	r2, r4
 8008754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800875c:	3302      	adds	r3, #2
 800875e:	e7c7      	b.n	80086f0 <_printf_common+0x58>
 8008760:	2301      	movs	r3, #1
 8008762:	4622      	mov	r2, r4
 8008764:	4649      	mov	r1, r9
 8008766:	4638      	mov	r0, r7
 8008768:	47c0      	blx	r8
 800876a:	3001      	adds	r0, #1
 800876c:	d0e6      	beq.n	800873c <_printf_common+0xa4>
 800876e:	3601      	adds	r6, #1
 8008770:	e7d9      	b.n	8008726 <_printf_common+0x8e>
	...

08008774 <_printf_i>:
 8008774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	7e0f      	ldrb	r7, [r1, #24]
 800877a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800877c:	2f78      	cmp	r7, #120	; 0x78
 800877e:	4691      	mov	r9, r2
 8008780:	4680      	mov	r8, r0
 8008782:	460c      	mov	r4, r1
 8008784:	469a      	mov	sl, r3
 8008786:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800878a:	d807      	bhi.n	800879c <_printf_i+0x28>
 800878c:	2f62      	cmp	r7, #98	; 0x62
 800878e:	d80a      	bhi.n	80087a6 <_printf_i+0x32>
 8008790:	2f00      	cmp	r7, #0
 8008792:	f000 80d8 	beq.w	8008946 <_printf_i+0x1d2>
 8008796:	2f58      	cmp	r7, #88	; 0x58
 8008798:	f000 80a3 	beq.w	80088e2 <_printf_i+0x16e>
 800879c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087a4:	e03a      	b.n	800881c <_printf_i+0xa8>
 80087a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087aa:	2b15      	cmp	r3, #21
 80087ac:	d8f6      	bhi.n	800879c <_printf_i+0x28>
 80087ae:	a101      	add	r1, pc, #4	; (adr r1, 80087b4 <_printf_i+0x40>)
 80087b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087b4:	0800880d 	.word	0x0800880d
 80087b8:	08008821 	.word	0x08008821
 80087bc:	0800879d 	.word	0x0800879d
 80087c0:	0800879d 	.word	0x0800879d
 80087c4:	0800879d 	.word	0x0800879d
 80087c8:	0800879d 	.word	0x0800879d
 80087cc:	08008821 	.word	0x08008821
 80087d0:	0800879d 	.word	0x0800879d
 80087d4:	0800879d 	.word	0x0800879d
 80087d8:	0800879d 	.word	0x0800879d
 80087dc:	0800879d 	.word	0x0800879d
 80087e0:	0800892d 	.word	0x0800892d
 80087e4:	08008851 	.word	0x08008851
 80087e8:	0800890f 	.word	0x0800890f
 80087ec:	0800879d 	.word	0x0800879d
 80087f0:	0800879d 	.word	0x0800879d
 80087f4:	0800894f 	.word	0x0800894f
 80087f8:	0800879d 	.word	0x0800879d
 80087fc:	08008851 	.word	0x08008851
 8008800:	0800879d 	.word	0x0800879d
 8008804:	0800879d 	.word	0x0800879d
 8008808:	08008917 	.word	0x08008917
 800880c:	682b      	ldr	r3, [r5, #0]
 800880e:	1d1a      	adds	r2, r3, #4
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	602a      	str	r2, [r5, #0]
 8008814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800881c:	2301      	movs	r3, #1
 800881e:	e0a3      	b.n	8008968 <_printf_i+0x1f4>
 8008820:	6820      	ldr	r0, [r4, #0]
 8008822:	6829      	ldr	r1, [r5, #0]
 8008824:	0606      	lsls	r6, r0, #24
 8008826:	f101 0304 	add.w	r3, r1, #4
 800882a:	d50a      	bpl.n	8008842 <_printf_i+0xce>
 800882c:	680e      	ldr	r6, [r1, #0]
 800882e:	602b      	str	r3, [r5, #0]
 8008830:	2e00      	cmp	r6, #0
 8008832:	da03      	bge.n	800883c <_printf_i+0xc8>
 8008834:	232d      	movs	r3, #45	; 0x2d
 8008836:	4276      	negs	r6, r6
 8008838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800883c:	485e      	ldr	r0, [pc, #376]	; (80089b8 <_printf_i+0x244>)
 800883e:	230a      	movs	r3, #10
 8008840:	e019      	b.n	8008876 <_printf_i+0x102>
 8008842:	680e      	ldr	r6, [r1, #0]
 8008844:	602b      	str	r3, [r5, #0]
 8008846:	f010 0f40 	tst.w	r0, #64	; 0x40
 800884a:	bf18      	it	ne
 800884c:	b236      	sxthne	r6, r6
 800884e:	e7ef      	b.n	8008830 <_printf_i+0xbc>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	6820      	ldr	r0, [r4, #0]
 8008854:	1d19      	adds	r1, r3, #4
 8008856:	6029      	str	r1, [r5, #0]
 8008858:	0601      	lsls	r1, r0, #24
 800885a:	d501      	bpl.n	8008860 <_printf_i+0xec>
 800885c:	681e      	ldr	r6, [r3, #0]
 800885e:	e002      	b.n	8008866 <_printf_i+0xf2>
 8008860:	0646      	lsls	r6, r0, #25
 8008862:	d5fb      	bpl.n	800885c <_printf_i+0xe8>
 8008864:	881e      	ldrh	r6, [r3, #0]
 8008866:	4854      	ldr	r0, [pc, #336]	; (80089b8 <_printf_i+0x244>)
 8008868:	2f6f      	cmp	r7, #111	; 0x6f
 800886a:	bf0c      	ite	eq
 800886c:	2308      	moveq	r3, #8
 800886e:	230a      	movne	r3, #10
 8008870:	2100      	movs	r1, #0
 8008872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008876:	6865      	ldr	r5, [r4, #4]
 8008878:	60a5      	str	r5, [r4, #8]
 800887a:	2d00      	cmp	r5, #0
 800887c:	bfa2      	ittt	ge
 800887e:	6821      	ldrge	r1, [r4, #0]
 8008880:	f021 0104 	bicge.w	r1, r1, #4
 8008884:	6021      	strge	r1, [r4, #0]
 8008886:	b90e      	cbnz	r6, 800888c <_printf_i+0x118>
 8008888:	2d00      	cmp	r5, #0
 800888a:	d04d      	beq.n	8008928 <_printf_i+0x1b4>
 800888c:	4615      	mov	r5, r2
 800888e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008892:	fb03 6711 	mls	r7, r3, r1, r6
 8008896:	5dc7      	ldrb	r7, [r0, r7]
 8008898:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800889c:	4637      	mov	r7, r6
 800889e:	42bb      	cmp	r3, r7
 80088a0:	460e      	mov	r6, r1
 80088a2:	d9f4      	bls.n	800888e <_printf_i+0x11a>
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d10b      	bne.n	80088c0 <_printf_i+0x14c>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	07de      	lsls	r6, r3, #31
 80088ac:	d508      	bpl.n	80088c0 <_printf_i+0x14c>
 80088ae:	6923      	ldr	r3, [r4, #16]
 80088b0:	6861      	ldr	r1, [r4, #4]
 80088b2:	4299      	cmp	r1, r3
 80088b4:	bfde      	ittt	le
 80088b6:	2330      	movle	r3, #48	; 0x30
 80088b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088c0:	1b52      	subs	r2, r2, r5
 80088c2:	6122      	str	r2, [r4, #16]
 80088c4:	f8cd a000 	str.w	sl, [sp]
 80088c8:	464b      	mov	r3, r9
 80088ca:	aa03      	add	r2, sp, #12
 80088cc:	4621      	mov	r1, r4
 80088ce:	4640      	mov	r0, r8
 80088d0:	f7ff fee2 	bl	8008698 <_printf_common>
 80088d4:	3001      	adds	r0, #1
 80088d6:	d14c      	bne.n	8008972 <_printf_i+0x1fe>
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295
 80088dc:	b004      	add	sp, #16
 80088de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e2:	4835      	ldr	r0, [pc, #212]	; (80089b8 <_printf_i+0x244>)
 80088e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088e8:	6829      	ldr	r1, [r5, #0]
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80088f0:	6029      	str	r1, [r5, #0]
 80088f2:	061d      	lsls	r5, r3, #24
 80088f4:	d514      	bpl.n	8008920 <_printf_i+0x1ac>
 80088f6:	07df      	lsls	r7, r3, #31
 80088f8:	bf44      	itt	mi
 80088fa:	f043 0320 	orrmi.w	r3, r3, #32
 80088fe:	6023      	strmi	r3, [r4, #0]
 8008900:	b91e      	cbnz	r6, 800890a <_printf_i+0x196>
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	f023 0320 	bic.w	r3, r3, #32
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	2310      	movs	r3, #16
 800890c:	e7b0      	b.n	8008870 <_printf_i+0xfc>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	f043 0320 	orr.w	r3, r3, #32
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	2378      	movs	r3, #120	; 0x78
 8008918:	4828      	ldr	r0, [pc, #160]	; (80089bc <_printf_i+0x248>)
 800891a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800891e:	e7e3      	b.n	80088e8 <_printf_i+0x174>
 8008920:	0659      	lsls	r1, r3, #25
 8008922:	bf48      	it	mi
 8008924:	b2b6      	uxthmi	r6, r6
 8008926:	e7e6      	b.n	80088f6 <_printf_i+0x182>
 8008928:	4615      	mov	r5, r2
 800892a:	e7bb      	b.n	80088a4 <_printf_i+0x130>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	6826      	ldr	r6, [r4, #0]
 8008930:	6961      	ldr	r1, [r4, #20]
 8008932:	1d18      	adds	r0, r3, #4
 8008934:	6028      	str	r0, [r5, #0]
 8008936:	0635      	lsls	r5, r6, #24
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	d501      	bpl.n	8008940 <_printf_i+0x1cc>
 800893c:	6019      	str	r1, [r3, #0]
 800893e:	e002      	b.n	8008946 <_printf_i+0x1d2>
 8008940:	0670      	lsls	r0, r6, #25
 8008942:	d5fb      	bpl.n	800893c <_printf_i+0x1c8>
 8008944:	8019      	strh	r1, [r3, #0]
 8008946:	2300      	movs	r3, #0
 8008948:	6123      	str	r3, [r4, #16]
 800894a:	4615      	mov	r5, r2
 800894c:	e7ba      	b.n	80088c4 <_printf_i+0x150>
 800894e:	682b      	ldr	r3, [r5, #0]
 8008950:	1d1a      	adds	r2, r3, #4
 8008952:	602a      	str	r2, [r5, #0]
 8008954:	681d      	ldr	r5, [r3, #0]
 8008956:	6862      	ldr	r2, [r4, #4]
 8008958:	2100      	movs	r1, #0
 800895a:	4628      	mov	r0, r5
 800895c:	f7f7 fc50 	bl	8000200 <memchr>
 8008960:	b108      	cbz	r0, 8008966 <_printf_i+0x1f2>
 8008962:	1b40      	subs	r0, r0, r5
 8008964:	6060      	str	r0, [r4, #4]
 8008966:	6863      	ldr	r3, [r4, #4]
 8008968:	6123      	str	r3, [r4, #16]
 800896a:	2300      	movs	r3, #0
 800896c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008970:	e7a8      	b.n	80088c4 <_printf_i+0x150>
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	462a      	mov	r2, r5
 8008976:	4649      	mov	r1, r9
 8008978:	4640      	mov	r0, r8
 800897a:	47d0      	blx	sl
 800897c:	3001      	adds	r0, #1
 800897e:	d0ab      	beq.n	80088d8 <_printf_i+0x164>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	079b      	lsls	r3, r3, #30
 8008984:	d413      	bmi.n	80089ae <_printf_i+0x23a>
 8008986:	68e0      	ldr	r0, [r4, #12]
 8008988:	9b03      	ldr	r3, [sp, #12]
 800898a:	4298      	cmp	r0, r3
 800898c:	bfb8      	it	lt
 800898e:	4618      	movlt	r0, r3
 8008990:	e7a4      	b.n	80088dc <_printf_i+0x168>
 8008992:	2301      	movs	r3, #1
 8008994:	4632      	mov	r2, r6
 8008996:	4649      	mov	r1, r9
 8008998:	4640      	mov	r0, r8
 800899a:	47d0      	blx	sl
 800899c:	3001      	adds	r0, #1
 800899e:	d09b      	beq.n	80088d8 <_printf_i+0x164>
 80089a0:	3501      	adds	r5, #1
 80089a2:	68e3      	ldr	r3, [r4, #12]
 80089a4:	9903      	ldr	r1, [sp, #12]
 80089a6:	1a5b      	subs	r3, r3, r1
 80089a8:	42ab      	cmp	r3, r5
 80089aa:	dcf2      	bgt.n	8008992 <_printf_i+0x21e>
 80089ac:	e7eb      	b.n	8008986 <_printf_i+0x212>
 80089ae:	2500      	movs	r5, #0
 80089b0:	f104 0619 	add.w	r6, r4, #25
 80089b4:	e7f5      	b.n	80089a2 <_printf_i+0x22e>
 80089b6:	bf00      	nop
 80089b8:	0805767d 	.word	0x0805767d
 80089bc:	0805768e 	.word	0x0805768e

080089c0 <memcpy>:
 80089c0:	440a      	add	r2, r1
 80089c2:	4291      	cmp	r1, r2
 80089c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089c8:	d100      	bne.n	80089cc <memcpy+0xc>
 80089ca:	4770      	bx	lr
 80089cc:	b510      	push	{r4, lr}
 80089ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089d6:	4291      	cmp	r1, r2
 80089d8:	d1f9      	bne.n	80089ce <memcpy+0xe>
 80089da:	bd10      	pop	{r4, pc}

080089dc <memmove>:
 80089dc:	4288      	cmp	r0, r1
 80089de:	b510      	push	{r4, lr}
 80089e0:	eb01 0402 	add.w	r4, r1, r2
 80089e4:	d902      	bls.n	80089ec <memmove+0x10>
 80089e6:	4284      	cmp	r4, r0
 80089e8:	4623      	mov	r3, r4
 80089ea:	d807      	bhi.n	80089fc <memmove+0x20>
 80089ec:	1e43      	subs	r3, r0, #1
 80089ee:	42a1      	cmp	r1, r4
 80089f0:	d008      	beq.n	8008a04 <memmove+0x28>
 80089f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089fa:	e7f8      	b.n	80089ee <memmove+0x12>
 80089fc:	4402      	add	r2, r0
 80089fe:	4601      	mov	r1, r0
 8008a00:	428a      	cmp	r2, r1
 8008a02:	d100      	bne.n	8008a06 <memmove+0x2a>
 8008a04:	bd10      	pop	{r4, pc}
 8008a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a0e:	e7f7      	b.n	8008a00 <memmove+0x24>

08008a10 <_free_r>:
 8008a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a12:	2900      	cmp	r1, #0
 8008a14:	d044      	beq.n	8008aa0 <_free_r+0x90>
 8008a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a1a:	9001      	str	r0, [sp, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a22:	bfb8      	it	lt
 8008a24:	18e4      	addlt	r4, r4, r3
 8008a26:	f000 f913 	bl	8008c50 <__malloc_lock>
 8008a2a:	4a1e      	ldr	r2, [pc, #120]	; (8008aa4 <_free_r+0x94>)
 8008a2c:	9801      	ldr	r0, [sp, #4]
 8008a2e:	6813      	ldr	r3, [r2, #0]
 8008a30:	b933      	cbnz	r3, 8008a40 <_free_r+0x30>
 8008a32:	6063      	str	r3, [r4, #4]
 8008a34:	6014      	str	r4, [r2, #0]
 8008a36:	b003      	add	sp, #12
 8008a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a3c:	f000 b90e 	b.w	8008c5c <__malloc_unlock>
 8008a40:	42a3      	cmp	r3, r4
 8008a42:	d908      	bls.n	8008a56 <_free_r+0x46>
 8008a44:	6825      	ldr	r5, [r4, #0]
 8008a46:	1961      	adds	r1, r4, r5
 8008a48:	428b      	cmp	r3, r1
 8008a4a:	bf01      	itttt	eq
 8008a4c:	6819      	ldreq	r1, [r3, #0]
 8008a4e:	685b      	ldreq	r3, [r3, #4]
 8008a50:	1949      	addeq	r1, r1, r5
 8008a52:	6021      	streq	r1, [r4, #0]
 8008a54:	e7ed      	b.n	8008a32 <_free_r+0x22>
 8008a56:	461a      	mov	r2, r3
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	b10b      	cbz	r3, 8008a60 <_free_r+0x50>
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	d9fa      	bls.n	8008a56 <_free_r+0x46>
 8008a60:	6811      	ldr	r1, [r2, #0]
 8008a62:	1855      	adds	r5, r2, r1
 8008a64:	42a5      	cmp	r5, r4
 8008a66:	d10b      	bne.n	8008a80 <_free_r+0x70>
 8008a68:	6824      	ldr	r4, [r4, #0]
 8008a6a:	4421      	add	r1, r4
 8008a6c:	1854      	adds	r4, r2, r1
 8008a6e:	42a3      	cmp	r3, r4
 8008a70:	6011      	str	r1, [r2, #0]
 8008a72:	d1e0      	bne.n	8008a36 <_free_r+0x26>
 8008a74:	681c      	ldr	r4, [r3, #0]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	6053      	str	r3, [r2, #4]
 8008a7a:	4421      	add	r1, r4
 8008a7c:	6011      	str	r1, [r2, #0]
 8008a7e:	e7da      	b.n	8008a36 <_free_r+0x26>
 8008a80:	d902      	bls.n	8008a88 <_free_r+0x78>
 8008a82:	230c      	movs	r3, #12
 8008a84:	6003      	str	r3, [r0, #0]
 8008a86:	e7d6      	b.n	8008a36 <_free_r+0x26>
 8008a88:	6825      	ldr	r5, [r4, #0]
 8008a8a:	1961      	adds	r1, r4, r5
 8008a8c:	428b      	cmp	r3, r1
 8008a8e:	bf04      	itt	eq
 8008a90:	6819      	ldreq	r1, [r3, #0]
 8008a92:	685b      	ldreq	r3, [r3, #4]
 8008a94:	6063      	str	r3, [r4, #4]
 8008a96:	bf04      	itt	eq
 8008a98:	1949      	addeq	r1, r1, r5
 8008a9a:	6021      	streq	r1, [r4, #0]
 8008a9c:	6054      	str	r4, [r2, #4]
 8008a9e:	e7ca      	b.n	8008a36 <_free_r+0x26>
 8008aa0:	b003      	add	sp, #12
 8008aa2:	bd30      	pop	{r4, r5, pc}
 8008aa4:	20000824 	.word	0x20000824

08008aa8 <sbrk_aligned>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	4e0e      	ldr	r6, [pc, #56]	; (8008ae4 <sbrk_aligned+0x3c>)
 8008aac:	460c      	mov	r4, r1
 8008aae:	6831      	ldr	r1, [r6, #0]
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	b911      	cbnz	r1, 8008aba <sbrk_aligned+0x12>
 8008ab4:	f000 f8bc 	bl	8008c30 <_sbrk_r>
 8008ab8:	6030      	str	r0, [r6, #0]
 8008aba:	4621      	mov	r1, r4
 8008abc:	4628      	mov	r0, r5
 8008abe:	f000 f8b7 	bl	8008c30 <_sbrk_r>
 8008ac2:	1c43      	adds	r3, r0, #1
 8008ac4:	d00a      	beq.n	8008adc <sbrk_aligned+0x34>
 8008ac6:	1cc4      	adds	r4, r0, #3
 8008ac8:	f024 0403 	bic.w	r4, r4, #3
 8008acc:	42a0      	cmp	r0, r4
 8008ace:	d007      	beq.n	8008ae0 <sbrk_aligned+0x38>
 8008ad0:	1a21      	subs	r1, r4, r0
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f000 f8ac 	bl	8008c30 <_sbrk_r>
 8008ad8:	3001      	adds	r0, #1
 8008ada:	d101      	bne.n	8008ae0 <sbrk_aligned+0x38>
 8008adc:	f04f 34ff 	mov.w	r4, #4294967295
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	bd70      	pop	{r4, r5, r6, pc}
 8008ae4:	20000828 	.word	0x20000828

08008ae8 <_malloc_r>:
 8008ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aec:	1ccd      	adds	r5, r1, #3
 8008aee:	f025 0503 	bic.w	r5, r5, #3
 8008af2:	3508      	adds	r5, #8
 8008af4:	2d0c      	cmp	r5, #12
 8008af6:	bf38      	it	cc
 8008af8:	250c      	movcc	r5, #12
 8008afa:	2d00      	cmp	r5, #0
 8008afc:	4607      	mov	r7, r0
 8008afe:	db01      	blt.n	8008b04 <_malloc_r+0x1c>
 8008b00:	42a9      	cmp	r1, r5
 8008b02:	d905      	bls.n	8008b10 <_malloc_r+0x28>
 8008b04:	230c      	movs	r3, #12
 8008b06:	603b      	str	r3, [r7, #0]
 8008b08:	2600      	movs	r6, #0
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b10:	4e2e      	ldr	r6, [pc, #184]	; (8008bcc <_malloc_r+0xe4>)
 8008b12:	f000 f89d 	bl	8008c50 <__malloc_lock>
 8008b16:	6833      	ldr	r3, [r6, #0]
 8008b18:	461c      	mov	r4, r3
 8008b1a:	bb34      	cbnz	r4, 8008b6a <_malloc_r+0x82>
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f7ff ffc2 	bl	8008aa8 <sbrk_aligned>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	4604      	mov	r4, r0
 8008b28:	d14d      	bne.n	8008bc6 <_malloc_r+0xde>
 8008b2a:	6834      	ldr	r4, [r6, #0]
 8008b2c:	4626      	mov	r6, r4
 8008b2e:	2e00      	cmp	r6, #0
 8008b30:	d140      	bne.n	8008bb4 <_malloc_r+0xcc>
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	4631      	mov	r1, r6
 8008b36:	4638      	mov	r0, r7
 8008b38:	eb04 0803 	add.w	r8, r4, r3
 8008b3c:	f000 f878 	bl	8008c30 <_sbrk_r>
 8008b40:	4580      	cmp	r8, r0
 8008b42:	d13a      	bne.n	8008bba <_malloc_r+0xd2>
 8008b44:	6821      	ldr	r1, [r4, #0]
 8008b46:	3503      	adds	r5, #3
 8008b48:	1a6d      	subs	r5, r5, r1
 8008b4a:	f025 0503 	bic.w	r5, r5, #3
 8008b4e:	3508      	adds	r5, #8
 8008b50:	2d0c      	cmp	r5, #12
 8008b52:	bf38      	it	cc
 8008b54:	250c      	movcc	r5, #12
 8008b56:	4629      	mov	r1, r5
 8008b58:	4638      	mov	r0, r7
 8008b5a:	f7ff ffa5 	bl	8008aa8 <sbrk_aligned>
 8008b5e:	3001      	adds	r0, #1
 8008b60:	d02b      	beq.n	8008bba <_malloc_r+0xd2>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	442b      	add	r3, r5
 8008b66:	6023      	str	r3, [r4, #0]
 8008b68:	e00e      	b.n	8008b88 <_malloc_r+0xa0>
 8008b6a:	6822      	ldr	r2, [r4, #0]
 8008b6c:	1b52      	subs	r2, r2, r5
 8008b6e:	d41e      	bmi.n	8008bae <_malloc_r+0xc6>
 8008b70:	2a0b      	cmp	r2, #11
 8008b72:	d916      	bls.n	8008ba2 <_malloc_r+0xba>
 8008b74:	1961      	adds	r1, r4, r5
 8008b76:	42a3      	cmp	r3, r4
 8008b78:	6025      	str	r5, [r4, #0]
 8008b7a:	bf18      	it	ne
 8008b7c:	6059      	strne	r1, [r3, #4]
 8008b7e:	6863      	ldr	r3, [r4, #4]
 8008b80:	bf08      	it	eq
 8008b82:	6031      	streq	r1, [r6, #0]
 8008b84:	5162      	str	r2, [r4, r5]
 8008b86:	604b      	str	r3, [r1, #4]
 8008b88:	4638      	mov	r0, r7
 8008b8a:	f104 060b 	add.w	r6, r4, #11
 8008b8e:	f000 f865 	bl	8008c5c <__malloc_unlock>
 8008b92:	f026 0607 	bic.w	r6, r6, #7
 8008b96:	1d23      	adds	r3, r4, #4
 8008b98:	1af2      	subs	r2, r6, r3
 8008b9a:	d0b6      	beq.n	8008b0a <_malloc_r+0x22>
 8008b9c:	1b9b      	subs	r3, r3, r6
 8008b9e:	50a3      	str	r3, [r4, r2]
 8008ba0:	e7b3      	b.n	8008b0a <_malloc_r+0x22>
 8008ba2:	6862      	ldr	r2, [r4, #4]
 8008ba4:	42a3      	cmp	r3, r4
 8008ba6:	bf0c      	ite	eq
 8008ba8:	6032      	streq	r2, [r6, #0]
 8008baa:	605a      	strne	r2, [r3, #4]
 8008bac:	e7ec      	b.n	8008b88 <_malloc_r+0xa0>
 8008bae:	4623      	mov	r3, r4
 8008bb0:	6864      	ldr	r4, [r4, #4]
 8008bb2:	e7b2      	b.n	8008b1a <_malloc_r+0x32>
 8008bb4:	4634      	mov	r4, r6
 8008bb6:	6876      	ldr	r6, [r6, #4]
 8008bb8:	e7b9      	b.n	8008b2e <_malloc_r+0x46>
 8008bba:	230c      	movs	r3, #12
 8008bbc:	603b      	str	r3, [r7, #0]
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	f000 f84c 	bl	8008c5c <__malloc_unlock>
 8008bc4:	e7a1      	b.n	8008b0a <_malloc_r+0x22>
 8008bc6:	6025      	str	r5, [r4, #0]
 8008bc8:	e7de      	b.n	8008b88 <_malloc_r+0xa0>
 8008bca:	bf00      	nop
 8008bcc:	20000824 	.word	0x20000824

08008bd0 <_realloc_r>:
 8008bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd4:	4680      	mov	r8, r0
 8008bd6:	4614      	mov	r4, r2
 8008bd8:	460e      	mov	r6, r1
 8008bda:	b921      	cbnz	r1, 8008be6 <_realloc_r+0x16>
 8008bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008be0:	4611      	mov	r1, r2
 8008be2:	f7ff bf81 	b.w	8008ae8 <_malloc_r>
 8008be6:	b92a      	cbnz	r2, 8008bf4 <_realloc_r+0x24>
 8008be8:	f7ff ff12 	bl	8008a10 <_free_r>
 8008bec:	4625      	mov	r5, r4
 8008bee:	4628      	mov	r0, r5
 8008bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf4:	f000 f838 	bl	8008c68 <_malloc_usable_size_r>
 8008bf8:	4284      	cmp	r4, r0
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	d802      	bhi.n	8008c04 <_realloc_r+0x34>
 8008bfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c02:	d812      	bhi.n	8008c2a <_realloc_r+0x5a>
 8008c04:	4621      	mov	r1, r4
 8008c06:	4640      	mov	r0, r8
 8008c08:	f7ff ff6e 	bl	8008ae8 <_malloc_r>
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d0ed      	beq.n	8008bee <_realloc_r+0x1e>
 8008c12:	42bc      	cmp	r4, r7
 8008c14:	4622      	mov	r2, r4
 8008c16:	4631      	mov	r1, r6
 8008c18:	bf28      	it	cs
 8008c1a:	463a      	movcs	r2, r7
 8008c1c:	f7ff fed0 	bl	80089c0 <memcpy>
 8008c20:	4631      	mov	r1, r6
 8008c22:	4640      	mov	r0, r8
 8008c24:	f7ff fef4 	bl	8008a10 <_free_r>
 8008c28:	e7e1      	b.n	8008bee <_realloc_r+0x1e>
 8008c2a:	4635      	mov	r5, r6
 8008c2c:	e7df      	b.n	8008bee <_realloc_r+0x1e>
	...

08008c30 <_sbrk_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	4d06      	ldr	r5, [pc, #24]	; (8008c4c <_sbrk_r+0x1c>)
 8008c34:	2300      	movs	r3, #0
 8008c36:	4604      	mov	r4, r0
 8008c38:	4608      	mov	r0, r1
 8008c3a:	602b      	str	r3, [r5, #0]
 8008c3c:	f7f9 f9bc 	bl	8001fb8 <_sbrk>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d102      	bne.n	8008c4a <_sbrk_r+0x1a>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	b103      	cbz	r3, 8008c4a <_sbrk_r+0x1a>
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	2000082c 	.word	0x2000082c

08008c50 <__malloc_lock>:
 8008c50:	4801      	ldr	r0, [pc, #4]	; (8008c58 <__malloc_lock+0x8>)
 8008c52:	f000 b811 	b.w	8008c78 <__retarget_lock_acquire_recursive>
 8008c56:	bf00      	nop
 8008c58:	20000830 	.word	0x20000830

08008c5c <__malloc_unlock>:
 8008c5c:	4801      	ldr	r0, [pc, #4]	; (8008c64 <__malloc_unlock+0x8>)
 8008c5e:	f000 b80c 	b.w	8008c7a <__retarget_lock_release_recursive>
 8008c62:	bf00      	nop
 8008c64:	20000830 	.word	0x20000830

08008c68 <_malloc_usable_size_r>:
 8008c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c6c:	1f18      	subs	r0, r3, #4
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	bfbc      	itt	lt
 8008c72:	580b      	ldrlt	r3, [r1, r0]
 8008c74:	18c0      	addlt	r0, r0, r3
 8008c76:	4770      	bx	lr

08008c78 <__retarget_lock_acquire_recursive>:
 8008c78:	4770      	bx	lr

08008c7a <__retarget_lock_release_recursive>:
 8008c7a:	4770      	bx	lr

08008c7c <_init>:
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	bf00      	nop
 8008c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c82:	bc08      	pop	{r3}
 8008c84:	469e      	mov	lr, r3
 8008c86:	4770      	bx	lr

08008c88 <_fini>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	bf00      	nop
 8008c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8e:	bc08      	pop	{r3}
 8008c90:	469e      	mov	lr, r3
 8008c92:	4770      	bx	lr
